<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>为Android系统编写Linux内核驱动程序</title>
      <link href="/2018/08/02/2018-08-02-android-kernel-driver/"/>
      <url>/2018/08/02/2018-08-02-android-kernel-driver/</url>
      <content type="html"><![CDATA[<blockquote><p>这里使用一个虚拟的硬件设备，这个设备只有一个4字节的寄存器，它可读可写。这里把这个虚拟的设备命名为“mydev”，而这个内核驱动程序也命名为mydev驱动程序。<br><br></p></blockquote><hr><ul><li><p>驱动程序目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~/Android/kernel/goldfish</span><br><span class="line">----drivers</span><br><span class="line">    ----mydev</span><br><span class="line">        ----mydev.h</span><br><span class="line">        ----mydev.c</span><br><span class="line">        ----Kconfig</span><br><span class="line">        ----Makefile</span><br></pre></td></tr></table></figure></li><li><p>新建mydev目录</p></li></ul><ul><li>~/Android$ cd kernel/goldfish/drivers</li><li>~/Android/kernel/goldfish/drivers$ mkdir mydev</li></ul><ul><li>在mydev目录中增加mydev.h文件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MYDEV_ANDROID_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MYDEV_ANDROID_Hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYDEV_DEVICE_NODE_NAME  <span class="meta-string">"helmydevlo"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYDEV_DEVICE_FILE_NAME  <span class="meta-string">"mydev"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYDEV_DEVICE_PROC_NAME  <span class="meta-string">"mydev"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYDEV_DEVICE_CLASS_NAME <span class="meta-string">"mydev"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符设备结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mydev_android_dev</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;<span class="comment">//寄存器</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span> <span class="title">sem</span>;</span><span class="comment">//信号量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">dev</span>;</span><span class="comment">//内嵌的字符设备</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li><p>在mydev目录中增加mydev.c文件，这是驱动程序的实现部分。<br>驱动程序的功能主要是向上层提供访问设备的寄存器的值，包括读和写。这里，提供了三种访问设备寄存器的方法，一是通过proc文件系统来访问，二是通过传统的设备文件的方法来访问，三是通过devfs文件系统来访问。下面分段描述该驱动程序的实现。</p><ul><li>首先是包含必要的头文件和定义三种访问设备的方法：</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/proc_fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mydev.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*主设备和从设备号变量*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> mydev_major = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> mydev_minor = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设备类别和设备变量*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">class</span>* <span class="title">mydev_class</span> = <span class="title">NULL</span>;</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mydev_android_dev</span>* <span class="title">mydev_dev</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*传统的设备文件操作方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mydev_open</span><span class="params">(struct inode* inode, struct file* filp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mydev_release</span><span class="params">(struct inode* inode, struct file* filp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_read</span><span class="params">(struct file* filp, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span>* f_pos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_write</span><span class="params">(struct file* filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span>* f_pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**传统的设备文件操作方法表*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">mydev_fops</span> = &#123;</span></span><br><span class="line">    .owner = THIS_MODULE,</span><br><span class="line">    .open = mydev_open,</span><br><span class="line">    .release = mydev_release,</span><br><span class="line">    .read = mydev_read,</span><br><span class="line">    .write = mydev_write,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*devfs文件系统的设备属性操作方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_val_show</span><span class="params">(struct device* dev, struct device_attribute* attr,  <span class="keyword">char</span>* buf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_val_store</span><span class="params">(struct device* dev, struct device_attribute* attr, <span class="keyword">const</span> <span class="keyword">char</span>* buf, <span class="keyword">size_t</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*devfs文件系统的设备属性*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">DEVICE_ATTR</span><span class="params">(val, S_IRUGO | S_IWUSR, mydev_val_show, mydev_val_store)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义传统的设备文件访问方法，主要是定义mydev_open、mydev_release、mydev_read和mydev_write这四个打开、释放、读和写设备文件的方法：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*打开设备方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mydev_open</span><span class="params">(struct inode* inode, struct file* filp)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mydev_android_dev</span>* <span class="title">dev</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将自定义设备结构体保存在文件指针的私有数据域中，以便访问设备时拿来用*/</span></span><br><span class="line">    dev = container_of(inode-&gt;i_cdev, struct mydev_android_dev, dev);</span><br><span class="line">    filp-&gt;private_data = dev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设备文件释放时调用，空实现*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mydev_release</span><span class="params">(struct inode* inode, struct file* filp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取设备的寄存器val的值*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_read</span><span class="params">(struct file* filp, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span>* f_pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">ssize_t</span> err = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mydev_android_dev</span>* <span class="title">dev</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*同步访问*/</span></span><br><span class="line">    <span class="keyword">if</span>(down_interruptible(&amp;(dev-&gt;sem))) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(count &lt; <span class="keyword">sizeof</span>(dev-&gt;val)) &#123;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将寄存器val的值拷贝到用户提供的缓冲区*/</span></span><br><span class="line">    <span class="keyword">if</span>(copy_to_user(buf, &amp;(dev-&gt;val), <span class="keyword">sizeof</span>(dev-&gt;val))) &#123;</span><br><span class="line">        err = -EFAULT;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = <span class="keyword">sizeof</span>(dev-&gt;val);</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    up(&amp;(dev-&gt;sem));</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*写设备的寄存器值val*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_write</span><span class="params">(struct file* filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span>* f_pos)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mydev_android_dev</span>* <span class="title">dev</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line">    <span class="keyword">ssize_t</span> err = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*同步访问*/</span></span><br><span class="line">    <span class="keyword">if</span>(down_interruptible(&amp;(dev-&gt;sem))) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(count != <span class="keyword">sizeof</span>(dev-&gt;val)) &#123;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将用户提供的缓冲区的值写到设备寄存器去*/</span></span><br><span class="line">    <span class="keyword">if</span>(copy_from_user(&amp;(dev-&gt;val), buf, count)) &#123;</span><br><span class="line">        err = -EFAULT;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = <span class="keyword">sizeof</span>(dev-&gt;val);</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    up(&amp;(dev-&gt;sem));</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义通过devfs文件系统访问方法，这里把设备的寄存器val看成是设备的一个属性，通过读写这个属性来对设备进行访问，主要是实现mydev_val_show和mydev_val_store两个方法，同时定义了两个内部使用的访问val值的方法__mydev_get_val和__mydev_set_val：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取寄存器val的值到缓冲区buf中，内部使用*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ssize_t</span> __mydev_get_val(struct mydev_android_dev* dev, <span class="keyword">char</span>* buf) &#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*同步访问*/</span></span><br><span class="line">    <span class="keyword">if</span>(down_interruptible(&amp;(dev-&gt;sem))) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    val = dev-&gt;val;</span><br><span class="line">    up(&amp;(dev-&gt;sem));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">snprintf</span>(buf, PAGE_SIZE, <span class="string">"%d\n"</span>, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*把缓冲区buf的值写到设备寄存器val中去，内部使用*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ssize_t</span> __mydev_set_val(struct mydev_android_dev* dev, <span class="keyword">const</span> <span class="keyword">char</span>* buf, <span class="keyword">size_t</span> count) &#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将字符串转换成数字*/</span></span><br><span class="line">    val = simple_strtol(buf, <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*同步访问*/</span></span><br><span class="line">    <span class="keyword">if</span>(down_interruptible(&amp;(dev-&gt;sem))) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dev-&gt;val = val;</span><br><span class="line">    up(&amp;(dev-&gt;sem));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取设备属性val*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_val_show</span><span class="params">(struct device* dev, struct device_attribute* attr, <span class="keyword">char</span>* buf)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mydev_android_dev</span>* <span class="title">hdev</span> = (<span class="title">struct</span> <span class="title">mydev_android_dev</span>*)<span class="title">dev_get_drvdata</span>(<span class="title">dev</span>);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> __mydev_get_val(hdev, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*写设备属性val*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_val_store</span><span class="params">(struct device* dev, struct device_attribute* attr, <span class="keyword">const</span> <span class="keyword">char</span>* buf, <span class="keyword">size_t</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mydev_android_dev</span>* <span class="title">hdev</span> = (<span class="title">struct</span> <span class="title">mydev_android_dev</span>*)<span class="title">dev_get_drvdata</span>(<span class="title">dev</span>);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> __mydev_set_val(hdev, buf, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义通过proc文件系统访问方法，主要实现了mydev_proc_read和mydev_proc_write两个方法，同时定义了在proc文件系统创建和删除文件的方法mydev_create_proc和mydev_remove_proc：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取设备寄存器val的值，保存在page缓冲区中*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_proc_read</span><span class="params">(<span class="keyword">char</span>* page, <span class="keyword">char</span>** start, <span class="keyword">off_t</span> off, <span class="keyword">int</span> count, <span class="keyword">int</span>* eof, <span class="keyword">void</span>* data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(off &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        *eof = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> __mydev_get_val(mydev_dev, page);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*把缓冲区的值buff保存到设备寄存器val中去*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_proc_write</span><span class="params">(struct file* filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buff, <span class="keyword">unsigned</span> <span class="keyword">long</span> len, <span class="keyword">void</span>* data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> err = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>* page = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(len &gt; PAGE_SIZE) &#123;</span><br><span class="line">        printk(KERN_ALERT<span class="string">"The buff is too large: %lu.\n"</span>, len);</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    page = (<span class="keyword">char</span>*)__get_free_page(GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span>(!page) &#123;</span><br><span class="line">            printk(KERN_ALERT<span class="string">"Failed to alloc page.\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*先把用户提供的缓冲区值拷贝到内核缓冲区中去*/</span></span><br><span class="line">    <span class="keyword">if</span>(copy_from_user(page, buff, len)) &#123;</span><br><span class="line">        printk(KERN_ALERT<span class="string">"Failed to copy buff from user.\n"</span>);</span><br><span class="line">        err = -EFAULT;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = __mydev_set_val(mydev_dev, page, len);</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    free_page((<span class="keyword">unsigned</span> <span class="keyword">long</span>)page);</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建/proc/mydev文件*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mydev_create_proc</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">proc_dir_entry</span>* <span class="title">entry</span>;</span></span><br><span class="line"></span><br><span class="line">    entry = create_proc_entry(MYDEV_DEVICE_PROC_NAME, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(entry) &#123;</span><br><span class="line">        entry-&gt;owner = THIS_MODULE;</span><br><span class="line">        entry-&gt;read_proc = mydev_proc_read;</span><br><span class="line">        entry-&gt;write_proc = mydev_proc_write;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除/proc/mydev文件*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mydev_remove_proc</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    remove_proc_entry(MYDEV_DEVICE_PROC_NAME, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后，定义模块加载和卸载方法，这里只要是执行设备注册和初始化操作：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*初始化设备*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>  __mydev_setup_dev(struct mydev_android_dev* dev) &#123;</span><br><span class="line">    <span class="keyword">int</span> err;</span><br><span class="line">    <span class="keyword">dev_t</span> devno = MKDEV(mydev_major, mydev_minor);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(dev, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct mydev_android_dev));</span><br><span class="line"></span><br><span class="line">    cdev_init(&amp;(dev-&gt;dev), &amp;mydev_fops);</span><br><span class="line">    dev-&gt;dev.owner = THIS_MODULE;</span><br><span class="line">    dev-&gt;dev.ops = &amp;mydev_fops;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*注册字符设备*/</span></span><br><span class="line">    err = cdev_add(&amp;(dev-&gt;dev),devno, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*初始化信号量和寄存器val的值*/</span></span><br><span class="line">    init_MUTEX(&amp;(dev-&gt;sem));</span><br><span class="line">    dev-&gt;val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*模块加载方法*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">mydev_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> err = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">dev_t</span> dev = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span>* <span class="title">temp</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line">    printk(KERN_ALERT<span class="string">"Initializing mydev device.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*动态分配主设备和从设备号*/</span></span><br><span class="line">    err = alloc_chrdev_region(&amp;dev, <span class="number">0</span>, <span class="number">1</span>, MYDEV_DEVICE_NODE_NAME);</span><br><span class="line">    <span class="keyword">if</span>(err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(KERN_ALERT<span class="string">"Failed to alloc char dev region.\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> fail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mydev_major = MAJOR(dev);</span><br><span class="line">    mydev_minor = MINOR(dev);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*分配helo设备结构体变量*/</span></span><br><span class="line">    mydev_dev = kmalloc(<span class="keyword">sizeof</span>(struct mydev_android_dev), GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span>(!mydev_dev) &#123;</span><br><span class="line">        err = -ENOMEM;</span><br><span class="line">        printk(KERN_ALERT<span class="string">"Failed to alloc mydev_dev.\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> unregister;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*初始化设备*/</span></span><br><span class="line">    err = __mydev_setup_dev(mydev_dev);</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        printk(KERN_ALERT<span class="string">"Failed to setup dev: %d.\n"</span>, err);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*在/sys/class/目录下创建设备类别目录mydev*/</span></span><br><span class="line">    mydev_class = class_create(THIS_MODULE, MYDEV_DEVICE_CLASS_NAME);</span><br><span class="line">    <span class="keyword">if</span>(IS_ERR(mydev_class)) &#123;</span><br><span class="line">        err = PTR_ERR(mydev_class);</span><br><span class="line">        printk(KERN_ALERT<span class="string">"Failed to create mydev class.\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> destroy_cdev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*在/dev/目录和/sys/class/mydev目录下分别创建设备文件mydev*/</span></span><br><span class="line">    temp = device_create(mydev_class, <span class="literal">NULL</span>, dev, <span class="string">"%s"</span>, MYDEV_DEVICE_FILE_NAME);</span><br><span class="line">    <span class="keyword">if</span>(IS_ERR(temp)) &#123;</span><br><span class="line">        err = PTR_ERR(temp);</span><br><span class="line">        printk(KERN_ALERT<span class="string">"Failed to create mydev device."</span>);</span><br><span class="line">        <span class="keyword">goto</span> destroy_class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*在/sys/class/mydev/mydev目录下创建属性文件val*/</span></span><br><span class="line">    err = device_create_file(temp, &amp;dev_attr_val);</span><br><span class="line">    <span class="keyword">if</span>(err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(KERN_ALERT<span class="string">"Failed to create attribute val."</span>);</span><br><span class="line">        <span class="keyword">goto</span> destroy_device;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dev_set_drvdata(temp, mydev_dev);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*创建/proc/mydev文件*/</span></span><br><span class="line">    mydev_create_proc();</span><br><span class="line"></span><br><span class="line">    printk(KERN_ALERT<span class="string">"Succedded to initialize mydev device.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">destroy_device:</span><br><span class="line">    device_destroy(mydev_class, dev);</span><br><span class="line"></span><br><span class="line">destroy_class:</span><br><span class="line">    class_destroy(mydev_class);</span><br><span class="line"></span><br><span class="line">destroy_cdev:</span><br><span class="line">    cdev_del(&amp;(mydev_dev-&gt;dev));</span><br><span class="line"></span><br><span class="line">cleanup:</span><br><span class="line">    kfree(mydev_dev);</span><br><span class="line"></span><br><span class="line">unregister:</span><br><span class="line">    unregister_chrdev_region(MKDEV(mydev_major, mydev_minor), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">fail:</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*模块卸载方法*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">mydev_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">dev_t</span> devno = MKDEV(mydev_major, mydev_minor);</span><br><span class="line"></span><br><span class="line">    printk(KERN_ALERT<span class="string">"Destroy mydev device.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除/proc/mydev文件*/</span></span><br><span class="line">    mydev_remove_proc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*销毁设备类别和设备*/</span></span><br><span class="line">    <span class="keyword">if</span>(mydev_class) &#123;</span><br><span class="line">        device_destroy(mydev_class, MKDEV(mydev_major, mydev_minor));</span><br><span class="line">        class_destroy(mydev_class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除字符设备和释放设备内存*/</span></span><br><span class="line">    <span class="keyword">if</span>(mydev_dev) &#123;</span><br><span class="line">        cdev_del(&amp;(mydev_dev-&gt;dev));</span><br><span class="line">        kfree(mydev_dev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*释放设备号*/</span></span><br><span class="line">    unregister_chrdev_region(devno, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"Fake Register Android Driver"</span>);</span><br><span class="line"></span><br><span class="line">module_init(mydev_init);</span><br><span class="line">module_exit(mydev_exit);</span><br></pre></td></tr></table></figure><ul><li><p>在mydev目录中新增Kconfig和Makefile两个文件，其中Kconfig是在编译前执行配置命令make menuconfig时用到的，而Makefile是执行编译命令make是用到的</p><blockquote><p>在Kconfig文件中，tristate表示编译选项MYDEV支持在编译内核时，mydev模块支持以模块、内建和不编译三种编译方法，默认是不编译，因此，在编译内核前，我们还需要执行make menuconfig命令来配置编译选项，使得mydev可以以模块或者内建的方法进行编译。<br>在Makefile文件中，根据选项MYDEV的值，执行不同的编译方法。</p><ul><li>Kconfig文件的内容(默认的编译方式为n，即不编译到内核中，故在编译驱动程序之前，需要执行make menuconfig命令来修改编译选项)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config MYDEV</span><br><span class="line">tristate &quot;Fake Register Android Driver&quot;</span><br><span class="line">default n</span><br><span class="line">help</span><br><span class="line">This is the mydev driver for android system.</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>Makefile<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj-<span class="variable">$(CONFIG_MYDEV)</span> += mydev.o</span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改内核Kconfig文件</p><ul><li>打开arch/arm/Kconfig文件，找到以下两行内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">menu &quot;Device Drivers&quot;</span><br><span class="line">......</span><br><span class="line">endmenu</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>在这两行内容之间添加下面一行内容，将驱动程序mydev和Kconfig文件包含尽量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu &quot;Device Drivers&quot;</span><br><span class="line">source &quot;drivers/mydev/Kconfig&quot;</span><br><span class="line">......</span><br><span class="line">endmenu</span><br></pre></td></tr></table></figure></p><p>这样，执行make menuconfig时，就可以配置mydev模块的编译选项了。</p><pre><code>- 打开drivers/Kconfig，和arch/arm/Kconfig一样，增加一行内容：source &quot;drivers/mydev/Kconfig&quot;</code></pre><ul><li><p>修改drivers/Makefile文件，添加一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj-$(CONFIG_MYDEV) += mydev/</span><br></pre></td></tr></table></figure></li><li><p>配置编译选项：</p></li></ul><ul><li>~/Android/kernel/goldfish$ make menuconfig<br>找到”Device Drivers” =&gt; “Fake Register Android Drivers”选项，设置为y。<blockquote><p>注意，如果内核不支持动态加载模块，这里不能选择m，虽然我们在Kconfig文件中配置了MYDEV选项为tristate。要支持动态加载模块选项，必须要在配置菜单中选择Enable loadable module support选项；在支持动态卸载模块选项，必须要在Enable loadable module support菜单项中，选择Module unloading选项。</p></blockquote></li></ul><ul><li>编译：</li></ul><ul><li>~/Android/kernel/goldfish$ make<br>编译成功后，就可以在mydev目录下看到mydev.o文件了，这时候编译出来的zImage已经包含了mydev驱动。</li></ul><p>运行新编译的内核文件，验证mydev驱动程序是否已经正常安装</p><ul><li>~/Android$ emulator -kernel ./kernel/goldfish/arch/arm/boot/zImage &amp;</li><li>~/Android$ adb shell</li></ul><p>进入到dev目录，可以看到mydev设备文件</p><ul><li>root@android:/ # cd dev</li><li>root@android:/dev # ls</li></ul><p>进入到proc目录，可以看到mydev文件：</p><ul><li>root@android:/ # cd proc</li><li>root@android:/proc # ls</li></ul><p>访问mydev文件的值</p><ul><li>root@android:/proc # cat mydev<br>0</li><li>root@android:/proc # echo ‘5’ &gt; mydev</li><li>root@android:/proc # cat mydev<br>5</li></ul><p>进入到sys/class目录，可以看到mydev目录：</p><ul><li>root@android:/ # cd sys/class</li><li>root@android:/sys/class # ls</li></ul><p>进入到mydev目录，可以看到mydev目录：</p><ul><li>root@android:/sys/class # cd mydev</li><li>root@android:/sys/class/mydev # ls</li></ul><p>进入到下一层mydev目录，可以看到val文件</p><ul><li>root@android:/sys/class/mydev # cd mydev</li><li>root@android:/sys/class/mydev/mydev # ls</li></ul><p>访问属性文件val的值</p><ul><li>root@android:/sys/class/mydev/mydev # cat val<br>5</li><li>root@android:/sys/class/mydev/mydev # echo ‘0’  &gt; val</li><li>root@android:/sys/class/mydev/mydev # cat val<br>0</li></ul><p>至此，mydev内核驱动程序就完成了。这里采用的是系统提供的方法和驱动程序进行交互，也就是通过proc文件系统和devfs文件系统的方法。</p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo</title>
      <link href="/2018/07/10/2018-07-10-hexo/"/>
      <url>/2018/07/10/2018-07-10-hexo/</url>
      <content type="html"><![CDATA[<blockquote><p>hexo是一款基于Node.js的静态博客框架，可以方便的生成静态网页托管在github上。<br><br></p></blockquote><hr><h2 id="依赖包和工具安装"><a href="#依赖包和工具安装" class="headerlink" title="依赖包和工具安装"></a>依赖包和工具安装</h2><ul><li>Git<ul><li><code>sudo apt-get install git</code>  (git-core)</li><li><code>git --version</code></li><li>生成 SSH key : <code>ssh-keygen -t rsa -C &quot;349098792@qq.com&quot;</code><br><img src="/2018/07/10/2018-07-10-hexo/01.png" alt=""></li></ul></li></ul><blockquote><p>默认情况下连续按下三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub。如果是想一台电脑配置两个或多个github帐号，则此处不能够一直回车，要注意在提示输入文件名称时输入一个和默认名称不一样的名称，否则会发生覆盖，比如这里我电脑上使用两个github帐号，新建的一个名为yudianr，则可以给文件取名叫id_rsa_yudianr，则会在当前文件夹中生成id_rsa_yudianr和id_rsa_yudianr.pub两个文件。<br><br><br>在GitHub帐号设置那里添加SSH Key，打开公钥文件id_rsa_yudianr.pub，复制里面的所有字符粘贴到github的SSH设置处，可使用ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>来测试是否关联成功。<br><br></p></blockquote><p><img src="/2018/07/10/2018-07-10-hexo/02.png" alt=""><br><img src="/2018/07/10/2018-07-10-hexo/03.png" alt=""></p><pre><code>- 配置~/.ssh/config文件</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    #老帐号</span><br><span class="line">    Host github.com</span><br><span class="line">        HostName github.com</span><br><span class="line">        PreferredAuthentications publickey</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">    #新帐号</span><br><span class="line">    Host yudianr.github.com</span><br><span class="line">        HostName github.com</span><br><span class="line">        PreferredAuthentications publickey</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa_yudianr</span><br><span class="line"></span><br><span class="line">注意：此时提交代码后log中记录的用户名和邮箱信息都为全局配置的git帐号的信息，如果希望修改显示的信息，可以在项目目录中使用以下命令进行配置：</span><br><span class="line">git config --global user.name &quot;你的昵称&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱地址&quot;</span><br><span class="line">或者vim .gitconfig直接进行修改</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">    name = eightplus</span><br><span class="line">    email = kobe24_lixiang@126.com</span><br><span class="line">或者</span><br><span class="line">[user]</span><br><span class="line">    name = yudianr</span><br><span class="line">    email = 349098792@qq.com</span><br></pre></td></tr></table></figure><ul><li><p>npm</p><ul><li>sudo apt-get install npm</li><li>npm -v</li></ul></li><li><p>Nodejs</p><ul><li>sudo apt-get install nodejs</li><li>node -v</li></ul></li><li><p>Hexo</p><ul><li>sudo npm install -g hexo-cli</li><li>hexo -v</li></ul></li></ul><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="/2018/07/10/2018-07-10-hexo/04.png" alt=""></p><h2 id="自动部署发布工具-hexo-deployer-git"><a href="#自动部署发布工具-hexo-deployer-git" class="headerlink" title="自动部署发布工具 hexo-deployer-git"></a>自动部署发布工具 hexo-deployer-git</h2><ul><li><p>npm i hexo-generator-json-content –save (在上面初始化后的folder目录下打开终端执行，执行后会写入package.json文件中)</p></li><li><p>其他插件安装</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-helper-qrcode --save</span><br><span class="line">npm i hexo-generator-sitemap --save</span><br><span class="line">npm i hexo-generator-json-feed --save</span><br><span class="line">npm i hexo-generator-feed --save</span><br><span class="line">npm i hexo-generator-baidu-sitemap --save</span><br><span class="line">npm i hexo-deployer-rsync --save</span><br></pre></td></tr></table></figure><ul><li><p>提交搜素引擎</p><blockquote><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。<br><br><br>百度站长平台为未使用百度统计的站点提供三种验证方式：文件验证、html标签验证、CNAME验证，如果选择文件验证，下载文件后将文件放在source跟目录下。<br><br><br>验证完成后，我们将会认为您是网站的拥有者。为使您的网站一直保持验证通过的状态，请保留验证的文件、html标签或CNAME记录，我们会去定期检查验证记录。<br><br></p></blockquote><ul><li><p>对谷歌和百度的插举例-&gt;打开博客根目录，在这个目录下打开终端执行执行如下两个安装插件：<br><code>npm install hexo-generator-sitemap --save</code><br><code>npm install hexo-generator-baidu-sitemap --save</code></p></li><li><p>在博客根目录的_config.yml中添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br></pre></td></tr></table></figure></li><li><p>执行hexo generate编译博客后，如果博客根目录的public下生成了sitemap.xml以及baidusitemap.xml就表示成功了。</p></li></ul></li></ul><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><ul><li>hexo generate<br><img src="/2018/07/10/2018-07-10-hexo/05.png" alt=""></li></ul><h2 id="生成静态文件查看默认博客效果"><a href="#生成静态文件查看默认博客效果" class="headerlink" title="生成静态文件查看默认博客效果"></a>生成静态文件查看默认博客效果</h2><ul><li>hexo server  （如果默认的4000端口被占用，可以使用-p参数指定其他端口，如：hexo server -p 5000）<br><img src="/2018/07/10/2018-07-10-hexo/06.png" alt=""></li></ul><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><ul><li>在站点的配置文件_config.yml中设置部署信息(注意：type repo branch message前有两个空格)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/eightplus/eightplus.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: &apos;站点更新:&#123;&#123;now(&quot;YYYY-MM-DD HH:mm:ss&quot;)&#125;&#125;&apos;</span><br></pre></td></tr></table></figure></li></ul><h2 id="部署到GitHub上"><a href="#部署到GitHub上" class="headerlink" title="部署到GitHub上"></a>部署到GitHub上</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean    #清空</span><br><span class="line">hexo generate #生成静态网页</span><br><span class="line">hexo deploy   #部署</span><br><span class="line"></span><br><span class="line">浏览器中输入 http://eightplus.github.io</span><br></pre></td></tr></table></figure><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><ul><li>在hexo的工作空间下的source目录下新建一个CNAME的文件，不要后缀。打开CNAME写上购买的域名，如： <a href="eightplus.info">eightplus.info</a></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li><p>网站访问量显示</p><ul><li>使用第三方的统计插件<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a>, 在themes\yilia\layout_partial下的footer.ejs中加入如下代码即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">  本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">总访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实现单篇文章浏览统计和评论统计(从网易云跟帖中获取评论数) <a href="http://lawlite.me/2017/04/10/Hexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">参考文档</a></p><ul><li>修改themes\yilia\layout_partial文件夹下的article.ejs文件，在&lt;%- partial(‘post/title’, {class_name: ‘article-title’}) %&gt;节点下加入(注意这里网易云跟帖还没设置，而评论数中使用到了，这里运行会有问题)<figure class="highlight plain"><figcaption><span>显示阅读和评论数 --></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.wangYi)&#123; %&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;a class=&quot;cloud-tie-join-count&quot; href=&quot;javascript:void(0);&quot; style=&quot;color:gray;font-size:14px;&quot;&gt;</span><br><span class="line">&lt;span class=&quot;icon-sort&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_page_pv&quot; style=&quot;color:#ef7522;font-size:14px;&quot;&gt;</span><br><span class="line">    阅读数: &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次 &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;cloud-tie-join-count&quot; href=&quot;javascript:void(0);&quot; style=&quot;color:#ef7522;font-size:14px;&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;icon-comment&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;join-text&quot; style=&quot;color:#ef7522;font-size:14px;&quot;&gt;评论数:&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;join-count&quot;&gt;0&lt;/span&gt;次</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu下Android开发的基础知识</title>
      <link href="/2018/07/03/2018-07-03-build-android/"/>
      <url>/2018/07/03/2018-07-03-build-android/</url>
      <content type="html"><![CDATA[<blockquote><p>这里使用Ubuntu 16.04的64位系统上进行Android源码的编译。<br><br></p></blockquote><hr><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><ol><li>安装ubuntu 16.04 amd64 系统</li><li>安装Git</li></ol><ul><li>~$ sudo apt-get install git-core gnupg</li></ul><ol start="3"><li>安装Java SDK(官方JDK下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html)：" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html)：</a></li></ol><ul><li>$ sudo add-apt-repository “deb <a href="http://us.archive.ubuntu.com/ubuntu/" target="_blank" rel="noopener">http://us.archive.ubuntu.com/ubuntu/</a> hardy multiverse”</li><li>$ sudo apt-get update</li><li>$ sudo apt-get install sun-java6-jre sun-java6-plugin</li><li>$ sudo apt-get install sun-java6-jdk</li></ul><ol start="4"><li>安装其他依赖包(valgrind为调试工具)</li></ol><ul><li>$ sudo apt-get install flex bison gperf libsdl-dev libesd0-dev libwxgtk2.6-dev build-essential zip curl valgrind</li></ul><h2 id="二、下载Android源码"><a href="#二、下载Android源码" class="headerlink" title="二、下载Android源码"></a>二、下载Android源码</h2><ol><li>下载repo工具</li></ol><ul><li>$ wget <a href="https://dl-ssl.google.com/dl/googlesource/git-repo/repo" target="_blank" rel="noopener">https://dl-ssl.google.com/dl/googlesource/git-repo/repo</a></li><li>$ chmod a+x repo</li><li>$ sudo mv repo /bin/</li></ul><ol start="2"><li>下载Android源码</li></ol><ul><li>$ mkdir Android</li><li>$ cd Android</li><li>Android$ repo init -u <a href="https://android.googlesource.com/platform/mainifest" target="_blank" rel="noopener">https://android.googlesource.com/platform/mainifest</a>(如果想下载Android 2.3.1，执行：repo init -u <a href="https://android.googlesource.com/platform/mainifest" target="_blank" rel="noopener">https://android.googlesource.com/platform/mainifest</a> -b android-2.3.1_r1)</li><li>Android$ repo sync</li></ul><h2 id="三、编译Android源码"><a href="#三、编译Android源码" class="headerlink" title="三、编译Android源码"></a>三、编译Android源码</h2><ul><li>Android$make (make -j18)<br>编译结果的输出目录为out/target/product/$(TARGET_PRODUCT),TARGET_PRODUCT是一个环境变量，默认值为generic</li></ul><h2 id="四、编译SDK-可选"><a href="#四、编译SDK-可选" class="headerlink" title="四、编译SDK(可选)"></a>四、编译SDK(可选)</h2><ul><li>Android$make sdk<br>打包成功后，可以看到如下输出($USER$表示当前登录的用户名)：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Package SDK: out/host/linux-x86/sdk/android-sdk_eng.$USER$_linux-x86.zip</span><br></pre></td></tr></table></figure></li></ul><h2 id="五、安装编译好的Android镜像到模拟器上"><a href="#五、安装编译好的Android镜像到模拟器上" class="headerlink" title="五、安装编译好的Android镜像到模拟器上"></a>五、安装编译好的Android镜像到模拟器上</h2><ol><li>设置环境变量(Android模拟器命令emulator位于Android/out/host/linux-x86/bin中，~/Android/out/target/product/generic是Android镜像存放目录)</li></ol><ul><li>Android$export PATH=$PATH:~/Android/out/host/linux-x86/bin</li><li>Android$export ANDROID_PRODUCT_OUT=~/Android/out/target/product/generic</li></ul><ol start="2"><li>运行Android模拟器</li></ol><ul><li>Android$emulator</li></ul><p>启动Android模拟器需要四个文件，分别为zImage、system.img、userdata.img和ramdisk.img，其中zImage为Linux内核镜像文件，三个.img文件为Android系统镜像文件。如果不带任何参数来运行emulator命令，则Android模拟器默认使用的zImage文件是Android/out/host/linux-x86/bin中的kernel-qemu文件，默认使用的三个.img文件位于ANDROID_PRODUCT_OUT目录中。ANDROID_PRODUCT_OUT是一个环境变量，这里将它的值设置为Android源码编译结果的输出目录，如果不设置ANDROID_PRODUCT_OUT环境变量，就需要指定上述四个文件来启动Android模拟器，如下：</p><ul><li>Android$emulator - kernel ./prebuilt/android-arm/kernel/kernel-qemu -sysdir ./out/target/product/generic -system system.img -data userdata.img -ramdisk ramdisk.img</li></ul><h2 id="六、下载、编译和安装Android最新内核源代码"><a href="#六、下载、编译和安装Android最新内核源代码" class="headerlink" title="六、下载、编译和安装Android最新内核源代码"></a>六、下载、编译和安装Android最新内核源代码</h2><p>Android源代码工程默认是不包括它所使用的Linux内核源代码的，而是使用预先编译好的内核，即prebuilt/android-arm/kernel/kernel-qemu文件。如果我们需要运行定制的Linux内核，则需要下载Linux kernel源代码进行编译。</p><ol><li>Linux kernel源代码下载</li></ol><ul><li>~/Android$ mkdir kernel</li><li>~/Android$ cd kernel</li><li>~/Android/kernel$ git clone <a href="http://android.googlesource.com/kernel/goldfish.git" target="_blank" rel="noopener">http://android.googlesource.com/kernel/goldfish.git</a></li></ul><ol start="2"><li>支线下载<br>下载完成后，在kernel目录下可以看到一个空的goldfish子目录，此时需要执行git checkout来指定需要的支线代码，在执行git checkout之前，可先执行git branch -a查看有哪些支线代码。这里选择android-gldfish-2.6.29</li></ol><ul><li>~/Android/kernel/goldfish$git branch -a</li><li>~/Android/kernel/goldfish$git checkout remotes/origin/archive/android-gldfish-2.6.29</li></ul><ol start="3"><li><p>修改Android内核源码目录下Makefile文件中的CROSS_COMPILE变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#ARCH ?= (SUBARCH)</span><br><span class="line">#CROSS_COMPILE?=</span><br><span class="line">ARCH?= arm  #体系结构为arm</span><br><span class="line">CROSS_COMPILE?= arm-eabi- #交叉编译工具链前缀</span><br></pre></td></tr></table></figure></li><li><p>将交叉编译工具目录添加到环境变量PATH中</p></li></ol><ul><li>~/Android/kernel/goldfish$ export PATH=$PATH:~/Android/prebuilt/linux-x86/toolchain/arm-eabi-4.4.3/bin</li></ul><ol start="5"><li>修改硬件配置文件goldfish_defconfig</li></ol><ul><li>~/Android/kernel/goldfish$ make goldfish_defconfig</li></ul><ol start="6"><li>开始编译(在make之前，可以执行make menuconfig先配置一下编译选项)</li></ol><ul><li>~/Android/kernel/goldfish$ make<br>编译成功后，可看到下面两行：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OBJCOPY arch/arm/boot/zImage</span><br><span class="line">Kernel: arch/arm/boot/zImage is ready</span><br></pre></td></tr></table></figure></li></ul><h2 id="七、在模拟器中运行编译好的内核"><a href="#七、在模拟器中运行编译好的内核" class="headerlink" title="七、在模拟器中运行编译好的内核"></a>七、在模拟器中运行编译好的内核</h2><ol><li>在启动模拟器之前，先设置模拟器的目录到环境变量$PATH中去</li></ol><ul><li>~/Android$export PATH=$PATH:~/Android/out/host/linux-x86/bin</li></ul><ol start="2"><li>设置ANDROID_PRODUCT_OUT环境变量</li></ol><ul><li>~/Android$export ANDROID_PRODUCT_OUT=~/Android/out/target/product/generic</li></ul><ol start="3"><li>在后台中指定内核文件启动模拟器</li></ol><ul><li>~/Android$emulator -kernel ./kernel/goldfish/arch/arm/boot/zImage &amp;</li></ul><ol start="4"><li>用adb工具连接模拟器，查看内核版本信息，看看模拟器上跑的内核是不是刚才编译出来的内核(adb位于~/Android/out/host/linux-x86/bin目录中)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/Android$ adb shell</span><br><span class="line">root@android:/ # cd proc</span><br><span class="line">root@android:/proc # cat version</span><br></pre></td></tr></table></figure></li></ol><h2 id="八、单独编译Android源代码中的模块"><a href="#八、单独编译Android源代码中的模块" class="headerlink" title="八、单独编译Android源代码中的模块"></a>八、单独编译Android源代码中的模块</h2><p>Android源码第一次执行make会耗时很久，之后如果修改了Android源码中的某个模块或者在Android源码工程新增一个自己的模块，则可以单独编译该模块，以及重新打包system.img。</p><ol><li>在Android源码目录下的build目录下，有个脚本文件envsetup.sh，执行这个脚本文件可以获得一些有用的工具，其中就包括mmm，该命令用来编译指定目录的所有模块，通常这个目录只包含一个模块。</li><li>使用mmm命令来编译指定的模块，如Email应用程序</li></ol><ul><li>~/Android$mmm packages/apps/Email/<br>编译完成之后，就可以在out/target/product/generic/system/app目录下看到Email.apk文件了。Android系统自带的App都放在这具目录下。另外，Android系统的一些可执行文件，例如C编译的可执行文件，放在out/target/product/generic/system/bin目录下，动态链接库文件放在out/target/product/generic/system/lib目录下，out/target/product/generic/system/lib/hw目录存放的是硬件抽象层（HAL）接口文件.</li></ul><ol start="3"><li>编译好模块后，重新打包system.img文件</li></ol><ul><li>~/Android$make snod</li></ul><ol start="4"><li>运行模拟器：</li></ol><ul><li>~/Android$emulator</li></ul><h2 id="九、日志系统"><a href="#九、日志系统" class="headerlink" title="九、日志系统"></a>九、日志系统</h2><p>Android系统在用户空间中提供了轻量级的logger日志系统，它是在内核中实现的一种设备驱动，与用户空间的logcat工具配合使用能够方便地跟踪调试程序。在Android系统中，分别为C/C++ 和Java语言提供两种不同的logger访问接口。C/C++日志接口一般是在编写硬件抽象层模块或者编写JNI方法时使用，而Java接口一般是在应用层编写APP时使用。</p><ol><li>Android系统中的C/C++日志接口是通过宏来使用的。在system/core/include/android/log.h定义了日志的级别, 在system/core/include/cutils/log.h中，定义了对应的宏，如对应于ANDROID_LOG_VERBOSE的宏LOGV。<br>如果使用C/C++日志接口，只要定义自己的LOG_TAG宏和包含头文件system/core/include/cutils/log.h就可以了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define LOG_TAG &quot;MY LOG TAG&quot;</span><br><span class="line">#include &lt;cutils/log.h&gt;</span><br></pre></td></tr></table></figure></li></ol><p>就可以了，例如使用LOGV：<br>LOGV(“This is the log printed by LOGV in android user space.”);//ALOGI</p><ol start="2"><li>Android系统在Frameworks层中定义了Java日志接口（frameworks/base/core/java/android/util/Log.java）<br>如果使用Java日志接口，只要在类中定义的LOG_TAG常量和引用android.util.Log就可以了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private static final String LOG_TAG = &quot;MY_LOG_TAG&quot;;</span><br><span class="line">Log.i(LOG_TAG, &quot;This is the log printed by Log.i in android user space.&quot;);</span><br></pre></td></tr></table></figure></li></ol><p><strong>要查看这些LOG的输出，可以配合logcat工具</strong></p><ul><li>如果是在自己编译的Android源代码工程中使用，则在后台中运行模拟器<ul><li>~/Android$ emulator &amp;</li></ul></li><li>启动adb shell工具<ul><li>~/Android$ adb shell</li></ul></li><li>使用logcat命令查看日志<ul><li>root@android:/ # logcat</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu snap 应用</title>
      <link href="/2018/06/29/2018-06-29-snap-qt-dbus/"/>
      <url>/2018/06/29/2018-06-29-snap-qt-dbus/</url>
      <content type="html"><![CDATA[<blockquote><p>Ubuntu 从 16.04开始，支持两种格式的安装包：debian 和 snap，其中 snap 不依赖于操作系统及其发布版本， 其可以安装同样一个软件的不同版本且不造成任何的干扰。<br><br><br>snap 是一种全新的软件包管理方式，它类似一个容器拥有一个应用程序所有的文件和库，各个应用程序之间完全独立，解决了应用程序之间的依赖问题，但因其包含应用需要的文件和库，导致snap包过大，占用更多的磁盘空间（snap包包含一个私有的root文件系统，里面包含了依赖的软件包）。</p></blockquote><hr><h2 id="Snap命令简介"><a href="#Snap命令简介" class="headerlink" title="Snap命令简介"></a>Snap命令简介</h2><ul><li><p>安装Snap的相关包</p><ul><li>sudo apt update</li><li>sudo apt-get install snapd snapcraft build-essential</li></ul></li><li><p>在snap store中查找snap包</p><ul><li>snap find</li></ul></li><li><p>显示已安装的snap应用列表</p><ul><li>snap list</li></ul></li><li><p>安装一个snap包</p><ul><li>sudo snap install &lt;snap_pkg_name&gt;</li></ul></li><li><p>更新一个snap包</p><ul><li>sudo snap refresh &lt;snap_pkg_name&gt;</li></ul></li><li><p>将snap包还原到以前安装的版本</p><ul><li>sudo snap revert &lt;snap_pkg_name&gt;</li></ul></li><li><p>卸载一个snap包</p><ul><li>sudo snap remove &lt;snap_pkg_name&gt;</li></ul></li></ul><h2 id="打造Snap应用"><a href="#打造Snap应用" class="headerlink" title="打造Snap应用"></a>打造Snap应用</h2><blockquote><p>我这里配置的system dbus相关的.service和.conf文件根本在snap包中没有起到作用，debian包中是可以的，原因暂时没找到比较官方的答案。最终使用plug和slot的方式，并且是手动启动system dbus的方法才让图形程序从dbus daemon获取到数据（貌似是目前snap还不支持dbus的自动启动？？？）。</p></blockquote><ul><li><p>1、编码编写完毕后，在源码第一级目录下打开终端，执行：$snapcraft init，会自动生成snap相关文件，其中模板文件snapcraft.yaml将描述snap包的整个构建过程</p></li><li><p>2、修改模板文件snapcraft.yaml，具体见<a href="https://github.com/eightplus/system-tool" target="_blank" rel="noopener">源码</a>中的写法</p></li><li><p>3、终端执行：$snapcraft ，生成snap包</p></li><li><p>4、安装snap包：$sudo snap install system-tool_1.0.2_amd64.snap –devmode –dangerous</p></li><li><p>5、安装完成后，终端运行 $snap interfaces 可以查看到plug和slot。有资料显示，如果要让我的dbus服务程序和图形程序进行通信，还需要终端执行：$sudo snap connect system-tool:daemon-plug system-tool:daemon-slot ，对应的disconnect操作是：$sudo snap disconnect system-tool:daemon-plug system-tool:daemon-slot。此处不执行上述操作仍可以，有些不知所依然？？？可能是我这里在snap容器中关于dbus的使用方法没找到正解的原因。<br><img src="/2018/06/29/2018-06-29-snap-qt-dbus/01.png" alt=""></p></li><li><p>6、手动启动dbus服务，打开终端执行：$sudo system-tool.system-tool-daemon</p></li><li><p>7、启动图形程序：$system-tool<br><img src="/2018/06/29/2018-06-29-snap-qt-dbus/02.png" alt=""><br><em>图形程序运行结果图</em></p></li><li><p>8、如果想将自己开发的snap发布到snap商店，首先注册一个Ubuntu One帐号，<a href="https://dashboard.snapcraft.io/openid/login" target="_blank" rel="noopener">注册地址</a></p></li><li><p>9、有了帐号之后，自然是一条流水线生产操作步骤：登录-&gt;注册应用名-&gt;上传snap包-&gt;退出</p><ul><li>snapcraft login</li><li>snapcraft register system-tool  (<strong>只有第一次上传该应用时才需要注册应用名</strong>)</li><li>snapcraft push system-tool_1.0.2_amd64.snap –release beta</li><li>snapcraft logout</li></ul></li><li><p>10、上传后，你可以在邮箱等着snapcraft系统给你回邮件啦！很遗憾，由于我使用了自定义的plug和slot，自动审核失败了，需要人工审核（之前验证过没有自定义slot和plug时，上传可以自动审核成功）。<br><img src="/2018/06/29/2018-06-29-snap-qt-dbus/03.png" alt=""><br><img src="/2018/06/29/2018-06-29-snap-qt-dbus/04.png" alt=""></p></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://forum.snapcraft.io/t/the-dbus-interface/2038" target="_blank" rel="noopener">https://forum.snapcraft.io/t/the-dbus-interface/2038</a></p><p><a href="https://github.com/snapcore/snapd/wiki/Interfaces#dbus" target="_blank" rel="noopener">https://github.com/snapcore/snapd/wiki/Interfaces#dbus</a></p><p><a href="https://forum.snapcraft.io/t/how-do-i-connect-a-snap-to-dbus/1533" target="_blank" rel="noopener">https://forum.snapcraft.io/t/how-do-i-connect-a-snap-to-dbus/1533</a></p><p><a href="https://github.com/snapcore/snapd/pull/2592" target="_blank" rel="noopener">https://github.com/snapcore/snapd/pull/2592</a></p><p><a href="https://blog.csdn.net/tq08g2z/article/details/78685011" target="_blank" rel="noopener">https://blog.csdn.net/tq08g2z/article/details/78685011</a></p><p><a href="https://www.2cto.com/kf/201607/528337.html" target="_blank" rel="noopener">https://www.2cto.com/kf/201607/528337.html</a></p><p><a href="https://blog.csdn.net/ubuntutouch/article/details/51886345" target="_blank" rel="noopener">https://blog.csdn.net/ubuntutouch/article/details/51886345</a></p><p><a href="https://blog.csdn.net/ubuntutouch/article/details/51953272" target="_blank" rel="noopener">https://blog.csdn.net/ubuntutouch/article/details/51953272</a></p><p><a href="https://www.msweet.org/blog/2018-01-23-snaps-and-gui-apps.html" target="_blank" rel="noopener">https://www.msweet.org/blog/2018-01-23-snaps-and-gui-apps.html</a></p><p><a href="https://github.com/ubuntu/snappy-playpen" target="_blank" rel="noopener">https://github.com/ubuntu/snappy-playpen</a></p><p><a href="https://code.launchpad.net/~dpm/ubuntu-calendar-app/snap-all-things" target="_blank" rel="noopener">https://code.launchpad.net/~dpm/ubuntu-calendar-app/snap-all-things</a></p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Snap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Jekyll + Github搭建博客</title>
      <link href="/2018/06/27/2018-06-27-welcome-to-jekyll/"/>
      <url>/2018/06/27/2018-06-27-welcome-to-jekyll/</url>
      <content type="html"><![CDATA[<blockquote><p>一直想把自己学习linux的过程记录下来，又不想总是依托那些现成的博客网站，在WordPress和Github中，我选择了Github，原因只有一个，穷，哈哈哈。<br><br><br>这里先简要接收博客搭建的初期准备工作！<br>Markdown编辑器使用的是Atom，快捷键列表如下：</p></blockquote><table><thead><tr><th>快捷键</th><th>解释</th></tr></thead><tbody><tr><td>Crtl+Shift+M</td><td>开启Markdown实时预览</td></tr><tr><td>Command+Shift+P</td><td>打开命令窗口，可以运行各种菜单功能</td></tr><tr><td>Command + T</td><td>快速多文件切换</td></tr><tr><td>Command + F</td><td>文件内查找和替换</td></tr><tr><td>Command + Shift + F</td><td>多文件查找和替换</td></tr><tr><td>Command + [</td><td>对选中内容向左缩进</td></tr><tr><td>Command + ]</td><td>对选中内容向右缩进</td></tr><tr><td>Command + \</td><td>显示或隐藏目录树</td></tr><tr><td>Crtl + m</td><td>相应括号之间，html tag之间等跳转</td></tr><tr><td>Crtl + Alt + B</td><td>格式化代码（需要安装atom-beautify）</td></tr><tr><td>Crtl + `</td><td>调起CLI命令行界面（需要安装terminal-panel）</td></tr></tbody></table><hr><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><ul><li><p>github帐号注册和创建页面仓库</p><ul><li><p>注册地址：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p></li><li><p>仓库的名字需要和你的账号对应，格式：yourname.github.io，比如我这里演示的页面仓库名为eightplus.github.io</p></li></ul></li><li><p>生成ssh密钥，并将密钥添加到github上</p><ul><li><p>生成密钥：<code>ssh-keygen -t rsa -C</code> 注册帐号时的邮箱地址”</p></li><li><p>密钥生成后，在 ~/.ssh目录下会生成一些文件，包括id_rsa和id_rsa.pub</p></li><li><p>打开id_rsa.pub，选中所有内容复制，网页进入 <a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a> ，Add SSH key，粘贴之前复制的内容。</p></li></ul></li><li><p>Github安装和帐号配置</p><ul><li><p><code>sudo apt-get install git</code></p></li><li><p><code>git config --global user.name &quot;yourname&quot;</code></p></li><li><p><code>git config --global user.email &quot;注册帐号时的邮箱地址&quot;</code></p></li></ul></li></ul><h2 id="安装ruby环境"><a href="#安装ruby环境" class="headerlink" title="安装ruby环境"></a>安装ruby环境</h2><p><code>sudo apt-get install ruby-all-dev</code><br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/01.png" alt=""><br>我的系统为Ubuntu 16.04，使用的软件源里面存在ruby2.3-dev，则此种方式会将ruby2.3-dev一并安装，当然，上述操作也可以替换成安装ruby2.3-dev，(<code>sudo apt-get install ruby2.3-dev</code>)</p><p>安装完成后，在终端中输入<code>ruby -v</code>，查看版本信息，如下图：<br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/02.png" alt=""></p><p>完成ruby环境后，在终端中输入<code>gem -v</code>，出现如下结果，则说明ruby环境已经完全配置成功了，如果出现了报错信息，可能需要安装nodejs (sudo apt-get install nodejs)。<br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/03.png" alt=""></p><h2 id="安装JeKyll环境"><a href="#安装JeKyll环境" class="headerlink" title="安装JeKyll环境"></a>安装JeKyll环境</h2><ul><li>先安装依赖包bundler：<ul><li><code>sudo gem install bundler</code></li></ul></li><li>再安装安装jekyll：<ul><li><code>sudo gem install jekyll</code></li></ul></li><li>安装完成后，在终端中输入<code>jekyll --version</code>，出现如下结果，则说明安装成功<br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/04.png" alt=""></li></ul><h2 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h2><p><a href="#build">是否迫不及待的想看下第一个博客的具体内容 👉 </a></p><p>在你打算存放工程代码的目录下打开一个终端后使用jekyll创建一个项目，这里我的目录为：~/work/git/：<br><code>jekyll new blog</code><br>操作之后会生成很多文件/文件夹，详细说明如下：<br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/05.png" alt=""></p><ul><li>_config.yml：Jekyll配置文件，存储配置数据</li><li>_drafts：草稿目录，可手动创建</li><li>_includes：包含一些模板，可以重复利用</li><li>_layouts：存放页面模板的地方</li><li>_posts：存放文章的目录，文章格式为 mardown 格式（year-month-title.markdown）或.md，文件名确定了发表的日期和标记语言</li><li>_data：存放yaml格式的数据文件</li><li>_site：使用Jekyll编译后的静态站点将存放于这个目录下，即jekyll生成的网站会放在该文件夹下，该目录不需要push到github，可在.gitignore文件中加入这个目录</li><li>index.html：该文件带有 yaml 头信息，大概如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: post</span><br><span class="line">title:  &quot;Welcome to Jekyll!&quot;</span><br><span class="line">date:   2018-06-27 15:33:17 +0800</span><br><span class="line">categories: jekyll update</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><p>上述操作会生成个默认文章，位于_posts目录下，名字类似为：<code>2018-06-27-welcome-to-jekyll.markdown</code></p><p>可以复制2018-06-27-welcome-to-jekyll.markdown后进行修改来进行新的博客编写，这里推荐使用 <a href="https://atom.io/" target="_blank" rel="noopener">git的atom编辑器</a> 来编辑.markdown文件，可以在atom官网进行deb包的下载，新页面生成和编辑完成后，重启jekyll内置服务器（终端执行：jekyll serve），打开或刷新页面：<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，这样就可以在页面看到自己添加的博文了。<br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/06.png" alt=""><br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/07.png" alt=""></p><h2 id="Git同步"><a href="#Git同步" class="headerlink" title="Git同步"></a>Git同步</h2><p>将前面创建的仓库克隆到本地，然后将blog目录中生成的文件复制到github项目目录下，我这里项目名为 <code>eightplus.github.io</code>。</p><ul><li><code>git clone https://github.com/yourname/yourname.github.io.git</code></li><li><code>git add .</code></li><li><code>git commit -m &quot;init&quot;</code></li><li><code>git push -u origin master</code></li></ul><p>至此，在浏览器中输入<a href="https://yourname.github.io，比如：https://eightplus.github.io/，即可看到下图，博客搭建完成" target="_blank" rel="noopener">https://yourname.github.io，比如：https://eightplus.github.io/，即可看到下图，博客搭建完成</a></p><p></p><p id="build"></p><br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/08.png" alt="博客效果图"><br><em>网页浏览效果图</em><p></p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jekyll </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
