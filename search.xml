<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Hexo</title>
      <link href="/2018/07/10/2018-07-10-hexo/"/>
      <url>/2018/07/10/2018-07-10-hexo/</url>
      <content type="html"><![CDATA[<blockquote><p>hexo是一款基于Node.js的静态博客框架，可以方便的生成静态网页托管在github上。<br><br></p></blockquote><hr><h2 id="依赖包和工具安装"><a href="#依赖包和工具安装" class="headerlink" title="依赖包和工具安装"></a>依赖包和工具安装</h2><ul><li>Git<ul><li><code>sudo apt-get install git</code>  (git-core)</li><li><code>git --version</code></li><li>生成 SSH key : <code>ssh-keygen -t rsa -C &quot;349098792@qq.com&quot;</code><br><img src="img/2018/hexo/01.png" alt=""></li></ul></li></ul><blockquote><p>默认情况下连续按下三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub。如果是想一台电脑配置两个或多个github帐号，则此处不能够一直回车，要注意在提示输入文件名称时输入一个和默认名称不一样的名称，否则会发生覆盖，比如这里我电脑上使用两个github帐号，新建的一个名为yudianr，则可以给文件取名叫id_rsa_yudianr，则会在当前文件夹中生成id_rsa_yudianr和id_rsa_yudianr.pub两个文件。<br><br><br>在GitHub帐号设置那里添加SSH Key，打开公钥文件id_rsa_yudianr.pub，复制里面的所有字符粘贴到github的SSH设置处，可使用ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>来测试是否关联成功。<br><br></p></blockquote><p><img src="img/2018/hexo/02.png" alt=""><br><img src="img/2018/hexo/03.png" alt=""></p><pre><code>- 配置~/.ssh/config文件</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    #老帐号</span><br><span class="line">    Host github.com</span><br><span class="line">        HostName github.com</span><br><span class="line">        PreferredAuthentications publickey</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">    #新帐号</span><br><span class="line">    Host yudianr.github.com</span><br><span class="line">        HostName github.com</span><br><span class="line">        PreferredAuthentications publickey</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa_yudianr</span><br><span class="line"></span><br><span class="line">注意：此时提交代码后log中记录的用户名和邮箱信息都为全局配置的git帐号的信息，如果希望修改显示的信息，可以在项目目录中使用以下命令进行配置：</span><br><span class="line">git config --global user.name &quot;你的昵称&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱地址&quot;</span><br><span class="line">或者vim .gitconfig直接进行修改</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">    name = eightplus</span><br><span class="line">    email = kobe24_lixiang@126.com</span><br><span class="line">或者</span><br><span class="line">[user]</span><br><span class="line">    name = yudianr</span><br><span class="line">    email = 349098792@qq.com</span><br></pre></td></tr></table></figure><ul><li><p>npm</p><ul><li>sudo apt-get install npm</li><li>npm -v</li></ul></li><li><p>Nodejs</p><ul><li>sudo apt-get install nodejs</li><li>node -v</li></ul></li><li><p>Hexo</p><ul><li>sudo npm install -g hexo-cli</li><li>hexo -v</li></ul></li></ul><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="img/2018/hexo/04.png" alt=""></p><h2 id="自动部署发布工具-hexo-deployer-git"><a href="#自动部署发布工具-hexo-deployer-git" class="headerlink" title="自动部署发布工具 hexo-deployer-git"></a>自动部署发布工具 hexo-deployer-git</h2><ul><li><p>npm i hexo-generator-json-content –save (在上面初始化后的folder目录下打开终端执行，执行后会写入package.json文件中)</p></li><li><p>其他插件安装</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-helper-qrcode --save</span><br><span class="line">npm i hexo-generator-sitemap --save</span><br><span class="line">npm i hexo-generator-json-feed --save</span><br><span class="line">npm i hexo-generator-feed --save</span><br><span class="line">npm i hexo-generator-baidu-sitemap --save</span><br><span class="line">npm i hexo-deployer-rsync --save</span><br></pre></td></tr></table></figure><ul><li><p>提交搜素引擎</p><blockquote><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。<br><br><br>百度站长平台为未使用百度统计的站点提供三种验证方式：文件验证、html标签验证、CNAME验证，如果选择文件验证，下载文件后将文件放在source跟目录下。<br><br><br>验证完成后，我们将会认为您是网站的拥有者。为使您的网站一直保持验证通过的状态，请保留验证的文件、html标签或CNAME记录，我们会去定期检查验证记录。<br><br></p></blockquote><ul><li><p>对谷歌和百度的插举例-&gt;打开博客根目录，在这个目录下打开终端执行执行如下两个安装插件：<br><code>npm install hexo-generator-sitemap --save</code><br><code>npm install hexo-generator-baidu-sitemap --save</code></p></li><li><p>在博客根目录的_config.yml中添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br></pre></td></tr></table></figure></li><li><p>执行hexo generate编译博客后，如果博客根目录的public下生成了sitemap.xml以及baidusitemap.xml就表示成功了。</p></li></ul></li></ul><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><ul><li>hexo generate<br><img src="img/2018/hexo/05.png" alt=""></li></ul><h2 id="生成静态文件查看默认博客效果"><a href="#生成静态文件查看默认博客效果" class="headerlink" title="生成静态文件查看默认博客效果"></a>生成静态文件查看默认博客效果</h2><ul><li>hexo server  （如果默认的4000端口被占用，可以使用-p参数指定其他端口，如：hexo server -p 5000）<br><img src="img/2018/hexo/06.png" alt=""></li></ul><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><ul><li>在站点的配置文件_config.yml中设置部署信息(注意：type repo branch message前有两个空格)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/eightplus/eightplus.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: &apos;站点更新:&#123;&#123;now(&quot;YYYY-MM-DD HH:mm:ss&quot;)&#125;&#125;&apos;</span><br></pre></td></tr></table></figure></li></ul><h2 id="部署到GitHub上"><a href="#部署到GitHub上" class="headerlink" title="部署到GitHub上"></a>部署到GitHub上</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean    #清空</span><br><span class="line">hexo generate #生成静态网页</span><br><span class="line">hexo deploy   #部署</span><br><span class="line"></span><br><span class="line">浏览器中输入 http://eightplus.github.io</span><br></pre></td></tr></table></figure><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><ul><li>在hexo的工作空间下的source目录下新建一个CNAME的文件，不要后缀。打开CNAME写上购买的域名，如： <a href="eightplus.info">eightplus.info</a></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li><p>网站访问量显示</p><ul><li>使用第三方的统计插件<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a>, 在themes\yilia\layout_partial下的footer.ejs中加入如下代码即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">  本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">总访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实现单篇文章浏览统计和评论统计(从网易云跟帖中获取评论数) <a href="http://lawlite.me/2017/04/10/Hexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">参考文档</a></p><ul><li>修改themes\yilia\layout_partial文件夹下的article.ejs文件，在&lt;%- partial(‘post/title’, {class_name: ‘article-title’}) %&gt;节点下加入(注意这里网易云跟帖还没设置，而评论数中使用到了，这里运行会有问题)<figure class="highlight plain"><figcaption><span>显示阅读和评论数 --></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.wangYi)&#123; %&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;a class=&quot;cloud-tie-join-count&quot; href=&quot;javascript:void(0);&quot; style=&quot;color:gray;font-size:14px;&quot;&gt;</span><br><span class="line">&lt;span class=&quot;icon-sort&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_page_pv&quot; style=&quot;color:#ef7522;font-size:14px;&quot;&gt;</span><br><span class="line">    阅读数: &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次 &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;cloud-tie-join-count&quot; href=&quot;javascript:void(0);&quot; style=&quot;color:#ef7522;font-size:14px;&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;icon-comment&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;join-text&quot; style=&quot;color:#ef7522;font-size:14px;&quot;&gt;评论数:&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;join-count&quot;&gt;0&lt;/span&gt;次</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android 源码编译</title>
      <link href="/2018/07/03/2018-07-03-build-android/"/>
      <url>/2018/07/03/2018-07-03-build-android/</url>
      <content type="html"><![CDATA[<blockquote><p>这里使用Ubuntu 16.04的64位系统上进行Android源码的编译。<br><br></p></blockquote><hr><h2 id="依赖包和工具安装"><a href="#依赖包和工具安装" class="headerlink" title="依赖包和工具安装"></a>依赖包和工具安装</h2><ul><li><p>Git</p><ul><li>sudo apt-get install git</li></ul></li><li><p>Java SDK</p><ul><li>sudo add-apt-repository ppa:ferramroberto/java</li><li>sudo apt-get update</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu snap 应用</title>
      <link href="/2018/06/29/2018-06-29-snap-qt-dbus/"/>
      <url>/2018/06/29/2018-06-29-snap-qt-dbus/</url>
      <content type="html"><![CDATA[<blockquote><p>Ubuntu 从 16.04开始，支持两种格式的安装包：debian 和 snap，其中 snap 不依赖于操作系统及其发布版本， 其可以安装同样一个软件的不同版本且不造成任何的干扰。<br><br><br>snap 是一种全新的软件包管理方式，它类似一个容器拥有一个应用程序所有的文件和库，各个应用程序之间完全独立，解决了应用程序之间的依赖问题，但因其包含应用需要的文件和库，导致snap包过大，占用更多的磁盘空间（snap包包含一个私有的root文件系统，里面包含了依赖的软件包）。</p></blockquote><hr><h2 id="Snap命令简介"><a href="#Snap命令简介" class="headerlink" title="Snap命令简介"></a>Snap命令简介</h2><ul><li><p>安装Snap的相关包</p><ul><li>sudo apt update</li><li>sudo apt-get install snapd snapcraft build-essential</li></ul></li><li><p>在snap store中查找snap包</p><ul><li>snap find</li></ul></li><li><p>显示已安装的snap应用列表</p><ul><li>snap list</li></ul></li><li><p>安装一个snap包</p><ul><li>sudo snap install &lt;snap_pkg_name&gt;</li></ul></li><li><p>更新一个snap包</p><ul><li>sudo snap refresh &lt;snap_pkg_name&gt;</li></ul></li><li><p>将snap包还原到以前安装的版本</p><ul><li>sudo snap revert &lt;snap_pkg_name&gt;</li></ul></li><li><p>卸载一个snap包</p><ul><li>sudo snap remove &lt;snap_pkg_name&gt;</li></ul></li></ul><h2 id="打造Snap应用"><a href="#打造Snap应用" class="headerlink" title="打造Snap应用"></a>打造Snap应用</h2><blockquote><p>我这里配置的system dbus相关的.service和.conf文件根本在snap包中没有起到作用，debian包中是可以的，原因暂时没找到比较官方的答案。最终使用plug和slot的方式，并且是手动启动system dbus的方法才让图形程序从dbus daemon获取到数据（貌似是目前snap还不支持dbus的自动启动？？？）。</p></blockquote><ul><li><p>1、编码编写完毕后，在源码第一级目录下打开终端，执行：$snapcraft init，会自动生成snap相关文件，其中模板文件snapcraft.yaml将描述snap包的整个构建过程</p></li><li><p>2、修改模板文件snapcraft.yaml，具体见<a href="https://github.com/eightplus/system-tool" target="_blank" rel="noopener">源码</a>中的写法</p></li><li><p>3、终端执行：$snapcraft ，生成snap包</p></li><li><p>4、安装snap包：$sudo snap install system-tool_1.0.2_amd64.snap –devmode –dangerous</p></li><li><p>5、安装完成后，终端运行 $snap interfaces 可以查看到plug和slot。有资料显示，如果要让我的dbus服务程序和图形程序进行通信，还需要终端执行：$sudo snap connect system-tool:daemon-plug system-tool:daemon-slot ，对应的disconnect操作是：$sudo snap disconnect system-tool:daemon-plug system-tool:daemon-slot。此处不执行上述操作仍可以，有些不知所依然？？？可能是我这里在snap容器中关于dbus的使用方法没找到正解的原因。<br><img src="img/2018/snap/01.png" alt=""></p></li><li><p>6、手动启动dbus服务，打开终端执行：$sudo system-tool.system-tool-daemon</p></li><li><p>7、启动图形程序：$system-tool<br><img src="img/2018/snap/02.png" alt=""><br><em>图形程序运行结果图</em></p></li><li><p>8、如果想将自己开发的snap发布到snap商店，首先注册一个Ubuntu One帐号，<a href="https://dashboard.snapcraft.io/openid/login" target="_blank" rel="noopener">注册地址</a></p></li><li><p>9、有了帐号之后，自然是一条流水线生产操作步骤：登录-&gt;注册应用名-&gt;上传snap包-&gt;退出</p><ul><li>snapcraft login</li><li>snapcraft register system-tool  (<strong>只有第一次上传该应用时才需要注册应用名</strong>)</li><li>snapcraft push system-tool_1.0.2_amd64.snap –release beta</li><li>snapcraft logout</li></ul></li><li><p>10、上传后，你可以在邮箱等着snapcraft系统给你回邮件啦！很遗憾，由于我使用了自定义的plug和slot，自动审核失败了，需要人工审核（之前验证过没有自定义slot和plug时，上传可以自动审核成功）。<br><img src="img/2018/snap/03.png" alt=""><br><img src="img/2018/snap/04.png" alt=""></p></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://forum.snapcraft.io/t/the-dbus-interface/2038" target="_blank" rel="noopener">https://forum.snapcraft.io/t/the-dbus-interface/2038</a></p><p><a href="https://github.com/snapcore/snapd/wiki/Interfaces#dbus" target="_blank" rel="noopener">https://github.com/snapcore/snapd/wiki/Interfaces#dbus</a></p><p><a href="https://forum.snapcraft.io/t/how-do-i-connect-a-snap-to-dbus/1533" target="_blank" rel="noopener">https://forum.snapcraft.io/t/how-do-i-connect-a-snap-to-dbus/1533</a></p><p><a href="https://github.com/snapcore/snapd/pull/2592" target="_blank" rel="noopener">https://github.com/snapcore/snapd/pull/2592</a></p><p><a href="https://blog.csdn.net/tq08g2z/article/details/78685011" target="_blank" rel="noopener">https://blog.csdn.net/tq08g2z/article/details/78685011</a></p><p><a href="https://www.2cto.com/kf/201607/528337.html" target="_blank" rel="noopener">https://www.2cto.com/kf/201607/528337.html</a></p><p><a href="https://blog.csdn.net/ubuntutouch/article/details/51886345" target="_blank" rel="noopener">https://blog.csdn.net/ubuntutouch/article/details/51886345</a></p><p><a href="https://blog.csdn.net/ubuntutouch/article/details/51953272" target="_blank" rel="noopener">https://blog.csdn.net/ubuntutouch/article/details/51953272</a></p><p><a href="https://www.msweet.org/blog/2018-01-23-snaps-and-gui-apps.html" target="_blank" rel="noopener">https://www.msweet.org/blog/2018-01-23-snaps-and-gui-apps.html</a></p><p><a href="https://github.com/ubuntu/snappy-playpen" target="_blank" rel="noopener">https://github.com/ubuntu/snappy-playpen</a></p><p><a href="https://code.launchpad.net/~dpm/ubuntu-calendar-app/snap-all-things" target="_blank" rel="noopener">https://code.launchpad.net/~dpm/ubuntu-calendar-app/snap-all-things</a></p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Snap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Jekyll + Github搭建博客</title>
      <link href="/2018/06/27/2018-06-27-welcome-to-jekyll/"/>
      <url>/2018/06/27/2018-06-27-welcome-to-jekyll/</url>
      <content type="html"><![CDATA[<blockquote><p>一直想把自己学习linux的过程记录下来，又不想总是依托那些现成的博客网站，在WordPress和Github中，我选择了Github，原因只有一个，穷，哈哈哈。<br><br><br>这里先简要接收博客搭建的初期准备工作！</p></blockquote><hr><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><ul><li><p>github帐号注册和创建页面仓库</p><ul><li><p>注册地址：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p></li><li><p>仓库的名字需要和你的账号对应，格式：yourname.github.io，比如我这里演示的页面仓库名为eightplus.github.io</p></li></ul></li><li><p>生成ssh密钥，并将密钥添加到github上</p><ul><li><p>生成密钥：<code>ssh-keygen -t rsa -C</code> 注册帐号时的邮箱地址”</p></li><li><p>密钥生成后，在 ~/.ssh目录下会生成一些文件，包括id_rsa和id_rsa.pub</p></li><li><p>打开id_rsa.pub，选中所有内容复制，网页进入 <a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a> ，Add SSH key，粘贴之前复制的内容。</p></li></ul></li><li><p>Github安装和帐号配置</p><ul><li><p><code>sudo apt-get install git</code></p></li><li><p><code>git config --global user.name &quot;yourname&quot;</code></p></li><li><p><code>git config --global user.email &quot;注册帐号时的邮箱地址&quot;</code></p></li></ul></li></ul><h2 id="安装ruby环境"><a href="#安装ruby环境" class="headerlink" title="安装ruby环境"></a>安装ruby环境</h2><p><code>sudo apt-get install ruby-all-dev</code><br><img src="img/2018/jekyll/01.png" alt=""><br>我的系统为Ubuntu 16.04，使用的软件源里面存在ruby2.3-dev，则此种方式会将ruby2.3-dev一并安装，当然，上述操作也可以替换成安装ruby2.3-dev，(<code>sudo apt-get install ruby2.3-dev</code>)</p><p>安装完成后，在终端中输入<code>ruby -v</code>，查看版本信息，如下图：<br><img src="img/2018/jekyll/02.png" alt=""></p><p>完成ruby环境后，在终端中输入<code>gem -v</code>，出现如下结果，则说明ruby环境已经完全配置成功了，如果出现了报错信息，可能需要安装nodejs (sudo apt-get install nodejs)。<br><img src="img/2018/jekyll/03.png" alt=""></p><h2 id="安装JeKyll环境"><a href="#安装JeKyll环境" class="headerlink" title="安装JeKyll环境"></a>安装JeKyll环境</h2><ul><li>先安装依赖包bundler：<ul><li><code>sudo gem install bundler</code></li></ul></li><li>再安装安装jekyll：<ul><li><code>sudo gem install jekyll</code></li></ul></li><li>安装完成后，在终端中输入<code>jekyll --version</code>，出现如下结果，则说明安装成功<br><img src="img/2018/jekyll/04.png" alt=""></li></ul><h2 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h2><p><a href="#build">是否迫不及待的想看下第一个博客的具体内容 👉 </a></p><p>在你打算存放工程代码的目录下打开一个终端后使用jekyll创建一个项目，这里我的目录为：~/work/git/：<br><code>jekyll new blog</code><br>操作之后会生成很多文件/文件夹，详细说明如下：<br><img src="img/2018/jekyll/05.png" alt=""></p><ul><li>_config.yml：Jekyll配置文件，存储配置数据</li><li>_drafts：草稿目录，可手动创建</li><li>_includes：包含一些模板，可以重复利用</li><li>_layouts：存放页面模板的地方</li><li>_posts：存放文章的目录，文章格式为 mardown 格式（year-month-title.markdown）或.md，文件名确定了发表的日期和标记语言</li><li>_data：存放yaml格式的数据文件</li><li>_site：使用Jekyll编译后的静态站点将存放于这个目录下，即jekyll生成的网站会放在该文件夹下，该目录不需要push到github，可在.gitignore文件中加入这个目录</li><li>index.html：该文件带有 yaml 头信息，大概如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: post</span><br><span class="line">title:  &quot;Welcome to Jekyll!&quot;</span><br><span class="line">date:   2018-06-27 15:33:17 +0800</span><br><span class="line">categories: jekyll update</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><p>上述操作会生成个默认文章，位于_posts目录下，名字类似为：<code>2018-06-27-welcome-to-jekyll.markdown</code></p><p>可以复制2018-06-27-welcome-to-jekyll.markdown后进行修改来进行新的博客编写，这里推荐使用 <a href="https://atom.io/" target="_blank" rel="noopener">git的atom编辑器</a> 来编辑.markdown文件，可以在atom官网进行deb包的下载，新页面生成和编辑完成后，重启jekyll内置服务器（终端执行：jekyll serve），打开或刷新页面：<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，这样就可以在页面看到自己添加的博文了。<br><img src="img/2018/jekyll/06.png" alt=""><br><img src="img/2018/jekyll/07.png" alt=""></p><h2 id="Git同步"><a href="#Git同步" class="headerlink" title="Git同步"></a>Git同步</h2><p>将前面创建的仓库克隆到本地，然后将blog目录中生成的文件复制到github项目目录下，我这里项目名为 <code>eightplus.github.io</code>。</p><ul><li><code>git clone https://github.com/yourname/yourname.github.io.git</code></li><li><code>git add .</code></li><li><code>git commit -m &quot;init&quot;</code></li><li><code>git push -u origin master</code></li></ul><p>至此，在浏览器中输入<a href="https://yourname.github.io，比如：https://eightplus.github.io/，即可看到下图，博客搭建完成" target="_blank" rel="noopener">https://yourname.github.io，比如：https://eightplus.github.io/，即可看到下图，博客搭建完成</a></p><p></p><p id="build"></p><br><img src="img/2018/jekyll/08.png" alt=""><br><em>网页浏览效果图</em><p></p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jekyll </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
