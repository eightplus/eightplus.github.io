<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Qt配置文件之QSettings</title>
      <link href="/2019/11/06/2019-11-06-qsettings/"/>
      <url>/2019/11/06/2019-11-06-qsettings/</url>
      <content type="html"><![CDATA[<blockquote><p>在用Qt编程时，很多时候需要在本地保留用户的配置，方便下次启动程序的时候使用上次的配置数据，这里推荐使用QSettings读写配置文件（QSettings可重入，即可以同时在不同的线程中使用不同的QSettings对象），而不是去用数据库去记录和读取这些数据（如轻量级数据库sqlite）。</p></blockquote><hr><h2 id="示例源码"><a href="#示例源码" class="headerlink" title="示例源码"></a>示例源码</h2><ul><li><a href="https://github.com/eightplus/examples/tree/master/code/Qt/setttings/qsetting-demo" target="_blank" rel="noopener">qsetting-demo</a></li></ul><h2 id="开发库的安装"><a href="#开发库的安装" class="headerlink" title="开发库的安装"></a>开发库的安装</h2><p><code>$ sudo apt install qtbase5-dev qt5-qmake qtchooser qtscript5-dev qttools5-dev-tools qtbase5-dev-tools</code></p><h2 id="示例源码的编译安装和运行"><a href="#示例源码的编译安装和运行" class="headerlink" title="示例源码的编译安装和运行"></a>示例源码的编译安装和运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ qmake</span><br><span class="line">$ make</span><br><span class="line">$ ./qsettings-demo</span><br></pre></td></tr></table></figure><h2 id="QSettings对象的创建"><a href="#QSettings对象的创建" class="headerlink" title="QSettings对象的创建"></a>QSettings对象的创建</h2><p>  QSettings对象既可以创建在栈上，也可以创建在堆上，构建和销毁也非常快。QSettings类的构造函数的重载允许我们用各种方法来初始化QSettings对象，比如可以在当创建QSettings对象时，通过指定公司或组织名称以及产品名称，也可以通过指定文件路径和Format类型，这里我们介绍用指定文件路径和Format类型的方式构造QSettings对象。</p><pre><code>- 栈上的对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QString filename = QDir::homePath() + &quot;/.config/eightplus/qsettings-demo.ini&quot;;</span><br><span class="line">QSettings m_settings(filename, QSettings::IniFormat);</span><br><span class="line">m_settings.setIniCodec(&quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure>- 堆上的对象<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QString filename = QDir::homePath() + &quot;/.config/eightplus/qsettings-demo.ini&quot;;</span><br><span class="line">QSettings *m_settings = new QSettings(filename, QSettings::IniFormat);</span><br><span class="line">m_settings-&gt;setIniCodec(&quot;UTF-8&quot;);</span><br></pre></td></tr></table></figure>其中，枚举类型Format的定义如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">enum Format &#123;</span><br><span class="line">    NativeFormat,</span><br><span class="line">    IniFormat,</span><br><span class="line"></span><br><span class="line">    InvalidFormat = 16,</span><br><span class="line">    CustomFormat1,</span><br><span class="line">    CustomFormat2,</span><br><span class="line">    CustomFormat3,</span><br><span class="line">    CustomFormat4,</span><br><span class="line">    CustomFormat5,</span><br><span class="line">    CustomFormat6,</span><br><span class="line">    CustomFormat7,</span><br><span class="line">    CustomFormat8,</span><br><span class="line">    CustomFormat9,</span><br><span class="line">    CustomFormat10,</span><br><span class="line">    CustomFormat11,</span><br><span class="line">    CustomFormat12,</span><br><span class="line">    CustomFormat13,</span><br><span class="line">    CustomFormat14,</span><br><span class="line">    CustomFormat15,</span><br><span class="line">    CustomFormat16</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>在Linux上编程，我们介绍NativeFormat和IniFormat，对于我个人而已，我一直使用的是IniFormat。</code></pre><table><thead><tr><th>常量</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>  QSettings::NativeFormat</td><td>0</td><td>使用平台最合适的存储格式设置。在Unix中，使用的是INI格式的文本配置文件。</td></tr><tr><td>  QSettings::IniFormat</td><td>1</td><td>存储在INI文件中的设置。</td></tr></tbody></table><h2 id="QSettings存储"><a href="#QSettings存储" class="headerlink" title="QSettings存储"></a>QSettings存储</h2><p>  QSettings使用setValue()函数存储一系列设置，每个设置包括key（字符串）和一个与该key关联的value（QVariant），如：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">m_settings-&gt;beginGroup(&quot;General&quot;);</span><br><span class="line">m_settings-&gt;setValue(&quot;name&quot;, m_name);</span><br><span class="line">m_settings-&gt;setValue(&quot;male&quot;, m_male);</span><br><span class="line">m_settings-&gt;setValue(&quot;age&quot;, m_age);</span><br><span class="line">m_settings-&gt;endGroup();</span><br><span class="line">m_settings-&gt;sync();</span><br></pre></td></tr></table></figure></p><p>  sync()：如果存在相同的key，现有的值将被新值覆盖。为了提高效率，这些变化可能不会被立即保存到永久存储（可以随时调用sync()来提交更改）。</p><h2 id="QSettings读取"><a href="#QSettings读取" class="headerlink" title="QSettings读取"></a>QSettings读取</h2><p>  QSettings使用使用value()函数得到一个key的value，如：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">m_settings-&gt;beginGroup(&quot;General&quot;);</span><br><span class="line">m_name = m_settings-&gt;value(&quot;name&quot;, m_name).toString();</span><br><span class="line">if (m_name.isEmpty()) &#123;</span><br><span class="line">    m_name = &quot;lixiang&quot;;</span><br><span class="line">&#125;</span><br><span class="line">m_male = m_settings-&gt;value(&quot;male&quot;, m_male).toBool();</span><br><span class="line">m_age = m_settings-&gt;value(&quot;age&quot;, m_age).toInt();</span><br><span class="line">m_settings-&gt;endGroup();</span><br></pre></td></tr></table></figure></p><h2 id="QVariant类型"><a href="#QVariant类型" class="headerlink" title="QVariant类型"></a>QVariant类型</h2><p>  QSettings的value为QVariant类型，Qvariant是一种数据类型的集合，是Qt Core模块的一部分，它支持大部分通常的Qt数据类型转换，如：toInt()，toString(), toBool()，toPoint()，toSize()等，但它不能提供Qt GUI那一部分的Qt数据类型转换，如：QColor、QImage、 QPixmap，即QVariant中没有toColor()、toImage()、toPixmap()等接口，此时可以使用QVariant::value()或qVariantValue()模板函数，如下所示：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QColor color = m_settings-&gt;value(&quot;color&quot;).value&lt;QColor&gt;();</span><br></pre></td></tr></table></figure></p><p>  既然上面说到QVariant中没有toColor()等接口，那如果是QColor等类型，是否可以直接用setValue()去存储呢？答案是可以的，包括Qt Core和Qt GUI在类的相关类型，QVariant都支持，如下所示：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QColor color = palette().background().color();</span><br><span class="line">m_settings-&gt;setValue(&quot;color&quot;, color);</span><br></pre></td></tr></table></figure></p><p>  另外，使用qRegisterMetaType()和qRegisterMetaTypeStreamOperators()注册的自定义类型，也可以使用QSettings进行存储。</p><h2 id="ini配置文件示范"><a href="#ini配置文件示范" class="headerlink" title="ini配置文件示范"></a>ini配置文件示范</h2>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[%General]</span><br><span class="line">age=18</span><br><span class="line">male=true</span><br><span class="line">name=lixiang</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>通过boost.python将c++封装成动态库供python调用</title>
      <link href="/2019/10/22/2019-10-22-boost-python-cpp/"/>
      <url>/2019/10/22/2019-10-22-boost-python-cpp/</url>
      <content type="html"><![CDATA[<blockquote><p>这里简要介绍如何通过boost.python将c++封装动态库，让python直接调用库中的函数，要做到这一点，我们需要让so中将要在python中直接调用的函数、类、结构体等，通过boost中特定函数暴露给python，而且so的目标名必须和BOOST_PYTHON_MODULE使用的module名一致（即生成的动态库命名为封装模块的名字），这样，在python就可以直接import该模块，并像调用其他模块的函数、类、结构体等一样，直接调用里边的函数、类、结构体……</p></blockquote><hr><h2 id="示例源码"><a href="#示例源码" class="headerlink" title="示例源码"></a>示例源码</h2><ul><li><a href="https://github.com/eightplus/examples/tree/master/code/C/boost-python-cpp" target="_blank" rel="noopener">boost-python-cpp</a></li></ul><h2 id="开发库的安装"><a href="#开发库的安装" class="headerlink" title="开发库的安装"></a>开发库的安装</h2><p><code>$ sudo apt install libboost-dev libboost1.58-dev libboost-python-dev gcc g++ pkg-config python-dev build-essential</code></p><h2 id="示例源码的编译安装和运行"><a href="#示例源码的编译安装和运行" class="headerlink" title="示例源码的编译安装和运行"></a>示例源码的编译安装和运行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ make</span><br><span class="line">$ sudo make install</span><br><span class="line">$ python test.py</span><br></pre></td></tr></table></figure><h2 id="C-封装动态库"><a href="#C-封装动态库" class="headerlink" title="C++封装动态库"></a>C++封装动态库</h2><p> 如示例代码中daemon.cc中的代码所示，我们实现了一个类Daemon，该类的构造函数有一个string类型的参数，类中有两个成员函数detect_os_info和get_os_info，而且还在Deamon类之外实现了一个普通函数get_username。如下所示的BOOST_PYTHON_MODULE代码，目的是导出类及部分成员，以及普通函数，这些导出的类和函数，将可以在python中调用。<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">BOOST_PYTHON_MODULE(boost_py_cpp_module)</span><br><span class="line">&#123;</span><br><span class="line">    class_&lt;Daemon, boost::noncopyable &gt; (&quot;Daemon&quot;, &quot;This is the test daemon for python and C++&quot;, init&lt;std::string&gt;())//构造函数</span><br><span class="line">            .def(&quot;detect_os_info&quot;, &amp;Daemon::detect_os_info)//成员函数</span><br><span class="line">            .def(&quot;get_os_info&quot;, &amp;Daemon::get_os_info)//成员函数</span><br><span class="line">            ;</span><br><span class="line">    def(&quot;get_username&quot;, &amp;get_username);//普通函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="python调用C"><a href="#python调用C" class="headerlink" title="python调用C++"></a>python调用C++</h2><p>  示例中的test.py展示了python是如何调用C++中的类和函数，具体代码如下（其中 import boost_py_cpp_module就是导入C++编写的模块，该模块的名字与C++生成的库的名字一致）：</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">import os</span><br><span class="line">import sys</span><br><span class="line">import ctypes</span><br><span class="line">try:</span><br><span class="line">    libc = ctypes.CDLL(&apos;libc.so.6&apos;)</span><br><span class="line">    libc.prctl(15, &apos;ydaemon&apos;, 0, 0, 0)</span><br><span class="line">except: pass</span><br><span class="line">import boost_py_cpp_module</span><br><span class="line"></span><br><span class="line">def get_os():</span><br><span class="line">    iface = boost_py_cpp_module.Daemon(&quot;OS&quot;)</span><br><span class="line">    iface.detect_os_info()</span><br><span class="line">    data = iface.get_os_info()</span><br><span class="line">    return data</span><br><span class="line"></span><br><span class="line">def get_username():</span><br><span class="line">    try:</span><br><span class="line">        import boost_py_cpp_module</span><br><span class="line">        username = boost_py_cpp_module.get_username()</span><br><span class="line">        return username</span><br><span class="line">    except:</span><br><span class="line">        return &quot;root&quot;</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    print &quot;OS info: &quot;, get_os()</span><br><span class="line">    print &quot;User name: &quot;, get_username()</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Linux 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Boost Python C++ </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Boost 序列化</title>
      <link href="/2019/09/18/2019-09-18-boost-serialization/"/>
      <url>/2019/09/18/2019-09-18-boost-serialization/</url>
      <content type="html"><![CDATA[<blockquote><p>上一篇博客讲解过 protobuf 的序列化（将对象变成字节流的形式传出去）和反序列化（从字节流恢复成原来的对象），这篇博客将介绍另外一种序列化和反序列化的方案：Boost.Serialization。Boost.Serialization可以创建或重建程序中的等效结构，并保存为二进制数据、文本数据、XML或者有用户自定义的其他文件。</p></blockquote><hr><h2 id="示例源码"><a href="#示例源码" class="headerlink" title="示例源码"></a>示例源码</h2><ul><li><a href="https://github.com/eightplus/examples/tree/master/code/C/boost" target="_blank" rel="noopener">boost-serialization</a></li></ul><h2 id="protobuf-与-Boost-Serialization-的比较"><a href="#protobuf-与-Boost-Serialization-的比较" class="headerlink" title="protobuf 与 Boost.Serialization 的比较"></a>protobuf 与 Boost.Serialization 的比较</h2><ol><li><p>protobuf:<br>轻量级的，支持的数据类型有限，且数据对象必须预先定义，使用 protoc 编译，但其效率较高，适合要求效率，允许自定义类型的内部场合使用。</p></li><li><p>Boost.Serialization<br>Boost 库非常庞大，功能丰富，Boost.Serialization序列化只是其中的一个小分支，但就算只使用序列化，也需要安装整个Boost库，其支持的序列化功能强大，既支持二维数组（指针），也支持STL容器，序列化使用灵活简。</p></li></ol><h2 id="Boost-Serialization-的两种模式介绍"><a href="#Boost-Serialization-的两种模式介绍" class="headerlink" title="Boost.Serialization 的两种模式介绍"></a>Boost.Serialization 的两种模式介绍</h2><p>  Boost序列化可以分为两种模式：侵入式（intrusive）和非侵入式 （non-intrusive）</p><ol><li><p>侵入式（intrusive）</p><p>侵入式序列化时，需要在class里面加入序列化的代码，序列化的步骤大致如下：</p><ul><li>先引用 boost 头文件</li><li><p>在类的声明中, 编写序列化函数，该函数的格式如下:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">template&lt;class Archive&gt;</span><br><span class="line">void serialize(Archive &amp; ar, const unsigned int version)//version是版本号</span><br><span class="line">&#123;</span><br><span class="line">  ar&amp; m_str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>类的实例化和赋值</p></li><li>定义一个序列化的对象和数据流的写入(具体序列化和反序列化的代码见示例源码)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">boost::archive::text_oarchive text_oa(text_sstream);//文本方式</span><br><span class="line">boost::archive::binary_oarchive binary_oa(binary_sstream);//二进制方式</span><br><span class="line">binary_oa &lt;&lt; info;//将对象info的序列化数据以二进制存储形式写入内存</span><br></pre></td></tr></table></figure></li></ul></li><li><p>非侵入式（non-intrusive）</p><p>如果class是早已存在的，且我们不想再改变class里面的代码时，这个时候，我们可以使用非侵入式的序列化。非侵入式序列化时，序列化函数需要访问数据成员，这就要求将class的数据成员暴露出来，即public，而不是private。其序列化的步骤和上面的侵入式序列化步骤一致。</p></li></ol><h2 id="Boost-开发库的安装"><a href="#Boost-开发库的安装" class="headerlink" title="Boost 开发库的安装"></a>Boost 开发库的安装</h2><p><code>$ sudo apt install libboost-dev libboost1.58-dev libboost-serialization1.58-dev</code></p>]]></content>
      
      <categories>
          
          <category> Linux 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Boost </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>protobuf</title>
      <link href="/2019/09/11/2019-09-11-protobuf/"/>
      <url>/2019/09/11/2019-09-11-protobuf/</url>
      <content type="html"><![CDATA[<blockquote><p>Protobuf: Google Protocol Buffer，是 Google 公司内部的混合语言数据标准，用于 RPC 系统和持续数据存储系统。</p></blockquote><hr><h2 id="proto3-与-proto2-的区别"><a href="#proto3-与-proto2-的区别" class="headerlink" title="proto3 与 proto2 的区别"></a>proto3 与 proto2 的区别</h2><p>  <a href="https://developers.google.com/protocol-buffers/docs/proto3" target="_blank" rel="noopener">proto3</a> 比 <a href="https://developers.google.com/protocol-buffers/docs/proto" target="_blank" rel="noopener">proto2</a> 支持更多语言（如Go、Ruby、JavaNano等），去掉了一些复杂的语法和特性，更强调约定而弱化语法。下面列举几点 proto3 与 proto2 的不同点：</p><p>  1、proto 文件开头第一行必须指定版本：<code>syntax = &quot;proto3&quot;;</code>，而在 proto2 中，可以写成 <code>syntax = &quot;proto2&quot;;</code> 或者不写；</p><p>  2、字段规则移除了 “required”，将并把 “optional” 改名为 “singular”；</p><p>  3、“repeated” 字段默认采用 packed 编码，而在 proto2 中，需要明确使用 [packed=true] 来为字段指定比较紧凑的 packed 编码方式；</p><p>  4、移除了 default 选项，在 proto2 中，可以使用 default 选项为某一字段指定默认值，而在 proto3 中，字段的默认值只能根据字段类型由系统决定；</p><p>  5、增加了 JSON 映射特性</p><p>  ……</p><h2 id="protobuf编程"><a href="#protobuf编程" class="headerlink" title="protobuf编程"></a>protobuf编程</h2><p>  由于我的开发环境是Ubuntu 1604, 所以我这里编写示例代码将使用 proto2。protobuf是支持嵌套类型的，如下所示为 Protocol Buffers 官方文档提供的嵌套类型示例 <a href="https://developers.google.com/protocol-buffers/docs/overview" target="_blank" rel="noopener">Protocol Buffers 官方文档</a>（proto文件添加注释和C/C++一样，使用 <code>//</code> 或 <code>/* ... */</code>语法）<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">message Person &#123;</span><br><span class="line">  required string name = 1;</span><br><span class="line">  required int32 id = 2;</span><br><span class="line">  optional string email = 3;</span><br><span class="line"></span><br><span class="line">  enum PhoneType &#123;</span><br><span class="line">    MOBILE = 0;</span><br><span class="line">    HOME = 1;</span><br><span class="line">    WORK = 2;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  message PhoneNumber &#123;</span><br><span class="line">    required string number = 1;</span><br><span class="line">    optional PhoneType type = 2 [default = HOME];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  repeated PhoneNumber phone = 4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  示例代码将介绍两种语言的 protobuf 使用，C++和Python，对于C++，编译器会根据每个.proto文件生成一个.h和一个.cc文件，并为文件中描述的每种消息类型提供一个类。而对于Python则不同，Python编译器生成一个模块，其中包含每个消息类型的静态描述符，.proto然后与元类一起使用，以在运行时创建必要的Python数据访问类。</p><h3 id="C-示例"><a href="#C-示例" class="headerlink" title="C++示例"></a>C++示例</h3><p>  <a href="https://github.com/eightplus/examples/tree/master/code/C/protobuf" target="_blank" rel="noopener">源码</a></p><p>  在动手编写代码之前，我们需要先安装编译依赖，执行如下命令：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install libprotobuf-dev protobuf-compiler</span><br></pre></td></tr></table></figure></p><p>  C++ 示例代码的myinfo.proto文件的内容如下：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto2&quot;;</span><br><span class="line">package com.xiaoming.protobuf;</span><br><span class="line"></span><br><span class="line">message BufferMessage&#123;</span><br><span class="line">      required int64  id = 1;</span><br><span class="line">      required string name = 2;</span><br><span class="line">      optional int32  opt = 3;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  使用 protoc 命令根据 .proto 文件生成对应的 .pb.cc 和 .pb.h 文件，格式如下:</p><p>  <code>protoc -I=输入目录 --cpp_out=输出目录 xxx.proto</code></p><p>  比如执行<code>protoc -I=./ --cpp_out=./ myinfo.proto</code>则生成 myinfo.pb.cc 和 myinfo.pb.h。</p><p>  源码中 test_in.c 的作用是序列化，并将序列化的内容写入文件中，而 test_out.c 的作用则是反序列化，读取 test_in.c 写入文件中的内容并反序列化。</p><p>  具体编译情况见Makefile文件，编译和运行如下：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">make</span><br><span class="line">./test_in</span><br><span class="line">./test_out</span><br></pre></td></tr></table></figure></p><h3 id="Python示例"><a href="#Python示例" class="headerlink" title="Python示例"></a>Python示例</h3><p>  <a href="https://github.com/eightplus/examples/tree/master/code/Python/protobuf" target="_blank" rel="noopener">源码</a></p><p>  安装依赖，执行如下命令：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install python-protobuf</span><br></pre></td></tr></table></figure></p><p>  Python 示例代码的myinfo.proto文件的内容如下（该文件根据上面提到的 Protocol Buffers 官方文档中提供的嵌套类型示例改写而来）：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">syntax = &quot;proto2&quot;;</span><br><span class="line">package com.xiaoming.protobuf;</span><br><span class="line"></span><br><span class="line">message ClassMate&#123;</span><br><span class="line">    required string name = 1;</span><br><span class="line">    required int32 id = 2;</span><br><span class="line">    optional string email = 3;</span><br><span class="line"></span><br><span class="line">    enum PhoneType&#123;</span><br><span class="line">        MOBILE = 0;</span><br><span class="line">        HOME = 1;</span><br><span class="line">        WORK = 2;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    message PhoneNumber&#123;</span><br><span class="line">        required string number = 1;</span><br><span class="line">        required PhoneType type = 2 [default = HOME];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    repeated PhoneNumber phone = 4;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">message AlumniBook&#123;</span><br><span class="line">    repeated ClassMate mate = 1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>  使用 protoc 命令根据 .proto 文件生成对应的 .py 文件，格式如下:</p><p>  <code>protoc -I=输入目录 --python_out=输出目录 xxx.proto</code></p><p>  比如执行 <code>protoc -I=./ --python_out=./ myinfo.proto</code> 则生成 myinfo_pb2.py 文件。</p><p>  源码中 test_in.py 的作用是序列化，并将序列化的内容写入文件中，test_out.py 的作用则是反序列化，读取 test_in.py 写入文件中的内容并反序列化。</p><p>  运行命令如下：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">python test_in.py 1.log</span><br><span class="line">python test_out.py 1.log</span><br></pre></td></tr></table></figure></p>]]></content>
      
      <categories>
          
          <category> Linux 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> protobuf </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>回调函数</title>
      <link href="/2019/09/05/2019-09-05-callback/"/>
      <url>/2019/09/05/2019-09-05-callback/</url>
      <content type="html"><![CDATA[<h2 id="为什么学会写回调函数很重要？"><a href="#为什么学会写回调函数很重要？" class="headerlink" title="为什么学会写回调函数很重要？"></a>为什么学会写回调函数很重要？</h2><p>  假设有两个程序，程序A为上层应用程序，程序B为底层驱动接口，当底层驱动接口B有数据变化时需要将变化的数据传输给上层应用A时，此时有两种方式：</p><p>  1)底层驱动接口B将变化的数据存放在接口函数中，上层应用A想调用的时候自己去调用B的接口获取变化的数据，即函数调用，此时主动权在上层应用A的手中。</p><p>  2)底层驱动接口B实现回调机制，当有数据变化需要传输给上层应用A的时候通知A来读取变化的数据，然后上层应用A在用户层的回调函数中读取变化的数据。此时主动权在底层驱动接口B的手中。</p><p>  我们知道，如果使用第一种方式，那么上层应用A根本就不知道底层驱动接口B中的数据在什么时候会发生变化，即不知道什么时候应该去调用底层驱动接口B的接口函数读取变化的数据；而使用第二种方式，上层应用A读取变化的数据的操作依赖于底层驱动接口B，只有底层驱动接口B呼叫上层应用A读该读取变化的数据了，上层应用A才会去读数据，即实现了中断读取。显然，在我们封装一些底层接口给别人使用的时候，实现回调函数将会派上很大的用场。</p><h2 id="回调的定义和实现是怎样的？"><a href="#回调的定义和实现是怎样的？" class="headerlink" title="回调的定义和实现是怎样的？"></a>回调的定义和实现是怎样的？</h2><p>  回调函数是指使用者自己定义一个函数，实现这个函数的程序内容，然后把这个函数（入口地址）作为参数传入别人的函数中，由别人的函数在运行时来调用的函数。即函数是你实现的，但由别人的函数在运行时通过参数传递的方式调用，这就是所谓的回调函数。</p><p>  拿上面提到上层应用A和底层驱动接口B来打比方，也就是说回调函数是一个通过函数指针调用的函数。上层应用A把函数的指针（入口地址）作为参数传递给底层驱动接口B，当这个指针所指向的函数在底层驱动接口B中被调用时(即上层应用A不是自己调用这个函数，而是将这个函数的函数指针通过底层驱动接口B的接口函数传到底层驱动接口B中，由底层驱动接口B来操控执行)。</p><p>  wiki上的介绍是这样的回调函数<a href="https://en.wikipedia.org/wiki/Callback_(computer_programming" target="_blank" rel="noopener">Callback</a>)的：</p><p>  In computer programming, a callback, also known as a “call-after”<a href="https://stackoverflow.com/questions/824234/what-is-a-callback-function/7549753#7549753" target="_blank" rel="noopener">what-is-a-callback-function</a> function, is any executable code that is passed as an argument to other code that is expected to call back (execute) the argument at a given time. This execution may be immediate as in a synchronous callback, or it might happen at a later time as in an asynchronous callback. Programming languages support callbacks in different ways, often implementing them with subroutines, lambda expressions, blocks, or function pointers.<br>  <img src="/2019/09/05/2019-09-05-callback/01.png" alt=""></p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>  这里提供一个简单的示例 test.c，演示了四个回调函数，回调函数processFunction的参数为一个结构体，回调函数test1Function的参数为一个整形变量，回调函数test2Function和test3Function的参数都为一个字符串，但这两个回调函数的用法不一样，一个使用别名方式，一个使用指针方式。</p><p>  <strong>后续计划将Github上的callback示例进行更新，将其封装成一个so供用户程序调用。</strong></p><p>  源码：<a href="https://github.com/eightplus/examples/tree/master/code/C/my-callback" target="_blank" rel="noopener">my-callback</a></p>]]></content>
      
      <categories>
          
          <category> Linux 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> callback </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Gtk plugin 编程开发</title>
      <link href="/2019/09/01/2019-09-01-gtk-plugins/"/>
      <url>/2019/09/01/2019-09-01-gtk-plugins/</url>
      <content type="html"><![CDATA[<blockquote><p>前面介绍过GLib、GObject和Dbus-glib，这里将在这些知识的基础上，结合Gtk图形库，完成一个插件（plugin）框架的搭建。该怎么通俗易懂的介绍这里的插件呢，左思右想，还是决定以GStreamer为例来简单介绍下插件（GStreamer是一个创建流媒体应用程序的框架，这家伙对于Linux下的音/视频播放、摄像头等方面有着很重要的地位和作用，如 GNOME 桌面的默认播放器rhythmbox，cheese摄像头等软件都是用的GStreamer。我本人啊，对这个东西真的是特别感兴趣，可惜目前业余时间恐怕难以深入分析，遗憾:cold_sweat:）。</p></blockquote><blockquote><p>GStreamer 插件的工作原理同其他的基于插件的程序的工作原理类似，本质上都是通过读取动态库实现的，只需要每个动态库都实现某一个特定的接口就可以了，里面会有个像注册表一样的数据结构会存储所有的插件的信息。GStreamer 框架基于插件，有些插件中提供了各种各样的多媒体数字信号编解码器,也有些提供了其他的功能，所有的插件都能够被链接到任意的已经定义了的数据流管道中。元件是 GStreamer的核心，在 GStreamer 插件的开发中，一个元件就是继承于 GstElement 的一个对象，元件在与其他元件连接时提供了如下一些功能，比如：一个源元件为一个流提供数据，一个滤镜元件对流中的数据进行操作，也就是说没有了元件，GStreamer只是一堆概念性的管道，没有任何东西可供连接 。GStreamer 自带了一大堆元件，但我们也可以编写额外的元件，但仅仅编写新的元件并不够，为了使 GStreamer 能够使用它，就需要将元件封装到插件中。一个插件是一块可以加载的代码，通常被称为共享对象文件（shared object file）或动态链接库（dynamically linked library）。</p></blockquote><blockquote><p>说到这里，想必大家在概念上对插件有了初步认识。在编程方面，说到底就是插件可以让其他开发者在你的程序框架下开发更多的功能模块，而他们并不需要修改你的主程序，甚至不用怎么花心思去分析你的主程序。这样，你只需要编写一个框架，并提供一个插件示例，别人就能按照你的插件示例来编写其他插件，帮你的框架程序添砖加瓦，想想都轻松啊:laughing::laughing::laughing:</p></blockquote><hr><h2 id="示例源码"><a href="#示例源码" class="headerlink" title="示例源码"></a>示例源码</h2><ul><li><a href="https://github.com/eightplus/examples/tree/master/code/C/my-plugin-daemon" target="_blank" rel="noopener">my-plugin-daemon</a></li></ul><h2 id="示例代码编程要点简析"><a href="#示例代码编程要点简析" class="headerlink" title="示例代码编程要点简析"></a>示例代码编程要点简析</h2><h3 id="编译相关介绍"><a href="#编译相关介绍" class="headerlink" title="编译相关介绍"></a>编译相关介绍</h3><ul><li><p>安装编译依赖</p><p><code>$ sudo apt install autotools-dev intltool libpolkit-agent-1-dev libpolkit-gobject-1-dev libdbus-glib-1-dev libdconf-dev libglib2.0-dev libgtk-3-dev mate-common</code></p></li><li><p>编译和运行</p><p>这里不是直接使用automake，而是使用mate-common提供的mate-autogen，比较方便，具体见 autogen.sh 文件，编译和运行命令如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ ./autogen.sh  --prefix=/usr</span><br><span class="line">$ make</span><br><span class="line">$ ./src/my-plugin-daemon --debug</span><br></pre></td></tr></table></figure></li><li><p>deb包</p><p>具体见源码目录下debian文件夹里面的内容，这里不做过多描述，有问题的话，可以向我发邮件寻求帮助。deb包的指针可以使用命令 <code>debuild</code> 或者 <code>dpkg-buildpackage -rfakerooot -b</code>，相关命令执行如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ debuild</span><br><span class="line">$ sudo dpkg -i ../my-plugin-daemon_1.0.0_amd64.deb</span><br><span class="line">$ /usr/bin/my-plugin-daemon</span><br></pre></td></tr></table></figure></li><li><p>查看包安装的文件列表</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ dpkg -L my-plugin-daemon</span><br><span class="line">/.</span><br><span class="line">/usr</span><br><span class="line">/usr/share</span><br><span class="line">/usr/share/doc</span><br><span class="line">/usr/share/doc/my-plugin-daemon</span><br><span class="line">/usr/share/doc/my-plugin-daemon/changelog.gz</span><br><span class="line">/usr/share/glib-2.0</span><br><span class="line">/usr/share/glib-2.0/schemas</span><br><span class="line">/usr/share/glib-2.0/schemas/org.freedesktop.MyPluginDaemon.plugins.diskmonitor.gschema.xml</span><br><span class="line">/usr/include</span><br><span class="line">/usr/include/my-plugin-daemon</span><br><span class="line">/usr/include/my-plugin-daemon/my_daemon_client.h</span><br><span class="line">/usr/include/my-plugin-daemon/my_plugin.h</span><br><span class="line">/usr/bin</span><br><span class="line">/usr/bin/my-plugin-daemon</span><br><span class="line">/usr/lib</span><br><span class="line">/usr/lib/x86_64-linux-gnu</span><br><span class="line">/usr/lib/x86_64-linux-gnu/my-plugin-daemon</span><br><span class="line">/usr/lib/x86_64-linux-gnu/my-plugin-daemon/libdiskmonitor.so</span><br><span class="line">/usr/lib/x86_64-linux-gnu/my-plugin-daemon/diskmonitor.my-plugin</span><br></pre></td></tr></table></figure></li></ul><h3 id="主框架的搭建"><a href="#主框架的搭建" class="headerlink" title="主框架的搭建"></a>主框架的搭建</h3><p>  相关代码见源码目录下src，文件列表如下：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">main.c</span><br><span class="line">Makefile.am</span><br><span class="line">my_daemon.c</span><br><span class="line">my_daemon.h</span><br><span class="line">my_module.c</span><br><span class="line">my_module.h</span><br><span class="line">my_plugin.c</span><br><span class="line">my_plugin.h</span><br><span class="line">my_plugin_info.c</span><br><span class="line">my_plugin_info.h</span><br><span class="line">org.freedesktop.myplugindaemon.xml</span><br></pre></td></tr></table></figure></p><ul><li><p>dbus server</p><p>在org.freedesktop.myplugindaemon.xml文件中，写了两个method和两个signal，start和stop分别表示启动插件加载和停止插件功能。PluginActivated和PluginDeactivated分别发送插件激活和停止的消息。这里注意下<code>&lt;annotation name=&quot;org.freedesktop.DBus.GLib.CSymbol&quot; value=&quot;my_daemon&quot;/&gt;</code>的value值，这个值表示通过工具dbus-binding-tool生成的绑定文件中callback相关的dbus_glib_marshal_xxx_BOOLEAN__POINTER中的xxx即为这个value值，不要将其和method的前缀混淆了，method的前缀是由dbus-binding-tool工具执行时”–prefix”参数指定的，生成的绑定文件中和前缀相关的代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">static const DBusGMethodInfo dbus_glib_my_daemon_methods[] = &#123;</span><br><span class="line">&#123; (GCallback) my_daemon_start, dbus_glib_marshal_my_daemon_BOOLEAN__POINTER, 0 &#125;,</span><br><span class="line">&#123; (GCallback) my_daemon_stop, dbus_glib_marshal_my_daemon_BOOLEAN__POINTER, 40 &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这里定义了一个存放私有变量的结构体，需要定义一个配合这个结构体的宏MY_DAEMON_GET_PRIVATE(o) ，而且在类结构的构造函数中增加一句<code>g_type_class_add_private(klass, sizeof(MyDaemonPrivate));</code>，结构体变量如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct MyDaemonPrivate</span><br><span class="line">&#123;</span><br><span class="line">    DBusGConnection *connection;</span><br><span class="line">    GSList *plugins;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p>plugins manager</p><ol><li><p>加载插件</p><p>从存放插件so的路径下读取so，读取插件对应的配置信息文件，绑定插件的信号，并将插件变量保存到上面提到的存放私有变量的结构体MyDaemonPrivate中的plugins中，方便对插件进行管理。</p></li><li><p>卸载插件</p><p>一是调用插件的停止工作模块，二是清空存放私有变量的结构体MyDaemonPrivate中plugins中的插件变量。</p></li></ol></li></ul><h3 id="编写插件"><a href="#编写插件" class="headerlink" title="编写插件"></a>编写插件</h3><p>  这里就不对代码进行分析了，只简述下几个注意事项，相关代码见源码目录下src，文件列表如下：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">diskmonitor.my-plugin.in</span><br><span class="line">my_diskmonitor_dialog.c</span><br><span class="line">my_diskmonitor_plugin.c</span><br><span class="line">my_diskmonitor_space.c</span><br><span class="line">Makefile.am</span><br><span class="line">my_diskmonitor_dialog.h</span><br><span class="line">my_diskmonitor_plugin.h</span><br><span class="line">my_diskmonitor_space.h</span><br></pre></td></tr></table></figure></p><p>  这里的设想是这样的，建立了一个plugins目录，里面存放各个插件的代码，每一个插件都作为一个子目录存在。所以，在plugins目录下需要编写Makefile.am文件，方便在源码编译时管理旗下各个插件子目录。同样，子目录里面的插件要编译，也需要各自写一饿Makefile.am。当然，写了Makefile.am，就要对应的编写其输出的Makefile的规则，否则编不出Makefile文件，拿什么来make呢，是吧。我们在configure.ac文件的 AC_OUTPUT 下增加plugins/Makefile和plugins/diskmonitor/Makefile，其中diskmonitor就是我示例代码的一个插件。configure.ac文件中AC_OUTPUT的具体详情如下所示：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">AC_OUTPUT([</span><br><span class="line">Makefile</span><br><span class="line">src/Makefile</span><br><span class="line">plugins/Makefile</span><br><span class="line">plugins/diskmonitor/Makefile</span><br><span class="line">po/Makefile.in</span><br><span class="line">])</span><br></pre></td></tr></table></figure></p><p>  在编译插件so的时候，终端会显示出一个警告，大致如下：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg-shlibdeps: 警告: debian/my-plugin-daemon/usr/lib/x86_64-linux-gnu/my-plugin-daemon/libdiskmonitor.so contains an unresolvable reference to symbol my_plugin_get_type: it&apos;s probably a plugin</span><br></pre></td></tr></table></figure></p><p>  出现了这种情况的时候，我们不必担心插件除了什么问题，这仅仅是dpkg shlibdeps分析二进制使用符号集时的一个警告，具体详情可以查阅 <a href="http://man7.org/linux/man-pages/man1/dpkg-shlibdeps.1.html" target="_blank" rel="noopener">dpkg-shlibdeps</a>。</p><p>  在data目录下，我对插件diskmonitor增加了一个org.freedesktop.MyPluginDaemon.plugins.diskmonitor.gschema.xml.in文件，该文件是schemas配置文件，该文件在安装deb包后存放的最终路径为：/usr/share/glib-2.0/schemas/org.freedesktop.MyPluginDaemon.plugins.diskmonitor.gschema.xml，里面我只放了一个参数active，默认为true，意思是插件diskmonitor默认处于激活状态，插件管理模块在加载插件的时候将会读取这个值，用户可以随时更改该值，已达到控制该插件启用和停止的目地。修改schemas配置文件的值时，除了可以用gsettings api提供的函数，如g_settings_get_string、g_settings_set_string外，还可以使用gsettings命令，具体参照 <a href="https://www.freedesktop.org/software/gstreamer-sdk/data/docs/latest/gio/gsettings-tool.html" target="_blank" rel="noopener">gsettings</a>，当然还有更简单方便的办法，用图形工具 dconf-editor 来操作，如下所示：<br>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ dconf-editor</span><br></pre></td></tr></table></figure></p><p>  <img src="/2019/09/01/2019-09-01-gtk-plugins/01.png" alt=""></p><p>  最后再提一个plugin最重要的点，在插件管理模块中的四个文件my_plugin.c、my_plugin.h、my_module.c和my_module.h非常关键，这四个文件关系着插件真在的加载、卸载和导入。</p><pre><code>1. my_plugin.h文件下有一个宏MY_PLUGIN_REGISTER，具体如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#define MY_PLUGIN_REGISTER(PluginName, plugin_name)                 \</span><br><span class="line">      G_DEFINE_DYNAMIC_TYPE (PluginName,                                     \</span><br><span class="line">                             plugin_name,                                    \</span><br><span class="line">                             MY_TYPE_PLUGIN)                      \</span><br><span class="line">                                                                             \</span><br><span class="line">G_MODULE_EXPORT GType                                                          \</span><br><span class="line">register_my_plugin(GTypeModule *type_module)                       \</span><br><span class="line">&#123;                                                                              \</span><br><span class="line">    plugin_name##_register_type(type_module);                             \</span><br><span class="line">                                                                           \</span><br><span class="line">    return plugin_name##_get_type();                                       \</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>2. my_module.c下有真在执行插件加载和卸载的两个函数<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">static gboolean my_module_load(GTypeModule *gmodule)</span><br><span class="line">&#123;</span><br><span class="line">    MyModule *module;</span><br><span class="line">    MyModuleRegisterFunc register_func;</span><br><span class="line">    gboolean res;</span><br><span class="line"></span><br><span class="line">    module = MY_MODULE(gmodule);</span><br><span class="line"></span><br><span class="line">    g_debug(&quot;Loading %s&quot;, module-&gt;path);</span><br><span class="line"></span><br><span class="line">    module-&gt;library = g_module_open(module-&gt;path, 0);</span><br><span class="line"></span><br><span class="line">    if (module-&gt;library == NULL) &#123;</span><br><span class="line">        g_warning (&quot;%s&quot;, g_module_error());</span><br><span class="line">        return FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /* extract symbols from the lib */</span><br><span class="line">    res = g_module_symbol(module-&gt;library, &quot;register_my_plugin&quot;, (void *)&amp;register_func);</span><br><span class="line">    if (!res) &#123;</span><br><span class="line">        g_warning(&quot;%s&quot;, g_module_error());</span><br><span class="line">        g_module_close(module-&gt;library);</span><br><span class="line"></span><br><span class="line">        return FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    g_assert(register_func);</span><br><span class="line"></span><br><span class="line">    module-&gt;type = register_func(gmodule);</span><br><span class="line"></span><br><span class="line">    if (module-&gt;type == 0) &#123;</span><br><span class="line">        g_warning(&quot;Invalid my plugin in module %s&quot;, module-&gt;path);</span><br><span class="line">        return FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void my_module_unload (GTypeModule *gmodule)</span><br><span class="line">&#123;</span><br><span class="line">    MyModule *module = MY_MODULE(gmodule);</span><br><span class="line"></span><br><span class="line">    g_debug(&quot;Unloading %s&quot;, module-&gt;path);</span><br><span class="line"></span><br><span class="line">    g_module_close(module-&gt;library);</span><br><span class="line"></span><br><span class="line">    module-&gt;library = NULL;</span><br><span class="line">    module-&gt;type = 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>3. 在每个插件的代码中都需要将my_plugin.h头文件include进来，且需要编写上面提到的插件宏MY_PLUGIN_REGISTER相关的register_my_plugin代码，如下所示：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">G_MODULE_EXPORT GType register_my_plugin(GTypeModule *module);</span><br></pre></td></tr></table></figure></code></pre>]]></content>
      
      <categories>
          
          <category> Linux 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Gtk GLib GObject </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>GObject 编程入门</title>
      <link href="/2019/08/30/2019-08-30-gobject-demo/"/>
      <url>/2019/08/30/2019-08-30-gobject-demo/</url>
      <content type="html"><![CDATA[<blockquote><p>Gobject，也称Glib对象系统，是一个程序库，它可以帮助我们使用C语言编写面向对象程序，其提供了一个通用的动态类型系统（GType）、一个基本类型的实现集（如整型、枚举等）、一个基本对象类型Gobject、一个信号系统以及一个可扩展的参数/变量体系。在 GObject世界里，类是两个结构体的组合，一个是实例结构体，另一个是类结构体。GOBJECT的继承需要实现实例结构体的继承和类结构体的继承，Gobject对象的初始化可分为两个部分：类结构体初始化和实例结构体初始化。类结构体初始化函数只被调用一次，而实例结构体的初始化函数的调用次数等于对象实例化的次数。这意味着，所有对象共享的数据，可保存在类结构体中，而所有对象私有的数据，则保存在实例结构体中。</p></blockquote><hr><h2 id="示例源码"><a href="#示例源码" class="headerlink" title="示例源码"></a>示例源码</h2><ul><li><a href="https://github.com/eightplus/examples/tree/master/code/C/gobjectdemo" target="_blank" rel="noopener">gobjectdemo</a></li></ul><h2 id="GObject编程要点简析"><a href="#GObject编程要点简析" class="headerlink" title="GObject编程要点简析"></a>GObject编程要点简析</h2><ul><li><p>宏</p><p>如果你浏览过使用 gobject 编写的软件源代码，你对下面出现的宏一定不会陌生。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">#define MY_TYPE_DEMO (my_demo_get_type())</span><br><span class="line">#define MY_DEMO(object) G_TYPE_CHECK_INSTANCE_CAST((object), MY_TYPE_DEMO, MyDemo)</span><br><span class="line">#define MY_DEMO_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST((klass), MY_TYPE_DEMO, MyDemoClass))</span><br><span class="line">#define MY_IS_DEMO(object) G_TYPE_CHECK_INSTANCE_TYPE((object), MY_TYPE_DEMO))</span><br><span class="line">#define MY_IS_DEMO_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE((klass), MY_TYPE_DEMO))</span><br><span class="line">#define MY_DEMO_GET_CLASS(object) (G_TYPE_INSTANCE_GET_CLASS((object), MY_TYPE_DEMO, MyDemoClass))</span><br><span class="line"></span><br><span class="line">GType my_demo_get_type(void) G_GNUC_CONST;</span><br><span class="line">G_DEFINE_TYPE (MyDemo, my_demo, G_TYPE_OBJECT);</span><br></pre></td></tr></table></figure><p>这里对上面的宏不作过多阐述，简要介绍下 MY_DEMO 和 G_DEFINE_TYPE。</p><p>MY_DEMO(object)宏的作用是将一个基类指针类型转换为 MyDemo 类的指针类型，它需要 GObject 子类的设计者提供。</p><p>my_demo_get_type将会使用宏G_DEFINE_TYPE去实现，其中的my通常表示命名空间，demo表示对象名字，get_type为固定字段(这里提到的my和demo字段都是我的示例代码使用的，你可以自定义)。G_DEFINE_TYPE 可以让 GObject 库的数据类型系统能够识别我们所定义的 MyDemo 类类型，它接受三个参数，第一个参数是类名，即 MyDemo，第二个参数则是类的成员函数名称的前缀，例如 my_demo_get_type 函数即为 MyDemo 类的一个成员函数，”my_demo”是它的前缀，第三个参数则指明 MyDemo 类类型的父类型为G_TYPE_OBJECT。G_DEFINE_TYPE中会调用一个 g_type_register_static_simple 的函数，这个函数的作用就是将用户自己定义的类型注册到系统中，G_DEFINE_TYPE还定义了2个函数（my_demo_init 和 my_demo_class_init），需要自己实现这两个函数，这两个函数是对象的初始化函数，相当于c++的构造函数，其中第一个函数在每个对象创建的时候都会被调用，第二个函数只有在第一次创建对象的时候被调用(比如在调用g_type_class_ref的时候，如果class没有初始化，就会调用my_demo_class_init)。当然这里也可以直接使用，而是使用的实现代码，见示例代码中被注释的那一大段代码。在gobject的手册中也有相关代码的示例，如下所示（<a href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE:CAPS" target="_blank" rel="noopener">G-DEFINE-TYPE</a>）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">static void     gtk_gadget_init       (GtkGadget      *self);</span><br><span class="line">static void     gtk_gadget_class_init (GtkGadgetClass *klass);</span><br><span class="line">static gpointer gtk_gadget_parent_class = NULL;</span><br><span class="line">static void     gtk_gadget_class_intern_init (gpointer klass)</span><br><span class="line">&#123;</span><br><span class="line">  gtk_gadget_parent_class = g_type_class_peek_parent (klass);</span><br><span class="line">  gtk_gadget_class_init ((GtkGadgetClass*) klass);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GType</span><br><span class="line">gtk_gadget_get_type (void)</span><br><span class="line">&#123;</span><br><span class="line">  static volatile gsize g_define_type_id__volatile = 0;</span><br><span class="line">  if (g_once_init_enter (&amp;g_define_type_id__volatile))</span><br><span class="line">    &#123;</span><br><span class="line">      GType g_define_type_id =</span><br><span class="line">        g_type_register_static_simple (GTK_TYPE_WIDGET,</span><br><span class="line">                                       g_intern_static_string (&quot;GtkGadget&quot;),</span><br><span class="line">                                       sizeof (GtkGadgetClass),</span><br><span class="line">                                       (GClassInitFunc) gtk_gadget_class_intern_init,</span><br><span class="line">                                       sizeof (GtkGadget),</span><br><span class="line">                                       (GInstanceInitFunc) gtk_gadget_init,</span><br><span class="line">                                       0);</span><br><span class="line">      &#123;</span><br><span class="line">        const GInterfaceInfo g_implement_interface_info = &#123;</span><br><span class="line">          (GInterfaceInitFunc) gtk_gadget_gizmo_init</span><br><span class="line">        &#125;;</span><br><span class="line">        g_type_add_interface_static (g_define_type_id, TYPE_GIZMO, &amp;g_implement_interface_info);</span><br><span class="line">      &#125;</span><br><span class="line">      g_once_init_leave (&amp;g_define_type_id__volatile, g_define_type_id);</span><br><span class="line">    &#125;</span><br><span class="line">  return g_define_type_id__volatile;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>对象实例化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gpointer</span><br><span class="line">g_object_new (GType object_type,</span><br><span class="line">              const gchar *first_property_name,</span><br><span class="line">              ...);</span><br></pre></td></tr></table></figure><p>g_object_new进行对象的实例化，这个函数是个可变参数的函数, 第一个参数为一个宏，是需要创建的对象的类型，当使用 g_object_new 来创建对象的时候, 这个参数是必须的，而且这个函数所创建的对象必须是GObject的子对象，在我们定义自己的对象时, 必须要在glib系统中注册自己的类型。后面的参数都是 “属性名-属性值” 的配对，即从第二个参数开始, 表示的是 object 的属性, 它们都是成对出现的，如果没有属性需要在创建对象的时候设置, 则第二个参数设置成 NULL（<code>g_object_new(MY_TYPE_DEMO, NULL)</code>），如果有属性要设置, 那么最后一个参数也要设置成 NULL（<code>g_object_new(MY_TYPE_DEMO, &quot;name&quot;, &quot;kobe&quot;, &quot;age&quot;, 24, NULL)</code>）。</p></li><li><p>属性<br>如果想 让g_object_new 函数中通过 “属性名-属性值” 结构为 Gobject 子类对象的属性进行初始化，需要完成以下工作：</p><ul><li>实现xx_xx_set_property与xx_xx_get_property函数，如示例代码中的my_demo_set_property和my_demo_get_property，完成 g_object_new 函数 “属性名-属性值” 结构向Gobject子类属性的映射；</li><li>在Gobject子类的类结构体初始化函数中，让Gobject基类的两个函数指针set_property与get_property分别指向xx_xx_set_property与xx_xx_get_property,如示例代码中的object_class-&gt;set_property = my_demo_set_property和object_class-&gt;get_property = my_demo_get_property;</li><li><p>在Gobject子类的类结构体初始化函数中，为Gobject子类安装具体对象的私有属性，g_object_class_install_property 函数用于将 GParamSpec 类型变量所包含的数据插入到 GObject 子类中，该函数的第一个参数为 GObject 子类的类结构体，第二个参数是 GParamSpec 对应的属性 ID，GObject 子类的属性 ID 是 GObject 子类设计者定义的宏或枚举类型，不能为0，所以在使用枚举类型来定义 ID 时，为了避免 0 的使用，一般设计如下所示的一个枚举类型，其中PROP_0为0,不使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">enum</span><br><span class="line">&#123;</span><br><span class="line">    PROP_0,</span><br><span class="line">    PROP_NAME,</span><br><span class="line">    PROP_AGE,</span><br><span class="line">    N_PROPERTIES</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>g_object_class_install_property的第三个参数是要安装值向 GObject 子类中的 GParamSpec 类型的变量指针，示例代码中的如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">g_object_class_install_property(object_class,</span><br><span class="line">                            PROP_NAME,</span><br><span class="line">                            g_param_spec_string(&quot;name&quot;,</span><br><span class="line">                                              &quot;name&quot;,</span><br><span class="line">                                              &quot;Specify the name of demo&quot;,</span><br><span class="line">                                              &quot;Unknown&quot;,</span><br><span class="line">                                              G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));</span><br><span class="line"></span><br><span class="line">g_object_class_install_property(object_class,</span><br><span class="line">                                PROP_AGE,</span><br><span class="line">                                g_param_spec_int64 (&quot;age&quot;,</span><br><span class="line">                                                 &quot;age&quot;,</span><br><span class="line">                                                 &quot;Specify age number&quot;,</span><br><span class="line">                                                 G_MININT64, G_MAXINT64, 0,</span><br><span class="line">                                                 G_PARAM_WRITABLE | G_PARAM_CONSTRUCT_ONLY));</span><br></pre></td></tr></table></figure><p>其中获取和设置属性的具体实现代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">static void my_demo_set_property(GObject *object, guint prop_id, const GValue *value, GParamSpec *pspec)</span><br><span class="line">&#123;</span><br><span class="line">    MyDemo *self;</span><br><span class="line"></span><br><span class="line">    g_return_if_fail(object != NULL);</span><br><span class="line"></span><br><span class="line">    self = MY_DEMO (object);</span><br><span class="line">    //self-&gt;priv = MY_DEMO_GET_PRIVATE(self);</span><br><span class="line"></span><br><span class="line">    switch (prop_id)</span><br><span class="line">    &#123;</span><br><span class="line">    case PROP_NAME:</span><br><span class="line">        self-&gt;priv-&gt;name = g_value_dup_string(value);</span><br><span class="line">        break;</span><br><span class="line">    case PROP_AGE:</span><br><span class="line">        self-&gt;priv-&gt;age = g_value_get_int64(value);</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void my_demo_get_property(GObject *object, guint prop_id, GValue *value, GParamSpec *pspec)</span><br><span class="line">&#123;</span><br><span class="line">    MyDemo *self;</span><br><span class="line"></span><br><span class="line">    g_return_if_fail(object != NULL);</span><br><span class="line"></span><br><span class="line">    self = MY_DEMO(object);</span><br><span class="line"></span><br><span class="line">    switch (prop_id)</span><br><span class="line">    &#123;</span><br><span class="line">    case PROP_NAME:</span><br><span class="line">        g_value_set_string(value, self-&gt;priv-&gt;name);</span><br><span class="line">        break;</span><br><span class="line">    case PROP_AGE:</span><br><span class="line">        g_value_set_int64(value, self-&gt;priv-&gt;age);</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        G_OBJECT_WARN_INVALID_PROPERTY_ID(object, prop_id, pspec);</span><br><span class="line">        break;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，我们也可以通过g_object_get_property 和 g_object_set_property 获取和设置属性，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GValue val = &#123;0&#125;;       </span><br><span class="line">g_value_init(val, G_TYPE_POINTER);</span><br><span class="line">g_object_get_property(G_OBJECT(demo), &quot;name&quot;, val);</span><br><span class="line">g_object_set_property(G_OBJECT(demo), &quot;name&quot;, val);</span><br><span class="line">g_value_unset(val);</span><br></pre></td></tr></table></figure></li></ul></li><li><p>信号</p><p>使用 GObject 信号机制，一般有三个步骤：</p><ul><li><p>信号注册 <a href="https://developer.gnome.org/gobject/stable/gobject-Signals.html#g-signal-new" target="_blank" rel="noopener">g_signal_new</a>，主要解决信号与数据类型的关联问题</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">int signal_id = g_signal_new(&quot;broadcast_msg&quot;,</span><br><span class="line">        my_demo_get_type(),/*G_OBJECT_CLASS_TYPE(kclass)*/</span><br><span class="line">        G_SIGNAL_RUN_LAST,</span><br><span class="line">        0,</span><br><span class="line">        NULL,</span><br><span class="line">        NULL,</span><br><span class="line">        g_cclosure_marshal_VOID__STRING,</span><br><span class="line">        G_TYPE_NONE,/*返回值，因为信号没有返回，所以为NONE*/</span><br><span class="line">        1,/*参数数目*/</span><br><span class="line">        G_TYPE_STRING/*参数类型*/</span><br><span class="line">    );</span><br></pre></td></tr></table></figure></li><li><p>信号连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">void handler_receive_msg(GObject *sender, char *name, gpointer data)</span><br><span class="line">&#123;</span><br><span class="line">    MyDemo *demo = G_TYPE_CHECK_INSTANCE_CAST(sender, my_demo_get_type(), MyDemo);</span><br><span class="line">    printf(&quot;handler: [%s] from [%s: %ld]\n&quot;, name, demo-&gt;priv-&gt;name, demo-&gt;priv-&gt;age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_signal_connect(demos[i], &quot;broadcast_msg&quot;, G_CALLBACK(handler_receive_msg), NULL);</span><br></pre></td></tr></table></figure></li><li><p>信号发射</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">g_signal_emit_by_name(demos[i], &quot;broadcast_msg&quot;, &quot;lixiang&quot;);</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> Linux 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Glib GObject </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Dbus-glib</title>
      <link href="/2019/08/27/2019-08-27-dbus-glib/"/>
      <url>/2019/08/27/2019-08-27-dbus-glib/</url>
      <content type="html"><![CDATA[<blockquote><p>如果你想在Linux系统下开发软件，且需要用到进程间通信时，我强烈建议你了解和使用Dbus。Dbus是实质上一个适用于桌面应用的进程间的通讯机制，即所谓的IPC机制。Dbus是一个进程间的通信机制，可以是应用与应用之间的通信，也可以是应用与系统之间的通信，其提供了一个低时延、低消耗的IPC通讯，因为它采用了二进制的数据交换协议，不需要转换成文本化的数据进行交换，DBUS提供了面向多重对象系统的包装，可以在原有的面向对象的应用框架下使用DBUS，不需要学习新的概念和规范等。DBUS_BUS_SYSTEM（system Dbus）用于系统通讯、监控系统更新事件，DBUS_BUS_SESSION （session Dbus）用于多个桌面应用之间相互通讯。</p></blockquote><blockquote><p>Dbus-glib是GNU标准库，在Dbus接口上封装，方便上层服务与应用更好的使用。其形如一个Dbus代理服务器，由它进行所有Dbus消息的遍历与转发，服务端与消息发送端只需要向dbus deamon申请注册唯一的dbus name 、绑定GOBJECT后，dbus deamon就会将申请连到到该dbus name的Dbus信息转发给指定应用。dbus daemon不对消息重新排序，如果发送了两条消息到同一个进程，它们将按照发送顺序接受到。接受进程并需要按照顺序发出应答消息，例如在多线程中处理这些消息，应答消息的发出是没有顺序的。消息都有一个序列号可以与应答消息进行配对。</p></blockquote><hr><p>glib绑定接口在libdbus-glib-1-dev中定义，详情见：/usr/include/dbus-1.0/dbus/dbus-glib.h，dbus的接口描述文件统一采用utf-8编码。</p><pre><code>表一 dbus和glib的数据类型映射表</code></pre><table><thead><tr><th>D-Bus type</th><th>Description</th><th>GType</th><th>C typedef</th><th>Free function</th><th>Notes</th></tr></thead><tbody><tr><td>a （ARRAY）</td><td>数组</td><td></td><td></td><td></td><td>数组元素的类型由a后面的标记决定。如：”as”是字符串数组，具体见表二表三</td></tr><tr><td>b （BOOLEAN）</td><td>布尔值</td><td>G_TYPE_BOOLEAN</td><td></td><td></td><td></td></tr><tr><td>d （DOUBLE）</td><td>IEEE 754双精度浮点数</td><td>G_TYPE_DOUBLE</td><td></td><td></td><td></td></tr><tr><td>g （SIGNATURE）</td><td>类型签名</td><td></td><td></td><td></td><td></td></tr><tr><td>i （INT32）</td><td>32位有符号整数</td><td>G_TYPE_INT</td><td></td><td></td><td>Will be changed to a G_TYPE_INT32 once GLib has it</td></tr><tr><td>n （INT16）</td><td>16位有符号整数</td><td>G_TYPE_INT</td><td></td><td></td><td>Will be changed to a G_TYPE_INT16 once GLib has it</td></tr><tr><td>o （OBJECT_PATH ）</td><td>对象路径</td><td>DBUS_TYPE_G_PROXY</td><td></td><td>g_object_unref</td><td>The returned proxy does not have an interface set; use dbus_g_proxy_set_interface to invoke methods</td></tr><tr><td>q （UINT16）</td><td>16位无符号整数</td><td>G_TYPE_UINT</td><td></td><td></td><td>Will be changed to a G_TYPE_UINT16 once GLib has it</td></tr><tr><td>s （STRING）</td><td>零结尾的UTF-8字符串</td><td>G_TYPE_STRING</td><td>char *</td><td>g_free</td><td></td></tr><tr><td>t （UINT64）</td><td>64位无符号整数</td><td>G_TYPE_GUINT64</td><td></td><td></td><td></td></tr><tr><td>u （UINT32）</td><td>32位无符号整数</td><td>G_TYPE_UINT</td><td></td><td></td><td>Will be changed to a G_TYPE_UINT32 once GLib has it</td></tr><tr><td>v （VARIANT）</td><td>容器</td><td>G_TYPE_VALUE</td><td>GValue *</td><td>g_value_unset</td><td>可放任意数据类型的容器，数据中包含类型信息。如glib中的GValue</td></tr><tr><td>x （INT64）</td><td>64位有符号整数</td><td>G_TYPE_GINT64</td><td></td><td></td><td></td></tr><tr><td>y （BYTE）</td><td>8位无符号整数</td><td>G_TYPE_UCHAR</td><td></td><td></td><td></td></tr><tr><td>t （UINT64）</td><td>64位无符号整数</td><td></td><td></td><td></td><td></td></tr></tbody></table><p>() 定义结构时使用。例如”(i(ii))”</p><p>{} 定义键－值对时使用。例如”a{us}”</p><p>数组”a(i(ii))”的元素是一个结构。用括号将成员的类型括起来就表示结构了，结构可以嵌套。</p><p>数组”a{sv}”的元素是一个键－值对。”{sv}”表示键类型是字符串，值类型是VARIANT。</p><p>dbus数据也有包容器类型，像DBUS_TYPE_ARRAY 和 DBUS_TYPE_STRUCT，dbus的数据类型可以是嵌套的，如有一个数组，内容是字符串的数组集合。但并不是所有的类型都有普通的使用，DBUS_TYPE_STRUCT应该可以包容非基本类型的数据类型。glib绑定尝试使用比较明显的方式进行声明。</p><pre><code>表二 数组表</code></pre><table><thead><tr><th>D-Bus type signature</th><th>Description</th><th>GType</th><th>C typedef</th><th>Free function</th></tr></thead><tbody><tr><td>ay</td><td>Array of bytes</td><td>DBUS_TYPE_G_BYTE_ARRAY</td><td>GArray *</td><td>g_array_free</td></tr><tr><td>au</td><td>Array of uint</td><td>DBUS_TYPE_G_UINT_ARRAY</td><td>GArray *</td><td>g_array_free</td></tr><tr><td>ai</td><td>Array of int</td><td>DBUS_TYPE_G_INT_ARRAY</td><td>GArray *</td><td>g_array_free</td></tr><tr><td>ax</td><td>Array of int64</td><td>DBUS_TYPE_G_INT64_ARRAY</td><td>GArray *</td><td>g_array_free</td></tr><tr><td>at</td><td>Array of uint64</td><td>DBUS_TYPE_G_UINT64_ARRAY</td><td>GArray *</td><td>g_array_free</td></tr><tr><td>ad</td><td>Array of double</td><td>DBUS_TYPE_G_DOUBLE_ARRAY</td><td>GArray *</td><td>g_array_free</td></tr><tr><td>ab</td><td>Array of boolean</td><td>DBUS_TYPE_G_BOOLEAN_ARRAY</td><td>GArray *</td><td>g_array_free</td></tr><tr><td>as</td><td>Array of strings</td><td>G_TYPE_STRV</td><td>char **</td><td>g_strfreev</td></tr></tbody></table><pre><code>表三 字典(dict or hash)表</code></pre><table><thead><tr><th>D-Bus type signature</th><th>Description</th><th>GType</th><th>C typedef</th><th>Free function</th></tr></thead><tbody><tr><td>a{ss}</td><td>Dictionary mapping strings to strings</td><td>DBUS_TYPE_G_STRING_STRING_HASHTABLE</td><td>GHashTable *</td><td>g_hash_table_destroy</td></tr></tbody></table><h2 id="示例源码"><a href="#示例源码" class="headerlink" title="示例源码"></a>示例源码</h2><ul><li><a href="https://github.com/eightplus/examples/tree/master/code/C/myglibdbus" target="_blank" rel="noopener">myglibdbus</a></li></ul><h2 id="编写session-dbus服务端"><a href="#编写session-dbus服务端" class="headerlink" title="编写session dbus服务端"></a>编写session dbus服务端</h2><ul><li><p>xml的编写及绑定文件的生成</p><p>在GLib中，通过dbus表现出GObject，必须写XML文件描述这个对象的方法等属性。通过XML文件和dbus-binding-tool工具，可以很方便的自动创建出易于使用的dbus代理对象。例如下面的org.freedesktop.myglibdbus.xml文件描述了三个函数和一个信号，其中函数work有一个输入参数msg（char<em>）和一个输出参数ret（gint），函数receive有一个输入参数msg（char</em>）和一个输出参数ret（char*），函数exit有一个输出参数ret（gint），信号info_alert传递一个参数类型为字符串的变量。一个node可以有多个interface ,一个interface可以有多个method（函数）或signal（信号）。 org.freedesktop.myglibdbus.xml的具体内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span><br><span class="line">&lt;node name=&quot;/org/freedesktop/myglibdbus&quot;&gt;</span><br><span class="line">  &lt;interface name=&quot;org.freedesktop.myglibdbus&quot;&gt;</span><br><span class="line">    &lt;method name=&quot;work&quot;&gt;</span><br><span class="line">      &lt;annotation name=&quot;org.freedesktop.DBus.GLib.Async&quot; value=&quot;&quot; /&gt;</span><br><span class="line">      &lt;arg type=&quot;s&quot; name=&quot;msg&quot; direction=&quot;in&quot;/&gt;</span><br><span class="line">      &lt;arg type=&quot;i&quot; name=&quot;ret&quot; direction=&quot;out&quot; /&gt;</span><br><span class="line">    &lt;/method&gt;</span><br><span class="line">    &lt;method name=&quot;receive&quot;&gt;</span><br><span class="line">      &lt;annotation name=&quot;org.freedesktop.DBus.GLib.Async&quot; value=&quot;&quot; /&gt;</span><br><span class="line">      &lt;arg type=&quot;s&quot; name=&quot;msg&quot; direction=&quot;in&quot;/&gt;</span><br><span class="line">      &lt;arg type=&quot;s&quot; name=&quot;ret&quot; direction=&quot;out&quot; /&gt;</span><br><span class="line">    &lt;/method&gt;</span><br><span class="line">    &lt;method name=&quot;exit&quot;&gt;</span><br><span class="line">      &lt;annotation name=&quot;org.freedesktop.DBus.GLib.Async&quot; value=&quot;&quot; /&gt;</span><br><span class="line">      &lt;arg type=&quot;i&quot; name=&quot;ret&quot; direction=&quot;out&quot; /&gt;</span><br><span class="line">    &lt;/method&gt;</span><br><span class="line">    &lt;signal name=&quot;info_alert&quot;&gt;</span><br><span class="line">      &lt;arg type=&quot;s&quot; name=&quot;value&quot; direction=&quot;out&quot; /&gt;</span><br><span class="line">    &lt;/signal&gt;</span><br><span class="line">  &lt;/interface&gt;</span><br><span class="line">&lt;/node&gt;</span><br></pre></td></tr></table></figure></li></ul><p>在上面的XML中可以看到一行<code>&lt;annotation name=&quot;org.freedesktop.DBus.GLib.Async&quot; value=&quot;&quot; /&gt;</code>，其实，Annotations的方式有四种，分别如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">org.freedesktop.DBus.GLib.CSymbol</span><br><span class="line">org.freedesktop.DBus.GLib.Async</span><br><span class="line">org.freedesktop.DBus.GLib.Const</span><br><span class="line">org.freedesktop.DBus.GLib.ReturnVal</span><br></pre></td></tr></table></figure></p><ul><li><p>通过dbus-binding-tool生成绑定文件</p><p> 在进行代码编写之前，先确保系统安装了dbus相关的开发包，执行以下命令：</p><p> <code>$ sudo apt install libglib2.0-dev libdbus-glib-1-dev libdbus-1-dev</code></p><p> 运行dbus-binding-tool工具（该工具来自包libdbus-glib-1-dev）,如下所示：</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ dbus-binding-tool --mode=glib-server --prefix=myglibdbus org.freedesktop.myglibdbus.xml --output=myglibdbus-glue.h</span><br><span class="line">或者</span><br><span class="line">$ dbus-binding-tool --mode=glib-server --prefix=myglibdbus org.freedesktop.myglibdbus.xml &gt; myglibdbus-glue.h</span><br></pre></td></tr></table></figure><p> 执行上面的命令，则生成了绑定文件myglibdbus-glue.h，该文件无需修改，直接在本地代码中include使用即可。”–prefix”参数定义了对象前缀。设对象前缀是$(prefix)，则生成的DBusGObjectInfo结构变量名就是<code>dbus_glib_$(prefix) _object_info</code>，如：dbus_glib_myglibdbus_object_info。<br> 绑定文件会为接口方法定义回调函数。回调函数的名称是这样的：首先将xml中的方法名称转换到全部小写，下划线分隔的格式，然后增加前缀<code>$(prefix)_</code>。例如xml中的函数work，绑定文件就会引用一个名称为<code>$(prefix)_work</code>的函数，即：myglibdbus_work。</p></li></ul><ul><li><p>创建对象</p><p>dbus-glib定义向dbus daemon申请一个注册信息的形式为GObject（C语言）的对象。dbus-glib用GObject实现dbus对象，故需要实现一个对象,继承于GObject。</p><p>新建文件myglidbus.h和myglibdbus.c，在头文件myglidbus.h中定义对象，如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">typedef struct _MyGlibDbus &#123;</span><br><span class="line">    GObject parent;</span><br><span class="line">&#125; MyGlibDbus;</span><br><span class="line"></span><br><span class="line">typedef struct _MyGlibDbusClass &#123;</span><br><span class="line">    GObjectClass parent_class;</span><br><span class="line">&#125; MyGlibDbusClass;</span><br></pre></td></tr></table></figure><p>在GObject中，类是两个结构体的组合，一个是实例结构体，另一个是类结构体，MyGlibDbus是实例结构体，MyGlibDbusClass是类结构体。</p></li><li><p>实现类类型的定义</p><p>在myglibdbus.c文件中加入 <code>G_DEFINE_TYPE(MyGlibDbus, myglibdbus, G_TYPE_OBJECT);</code></p><p>G_DEFINE_TYPE可以让GObject库的数据类型系统能够识别我们所定义的MyGlibDbus类类型，它接受三个参数，第一个参数是类名，即MyGlibDbus；第二个参数则是类的成员函数（面向对象术语称之为“方法”或“行为”）名称的前缀，例如myglibdbus_get_type函数即为MyGlibDbus类的一个成员函数，“myglibdbus”</p><p>在myglibdbus.c文件中，需要include上面生成的绑定文件，即代码中加入：<code>#include &quot;myglibdbus-glue.h&quot;</code>，调用dbus_g_object_class_install_info进行类的初始化，传递对象和对象信息进去，如：<code>dbus_g_object_type_install_info(MYGLIBDBUS_TYPE_OBJECET, &amp;dbus_glib_myglibdbus_object_info);</code></p><p>为了执行XML中的method，这里需要对每个method定义一个C函数，这里拿work函数进行说明，定义的C函数为：<code>gint myglibdbus_work(MyGlibDbus *dbus, gchar *msg, DBusGMethodInvocation *ret_value, GError **error)</code></p><p>其中，第一个参数必须是对象实例的指针，跟在实例指针后面的参数 msg 是方法的输入参数，ret_value为输出参数，最后一个参数必须为<code>GError **</code>，如果函数返回失败，必须使用g_set_error填充该错误参数。</p><p>最后可以使用dbus_g_connection_register_g_object输出一个对象，如：<code>dbus_g_connection_register_g_object(connection, MYGLIBDBUS_PATH, G_OBJECT(dbus));</code></p></li><li><p>声明类的函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GType myglibdbus_get_type(void);//向GObject库所提供的类型管理系统提供要注册的MyGlibDbus类类型的相关信息,可以不实现，但必须要声明</span><br><span class="line"></span><br><span class="line">#define MYGLIBDBUS_TYPE_OBJECET(myglibdbus_get_type())</span><br><span class="line"></span><br><span class="line">//声明类的函数（类成员的构造函数）</span><br><span class="line">void myglibdbus_init(MyGlibDbus *dbus)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//声明类的函数（类结构的构造函数，与类成员构造函数区别在于，该构造函数只在该类定义时运行一次，常用来进行消息信号的初始化等。而myglibdbus_init则在创建成员时都会调用一次（如obj = g_object_new））</span><br><span class="line">void myglibdbus_class_init(MyGlibDbusClass * kclass)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>向dbus deamon申请注册</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">DBusGConnection * connection = NULL;</span><br><span class="line">DBusConnection *connect;</span><br><span class="line">DBusGProxy * dbus_proxy = NULL;</span><br><span class="line">GError * error = NULL;</span><br><span class="line">guint request_name_result;</span><br><span class="line">gint ret;</span><br><span class="line">dbus_g_thread_init();</span><br><span class="line"></span><br><span class="line">dbus = (MyGlibDbus*)myglibdbus_new();</span><br><span class="line">loop = g_main_loop_new(NULL, FALSE);</span><br><span class="line"></span><br><span class="line">connection = dbus_g_bus_get(DBUS_BUS_SESSION, &amp;error);</span><br><span class="line">if(connection == NULL)&#123;</span><br><span class="line">    g_error(&quot;%s&quot;, error-&gt;message);</span><br><span class="line">    goto out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//申请一个会话总线  DBUS_SERVICE_DBUS: org.freedesktop.DBus    DBUS_PATH_DBUS: /org/freedesktop/DBus   DBUS_INTERFACE_DBUS:org.freedesktop.DBus</span><br><span class="line">dbus_proxy = dbus_g_proxy_new_for_name(connection, DBUS_SERVICE_DBUS, DBUS_PATH_DBUS, DBUS_INTERFACE_DBUS);</span><br><span class="line"></span><br><span class="line">//调用dbusdaemon的函数“RequestName”，申请一个DBUS名为org.freedesktop.myglibdbus的注册信息</span><br><span class="line">ret = dbus_g_proxy_call(dbus_proxy, &quot;RequestName&quot;, &amp;error,</span><br><span class="line">        G_TYPE_STRING, MYGLIBDBUS_NAME,</span><br><span class="line">                        G_TYPE_UINT,</span><br><span class="line">                        DBUS_NAME_FLAG_DO_NOT_QUEUE,</span><br><span class="line">                        G_TYPE_INVALID,</span><br><span class="line">                        G_TYPE_UINT, &amp;request_name_result,</span><br><span class="line">                        G_TYPE_INVALID);</span><br><span class="line">if(!ret)&#123;</span><br><span class="line">    g_error(&quot;RequestName failed:%s&quot;, error-&gt;message);</span><br><span class="line">    g_error_free(error);</span><br><span class="line">    exit(EXIT_FAILURE);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">g_object_unref(G_OBJECT(dbus_proxy));</span><br><span class="line"></span><br><span class="line">//already running</span><br><span class="line">if(request_name_result != DBUS_REQUEST_NAME_REPLY_PRIMARY_OWNER)</span><br><span class="line">  exit(EXIT_FAILURE);</span><br><span class="line"></span><br><span class="line">dbus_g_object_type_install_info(MYGLIBDBUS_TYPE_OBJECET, &amp;dbus_glib_myglibdbus_object_info);//向dbus-glib登记对象信息</span><br><span class="line">//申请之前定义的一个对象MyGlibDbus，将该对象与bus绑定</span><br><span class="line">dbus_g_connection_register_g_object(connection, MYGLIBDBUS_PATH, G_OBJECT(dbus));</span><br><span class="line"></span><br><span class="line">g_main_loop_run(loop);//申请创建一个主循环</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    g_main_loop_unref(loop);</span><br><span class="line">    g_object_unref(dbus);</span><br></pre></td></tr></table></figure></li></ul><h2 id="通过Dbus-glib编写客户端"><a href="#通过Dbus-glib编写客户端" class="headerlink" title="通过Dbus-glib编写客户端"></a>通过Dbus-glib编写客户端</h2><ul><li><p>使用dbus_g_proxy_call调用dbus服务的方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GError *err = NULL;</span><br><span class="line">int ret = 0;</span><br><span class="line">if (!dbus_g_proxy_call(remote_object, &quot;work&quot;, &amp;err,</span><br><span class="line">    G_TYPE_STRING, &quot;Hello world!&quot;, G_TYPE_INVALID,</span><br><span class="line">    G_TYPE_INT, &amp;ret, G_TYPE_INVALID)) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">else &#123;</span><br><span class="line">    if (err != NULL) &#123;</span><br><span class="line">        if(err-&gt;domain == DBUS_GERROR &amp;&amp; err-&gt;code == DBUS_GERROR_REMOTE_EXCEPTION)</span><br><span class="line">            printf(&quot;dbus send exception %s:%s&quot;,dbus_g_error_get_name(err), err-&gt;message);</span><br><span class="line">        else</span><br><span class="line">            printf(&quot;dbus send Error : %s\n&quot;, err-&gt;message);</span><br><span class="line">        g_clear_error(&amp;err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用dbus-binding-tool –mode=glib-client方式调用dbus服务的方法</p><p><code>$ dbus-binding-tool --mode=glib-client --prefix=myglibdbus org.freedesktop.myglibdbus.xml &gt; myglibdbus_proxy.h</code></p><p>打开myglibdbus_proxy.h看到服务端提供的work方法已经转为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">static inline gboolean</span><br><span class="line">org_freedesktop_myglibdbus_work (DBusGProxy *proxy, const char * IN_msg, gint* OUT_ret, GError **error)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  return dbus_g_proxy_call (proxy, &quot;work&quot;, error, G_TYPE_STRING, IN_msg, G_TYPE_INVALID, G_TYPE_INT, OUT_ret, G_TYPE_INVALID);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>客户端可以直接调用org_freedesktop_myglibdbus_work，而不再需要使用上面的dbus_g_proxy_call来调用work函数。</p></li></ul><h2 id="示例代码工程创建和编译演示"><a href="#示例代码工程创建和编译演示" class="headerlink" title="示例代码工程创建和编译演示"></a>示例代码工程创建和编译演示</h2><ul><li><p>编写org.freedesktop.myglibdbus.xml文件</p></li><li><p>新建文件myglidbus.h、myglibdbus.c、server.c和client.c，并完成代码编写，其中myglidbus.h、myglibdbus.c、server.c三个文件是服务端代码文件，client.c是客户端代码文件。</p></li><li><p>执行autoscan，生成 configure.scan 和 autoscan.log，将configure.scan 修改为 configure.ac, 并修改configure.ac的内容。</p><p><code>$ autoscan</code></p><p>configure.ac的初始内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#                                               -*- Autoconf -*-</span><br><span class="line"># Process this file with autoconf to produce a configure script.</span><br><span class="line"></span><br><span class="line">AC_PREREQ([2.69])</span><br><span class="line">AC_INIT([FULL-PACKAGE-NAME], [VERSION], [BUG-REPORT-ADDRESS])</span><br><span class="line">AC_CONFIG_SRCDIR([src/server.c])</span><br><span class="line">AC_CONFIG_HEADERS([config.h])</span><br><span class="line"></span><br><span class="line"># Checks for programs.</span><br><span class="line">AC_PROG_CC</span><br><span class="line"></span><br><span class="line"># Checks for libraries.</span><br><span class="line"></span><br><span class="line"># Checks for header files.</span><br><span class="line">AC_CHECK_HEADERS([stdlib.h string.h])</span><br><span class="line"></span><br><span class="line"># Checks for typedefs, structures, and compiler characteristics.</span><br><span class="line"></span><br><span class="line"># Checks for library functions.</span><br><span class="line"></span><br><span class="line">AC_CONFIG_FILES([Makefile</span><br><span class="line">                 src/Makefile])</span><br><span class="line">AC_OUTPUT</span><br></pre></td></tr></table></figure></li><li><p>执行aclocal，生成aclocal.m4(处理本地宏文件)和 autom4te.cache</p><p><code>$ aclocal</code></p></li><li><p>执行autoheader，生成生成config.h.in</p><p><code>$ autoheader</code></p></li><li><p>执行autoconf，根据 configure.ac 和 aclocal.m4 生成 configure</p><p><code>$ autoconf</code></p></li><li><p>编写 Makefile.am 和 src/Makefile.am</p></li><li><p>增加 NEWS、README、AUTHORS、ChangeLog</p></li><li><p>执行automake，生成 Makefile.in，src/Makefile.in, compile, COPYING, depcomp， INSTALL, install-sh 和 missing (根据 Makefile.am 和 aclocal.m4)</p><p><code>$ automake --add-missing</code></p></li><li><p>执行configure，生成 Makefile, src/Makefile， config.log 和 config.status</p><p><code>$ ./configure</code></p></li><li><p>执行make，生成二进制执行文件（src下server和client）</p><p><code>$ make</code></p></li></ul><h2 id="未来可以改进的地方"><a href="#未来可以改进的地方" class="headerlink" title="未来可以改进的地方"></a>未来可以改进的地方</h2><ul><li><p>多线程防冲突</p><p>上面示例代码只是单线程实现dbus调用。如果多线程的情况下，以及库函数情况下，为确保不同线程使用不同的DBusConnection，在创建dbus总线时要注意使用关键字创建各自私有的总线。</p><p>客户端实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">GMainContext*main_context = NULL;</span><br><span class="line">main_context =g_main_context_new();//申请独立的context</span><br><span class="line">/*</span><br><span class="line">  is dbus_g_bus_get_private， not dbus_g_bus_get</span><br><span class="line">  dbus_g_bus_get_private申请的私有总线连接在使用完成后，要使用dbus_g_connection_close先关闭连接后再释放资源dbus_g_connection_unref,</span><br><span class="line">  否则只调用dbus_g_connection_unref会报“私有连接无法关闭”，导致内存泄露。</span><br><span class="line">*/</span><br><span class="line">bus = dbus_g_bus_get_private(DBUS_BUS_SESSION,main_context, &amp;error);</span><br><span class="line">…</span><br><span class="line">dbus_g_connection_close(bus);//私有的总线连接要先close才能unref</span><br><span class="line">dbus_g_connection_unref(bus);</span><br><span class="line">g_main_context_unref(main_context);//g_main_context_unref()要与g_main_context_new() 配合使用，如果申请的资源未释放，会导致文件句柄泄露</span><br></pre></td></tr></table></figure><p>消息接收端实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">GMainContext*main_context = NULL;</span><br><span class="line">main_context= g_main_context_new();//申请独立的context</span><br><span class="line">mainloop= g_main_loop_new (main_context, FALSE);</span><br><span class="line">g_main_loop_unref(mainloop);</span><br><span class="line">g_main_context_unref(main_context);</span><br></pre></td></tr></table></figure><p>以这种方式实现的消息接收端，在多进程接收相同消息的情况下，只有一个进程能够接收到该消息，如果要多进程都能接收到消息，实现如下(使用系统默认的context与总线绑定)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">main_context = g_main_context_default();</span><br><span class="line">mainloop = g_main_loop_new (main_context,FALSE);</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainloop = g_main_loop_new (NULL, FALSE);</span><br></pre></td></tr></table></figure><p>dbus_g_connection_close的实现如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#define  _DBUS_POINTER_UNSHIFT(p) ((void*) (((char*)p)- sizeof (void*)))</span><br><span class="line">#define DBUS_CONNECTION_FROM_G_CONNECTION(x)    ((DBusConnection*)_DBUS_POINTER_UNSHIFT(x))</span><br><span class="line">void dbus_g_connection_close(DBusConnection * connection)</span><br><span class="line">&#123;</span><br><span class="line">    returndbus_connection_close(DBUS_CONNECTION_FROM_G_CONNECTION(connection));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> Linux 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dbus </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用mpv编写自己的播放器</title>
      <link href="/2019/08/19/2019-08-19-qt-mpv-player/"/>
      <url>/2019/08/19/2019-08-19-qt-mpv-player/</url>
      <content type="html"><![CDATA[<blockquote><p>MPV 是一个基于 MPlayer 和 MPlayer2 的多平台开源播放器，其在Linux上拥有广泛的输出设备支持，内置ffmpeg解码器，支持绝大部分的视频和音频格式，支持本地播放和网络播放，支持ass特效字幕，GPU 解码能力十分出色。虽然MPV功能强大，但默认情况下，MPV无GUI图形界面，用户需要通过命令行或者手动修改其配置文件达到配置MPV的目的，这样就给普通用户带来了诸多不便。为此，本文将介绍如何在Ubuntu系统上使用Qt编写带UI图形的MPV播放器，使用户对快速定制具有图形界面的MPV播放器有一个大致的了解。<br></p></blockquote><hr><h2 id="示例源码"><a href="#示例源码" class="headerlink" title="示例源码"></a>示例源码</h2><ul><li><a href="https://github.com/eightplus/examples/tree/master/code/Qt/mympvplayer" target="_blank" rel="noopener">mympvplayer</a></li></ul><h2 id="开发前准备工作"><a href="#开发前准备工作" class="headerlink" title="开发前准备工作"></a>开发前准备工作</h2><ul><li><p>Ubuntu上MPV的安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br><span class="line">$ sudo install mpv</span><br></pre></td></tr></table></figure></li><li><p>编程开发依赖包安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo install qtbase5-dev qt5-qmake qtscript5-dev qttools5-dev-tools</span><br></pre></td></tr></table></figure></li></ul><h2 id="要点分析"><a href="#要点分析" class="headerlink" title="要点分析"></a>要点分析</h2><p>  为了实现一个既可以在Qt程序中控制MPV，又可以让Qt程序得到MPV的输出信息的播放器，这里重点介绍Qt的QProcess类。QProcess类可用来调用外部程序，并与外部程序进行通信。其把外部程序的进程当作一个有序的I/O设备，通过对通过I/O设备的读写来完成进程间的通信，即：write()函数实现对进程标准输入的写操作，通过read()，readLine()和getChar()函数实现对标准输出的读操作。在正常渠道模式下，QProcess的无名管道stdinChannelpipe，stdoutChannelpipe和stderrChannelpipe分别与标准输入、标准输出和标准容错进行绑定，实现与外部程序的通信；而在融合模式下，没有容错管道，此时，标准容错端和标准输出端将共同挂接到子进程的stdoutChannelpipe的写端来实现内外进程的通信，即标准输出和标准容错绑定到同一个管道的写端。本文介绍通过QProcess类调用MPV，并设置一系列播放参数，如视频驱动、音频驱动、软解/硬解、缓存等。至于Qt图形和MPV视频窗口的关联，则是使用“–wid widget-&gt;winId()”进行绑定，通过winId()可以获得一个数字，其中widget是一个QWidget对象，这样将界面上一个窗口的句柄给了MPV，即视频输出定位到了widget窗体部件中（wid为MPV指定了输入窗口，-wid参数只在X11、directX和OpenGL中适用）。本文推荐使用融合模式，代码为：setProcessChannelMode(QProcess::MergedChannels)。</p><ul><li><p>配置介绍</p><p>查看MPV的帮助信息可在终端执行”mpv –help”， 查看MPV可配置信息可在终端执行”mpv –list-options”，查看快捷键列表可在终端执行”mpv —input-keylist”。MPV参数调用需要加”–”，如果参数是使用配置文件中的参数，则配置文件中无需在参数前加”–”。MPV的配置文件目录为：~/.config/mpv/，本文介绍的播放器定制将不使用配置文件，这里只简要介绍下mpv.conf和input.conf这两个配置文件的格式，mpv.conf 是主配置文件，里面包含一些基本的配置，input.conf 按键配置文件，包含播放过程中一些操作快捷键的设置。</p><p>mpv.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># Disable the On Screen Controller (OSC).</span><br><span class="line">osc=no</span><br><span class="line"># Keep the player window on top of all other windows.</span><br><span class="line">ontop=yes</span><br><span class="line"># Enable hardware decoding if available. Often, this does not work with all</span><br><span class="line"># video outputs, but should work well with default settings on most systems.</span><br><span class="line"># If performance or energy usage is an issue, forcing the vdpau or vaapi VOs</span><br><span class="line"># may or may not help.</span><br><span class="line">hwdec=auto</span><br></pre></td></tr></table></figure><p>input.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Mouse wheels, touchpad or other input devices that have axes</span><br><span class="line"># if the input devices supports precise scrolling it will also scale the</span><br><span class="line"># numeric value accordingly</span><br><span class="line">WHEEL_UP      seek 10</span><br><span class="line">WHEEL_DOWN    seek -10</span><br><span class="line">WHEEL_LEFT    add volume -2</span><br><span class="line">WHEEL_RIGHT   add volume 2</span><br><span class="line">## Seek units are in seconds, but note that these are limited by keyframes</span><br><span class="line">RIGHT seek  5</span><br><span class="line">LEFT  seek -5</span><br><span class="line">UP    seek  60</span><br><span class="line">DOWN seek -60</span><br></pre></td></tr></table></figure><p>下面详细介绍几个比较重要的配置项</p><ul><li><p>quiet</p><p>这个参数会阻止状态行信息的显示，即使得控制台消息尽量少输出。使用Qt嵌入MPV时，需要使用noquiet而不是quiet，否则Qt程序无法获得MPV的状态信息，致使Qt程序无法将MPV的状态准确的展示给用户，如播放进度、出错信息等。当然，如果你的机器性能差，那还是建议你直接使用mpv，且参数使用quiet，而不是像本文介绍的这样对MPV进行UI封装。MPV使用noquiet的格式为：mpv –no-quiet。</p></li><li><p>config</p><p>可让Qt程序将一些基本的配置通过从MPV命令获取各参数支持可选值，并设置一个默认值，且可通过图形展示给用户去选择。所以此处使用no-config，即不从MPV的配置文件读取参数。mpv使用no-config的格式为：mpv –no-config。</p></li><li><p>input-file</p><p>这里将不使用MPV的input.conf配置文件，而是通过标准输入stdin给MPV发送命令，命令后面带上换行”\n”写入stdin即可。另外，在直接使用MPV的过程中，–no-input-default-bindings将使得MPV无法响应按键的事件，而–input-default-bindings参数默认为yes，则可以让MPV响应按键事件。MPV使用input-file的格式为：mpv –input-file=/dev/stdin。</p></li><li><p>term-status-msg</p><p>该参数可以让MPV输出一些视频信息，可以通过 –term-status-msg 参数给它一个输出格式，如：”–term-status-msg=STATUS: ${=time-pos} / ${=duration:${=length:0}} P: ${=pause} B: ${=paused-for-cache} I: ${=core-idle} VB: ${=video-bitrate:0} AB: ${=audio-bitrate:0}”</p></li><li><p>vo</p><p>通过命令“mpv –vo help”可查看MPV支持的视频驱动列表，Qt图形程序可以将列表展示出来供用户选择，并将选择的vo加入MPV的参数列表中，加入方式为：mpv –vo xxx，如：mpv –vo=xv。</p></li><li><p>ao</p><p>通过命令“mpv –ao help”可查看mpv支持的音频驱动列表，Qt图形程序可以将列表展示出来供用户选择，并将选择的ao加入mpv的参数列表中，加入方式为：mpv –ao xxx，如：mpv –ao=pulse。</p></li><li><p>hwdec</p><p>hwdec为硬件解码配置，其可用配置列表和GPU有关，这里暂分析其中5种配置：no（软解），auto（自动尝试使用第一种可用的硬解方式），vdpau（用于vdpau和opengl的显示输出，即此时需要保证vo参数为gpu或者vdpau），vaapi（用于vaapi和opengl的视频输出，即此时需要保证vo参数为gpu或者vdapi，仅支持Intel GPU）和vaapi-copy（将视频拷贝回系统内存中，仅支持Intel GPU）。参数使用格式为：–hwdec=vaapi-copy。<br>hwdec具体参数见文档：<a href="https://mpv.io/manual/stable/。" target="_blank" rel="noopener">https://mpv.io/manual/stable/。</a></p></li><li><p>vd-lavc-threads</p><p>硬件解码线程数目，仅适用于MPEG-1/2和H.264，取值范围为0 - any，默认为0。使用格式如下：–vd-lavc-threads=4。</p></li></ul></li></ul><ul><li><p>MPV支持的音/视频、字幕和播放列表格式的大部分列表</p><p>MPV支持的视频格式：<br>avi 、vfw、divx、mpg、mpeg、m1v、m2v、mpv、dv、3gp、mov、mp4、m4v、mqv、dat、vcd、ogg、ogm、ogv、ogx、asf、wmv、bin、iso、vob、mkv、nsv、ram、flv、rm、swf、ts、rmvb、dvr-ms、m2t、m2ts、mts、rec、wtv、f4v、hdmov、webm、vp8、bik、smk、m4b、wtv、part</p><p>MPV支持的音频格式：<br>mp3、ogg、oga、wav、wma、aac、ac3、dts、ra、ape、flac、thd、mka、m4a、opus</p><p>MPV支持的字幕格式：<br>srt、sub、ssa、ass、idx、txt、smi、rt、utf、aqt、vtt</p><p>MPV支持的列表格式：<br>m3u、m3u8、pls、xspf</p></li><li><p>Qt对MPV的控制</p><p>前面提及过Qt的QProcess类，这里描述下该类是如果设置MPV的参数和启动MPV的，即如何使用给标准输入控制MPV。MPV自动从标准输入中读取信息并执行，该类指令信息都需要以“\n”结尾。管道的读端描述符stdinChannelpipe[0]复制给了标准输入，即标准输入的描述符也为stdinChannelpipe[0]，隐藏按照标准输入的描述符去读信息就是到stdinChannelpipe所对应的管道中读取信息。QProcess的start()函数将开启进程，第一个参数即为mpv二进制，第二个参数为给mpv的参数列表，执行start()函数后，将完成内核中管道以及通信环境的建立。QProcess的成员函数write()向stdinChannelpipe[1]端写入信息，比如想让mpv退出，则通过write函数写入“quit \n”即可（write()函数将向stdinChannelpipe[1]端写入命令）。参考代码如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">QString mpvCmd = &quot;/usr/bin/mpv&quot;;</span><br><span class="line">QStringList args;</span><br><span class="line">args &lt;&lt; &quot;-- no-quiet&quot;;</span><br><span class="line">args &lt;&lt; &quot;--wid=100663330&quot;;</span><br><span class="line">args &lt;&lt; xxx.avi;</span><br><span class="line">process-&gt;start(mpvCmd, args);//启动播放</span><br><span class="line">waitForStarted();</span><br><span class="line">QString cmd = &quot;set pause yes&quot;;</span><br><span class="line">process-&gt;write(cmd.toLocal8Bit() + &quot;\n&quot;);//设置暂停</span><br></pre></td></tr></table></figure></li><li><p>Qt获取MPV的信息</p><p>使用QProcess的融合模式，从标准输出和标准容错得到mpv 的信息。绑定QProcess的信号readyReadStandardOutput，当该信号出发时，再通过QProcess的readAllStandardOutput()函数获取信息（当然，这里也可以while循环来判断是否可以读取一行数据：while(process-&gt;canReadLine())，如果可以，则读取一行：QString line(process-&gt;readLine());），readAllStandardOutput获取的数据类型为QByteArray，对数据进行解析时通过“\n” 和“\r” 切分后一行一行解析，通过对每行的QByteArray数据进行详细解析可以得出MPV的状态信息，并将一些状态在Qt的图形程序上动态展示处理，比如MPV播放成功，则根据播放成功的信息将Qt图形的播放按钮设置为可暂停状态，此时点击该按钮给MPV发送的指令应该是暂停而非启动。另外，可以绑定QProcess的信号finished(int, QProcess::ExitStatus)，当该信号被触发时，通过判断QProcess的bytesAvailable()值，如果&gt;0，则通过QProcess的readAllStandardOutput()函数获取信息。</p><p>获取MPV的信息进行解析的难点是对繁杂冗余的信息进行过滤，针对关键字定位信息表示的意思。这里可以使用Qt的对获取的QRegExp来进行匹配。</p><p>下述正则表达式可用于分析出正在启动中：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QRegExp rx_playing;</span><br><span class="line">rx_playing.setPattern(&quot;^Playing:.*|^\\[ytdl_hook\\].*&quot;);</span><br></pre></td></tr></table></figure><p>下述正则表达式可可解析出暂停、缓存中等各种状态信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QRegExp rx_av;</span><br><span class="line">rx_av.setPattern(&quot;^STATUS: ([0-9\\.-]+) / ([0-9\\.-]+) P: (yes|no) B: (yes|no) I: (yes|no) VB: ([0-9\\.-]+) AB: ([0-9\\.-]+)&quot;);</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://github.com/ukui/kylin-video/" target="_blank" rel="noopener">麒麟影音</a></p><p><a href="https://mpv.io/manual/master/#configuration-files" target="_blank" rel="noopener">mpv配置</a></p><p><a href="https://mpv.io/manual/stable/" target="_blank" rel="noopener">mpv主页</a></p><p><a href="https://github.com/mpv-player/mpv/blob/master/etc/mpv.conf" target="_blank" rel="noopener">mpv.conf</a></p><p><a href="https://github.com/mpv-player/mpv/blob/master/etc/input.conf" target="_blank" rel="noopener">input.conf</a></p>]]></content>
      
      <categories>
          
          <category> Linux Qt 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Qt </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>安装Anbox</title>
      <link href="/2019/08/14/2019-08-14-install-anbox/"/>
      <url>/2019/08/14/2019-08-14-install-anbox/</url>
      <content type="html"><![CDATA[<blockquote><p>Anbox是一种基于容器在常规GNU/Linux系统上启动完整Android系統的方法，如Ubuntu。<br>Anbox 使用 Linux 命名空间机制（user，pid，uts，net，mount，ipc），在容器中运行完整的 Android 系统，容器内的 Android 没有直接访问任何硬件的权限，所有的硬件访问通过主机上的 anbox 守护进程。Anbox复用基于 QEMU 的模拟器中为 Android 所做的 OpenGL ES 加速渲染的实现。容器内的 Android 系统使用不同的管道与主机系统通信，并通过它们发送所有的硬件访问命令。<br></p></blockquote><hr><h2 id="使用apt和snap安装Anbox"><a href="#使用apt和snap安装Anbox" class="headerlink" title="使用apt和snap安装Anbox"></a>使用apt和snap安装Anbox</h2><ul><li><p><a href="https://docs.anbox.io/userguide/install_kernel_modules.html" target="_blank" rel="noopener">安装内核模块</a></p><p>anbox-modules-dkms包含ashmem和binder内核模块，安装anbox-modules-dkms后，必须手动加载内核模块。下次系统启动时，它们将自动加载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository ppa:morphis/anbox-support</span><br><span class="line">$ sudo apt update</span><br><span class="line">$ sudo apt install linux-headers-generic anbox-modules-dkms</span><br><span class="line">$ sudo modprobe ashmem_linux</span><br><span class="line">$ sudo modprobe binder_linux</span><br><span class="line">$ ls -1 /dev/&#123;ashmem,binder&#125;</span><br><span class="line">/dev/ashmem</span><br><span class="line">/dev/binder</span><br></pre></td></tr></table></figure></li><li><p>安装和更新Anbox snap</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install snapd</span><br><span class="line">$ sudo snap install --devmode --beta anbox</span><br><span class="line">$ snap refresh --beta --devmode anbox</span><br></pre></td></tr></table></figure></li><li><p>查看当前可用的Anbox信息</p><p><code>$ snap info anbox</code></p></li><li><p>启动Anbox</p><p><code>$ anbox.appmgr</code></p><p>Anbox启动后，应用管理器界面如下所示：<br><img src="/2019/08/14/2019-08-14-install-anbox/01.png" alt=""></p><p>点击应用管理器中的Settings的图标，启动Settings，界面如下所示：<br><img src="/2019/08/14/2019-08-14-install-anbox/02.png" alt=""></p></li><li><p>安装安卓应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt install android-tools-adb</span><br><span class="line">$ adb install qq.apk</span><br><span class="line">37616 KB/s (71677112 bytes in 1.860s)</span><br><span class="line">Failure [INSTALL_FAILED_NO_MATCHING_ABIS: Failed to extract native libraries,        res=-113]</span><br></pre></td></tr></table></figure><p>上面执行<code>adb install qq.apk</code>报错了，原因是当前机器为x86结构，如果是在arm64上，则不会出现该问题。如果想在x86下安装apk，需要找x86的包，可以从<a href="https://mirrorapk.net/" target="_blank" rel="noopener">apk mirror</a>下载，当然，这里的包根本无法满足我的需要，很可能也满足不了你的需要。那么，问题来了，想在x86下使用应用商店的那些apk（arm版本），有没有什么办法呢？</p><p>办法总比困难多，这里可以使用 <strong>libhoudini</strong>。当然，在集成 libhoudini 来支持 ARM 后，也并非所有 Android 应用和游戏都能在 Anbox 中运行。某些 Android 应用和游戏可能根本不会出现在 Google Play 商店中，而一些应用和游戏可能可以安装但无法使用。此外，某些应用可能无法使用某些功能。默认情况下，Anbox 没有 Google Play 商店或 ARM 应用支持。要安装应用，必须下载每个应用的 APK 并使用 adb 手动安装。如上面提及的安装报错，默认情况下不能使用 Anbox 安装 ARM 应用或游戏，可以在 Anbox 中手动设置 Google Play 商店和 ARM 应用支持（使用 libhoudini），但该过程较复杂。为了更容易地在 Anbox 上安装 Google Play 商店和 Google Play 服务，并让它支持 ARM 应用程序和游戏（使用 libhoudini）， geeks-r-us.de上有人创建了一个自动执行这些任务的脚本。</p><ul><li><p>安装 Google Play 商店并在 Anbox 上启用 ARM 应用/游戏支持</p><p>1、 安装所需的依赖项（wget、lzip、unzip 和 squashfs-tools）</p><p><code>sudo apt install wget lzip unzip squashfs-tools dnsmasq</code></p><p>2、 下载并运行脚本，在 Anbox 上自动下载并安装 Google Play 商店（和 Google Play 服务）和 libhoudini（用于 ARM 应用/游戏支持），也可以直接从我的git上下载该脚本<a href="https://github.com/eightplus/examples/tree/master/scripts/install-playstore" target="_blank" rel="noopener">install-playstore.sh</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://raw.githubusercontent.com/geeks-r-us/anbox-playstore-installer/master/install-playstore.sh</span><br><span class="line">chmod +x install-playstore.sh</span><br><span class="line">sudo ./install-playstore.sh</span><br></pre></td></tr></table></figure><p>3、要让 Google Play 商店在 Anbox 中运行，你需要启用 Google Play 商店和 Google Play 服务的所有权限，运行Anbox</p><p><code>$ anbox.appmgr</code></p><p>然后进入“设置 &gt; 应用 &gt; Google Play 服务 &gt; 权限”并启用所有可用权限。对 Google Play 商店也一样。至此，应该可以使用 Google 帐户登录 Google Play 商店了。<br><img src="/2019/08/14/2019-08-14-install-anbox/03.png" alt=""></p><p>如果未启用 Google Play 商店和 Google Play 服务的所有权限，你可能会在尝试登录 Google 帐户时可能会遇到问题，并显示以下错误消息：“Couldn’t sign in. There was a problem communicating with Google servers. Try again later“，如你在下面的截图中看到的那样：<br><img src="/2019/08/14/2019-08-14-install-anbox/04.png" alt=""></p><p>登录后，你可以停用部分 Google Play 商店/Google Play 服务权限。如果在 Anbox 上登录 Google 帐户时遇到一些连接问题，请确保 anbox-bride.sh 正在运行：</p><p>启动：<br><code>$ sudo /snap/anbox/current/bin/anbox-bridge.sh start</code></p><p>重启：<br><code>$ sudo /snap/anbox/current/bin/anbox-bridge.sh restart</code></p></li></ul></li><li><p>卸载Anbox</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ snap remove anbox</span><br><span class="line">$ sudo apt install ppa-purge</span><br><span class="line">$ sudo ppa-purge ppa:morphis/anbox-support</span><br></pre></td></tr></table></figure></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://anbox.io/" target="_blank" rel="noopener">Anbox主页</a></p><p><a href="https://github.com/anbox" target="_blank" rel="noopener">Anbox代码托管</a></p><p><a href="https://www.wolfcstech.com/2017/09/16/opengles_android_emulation/" target="_blank" rel="noopener">Android 硬件 OpenGL ES 模拟设计概述</a></p><p><a href="https://android.googlesource.com/platform/external/qemu/+/emu-master-dev/android/docs/ANDROID-QEMU-PIPE.TXT" target="_blank" rel="noopener">Android QEMU fast pipes</a></p><p><a href="https://android.googlesource.com/platform/external/qemu/+/emu-master-dev/android/docs/ANDROID-QEMUD.TXT" target="_blank" rel="noopener">The Android “qemud” multiplexing daemon</a></p><p><a href="https://android.googlesource.com/platform/external/qemu/+/emu-master-dev/android/docs/ANDROID-QEMUD-SERVICES.TXT" target="_blank" rel="noopener">Android qemud services</a></p>]]></content>
      
      <categories>
          
          <category> 安卓开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android Anbox </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Binder</title>
      <link href="/2018/08/11/2018-08-11-android-binder/"/>
      <url>/2018/08/11/2018-08-11-android-binder/</url>
      <content type="html"><![CDATA[<blockquote><p>在Binder库中，Service组件和Client组件分别使用模板类BnInterface和BpInterface来描述，前者称为Binder本地对象，后者称为Binder代理对象。Binder库中的Binder本地对象和Binder代理对象分别对应于Binder驱动程序中的Binder实体对象和Binder引用对象。<br><br><br>下面将简要介绍Binder进程间的通信，代码包含Server进程和Client进程，Server进程实现了一个Service组件，负责管理前面介绍的虚拟硬件设备mydev的寄存器val，并且向Client进程提供访问服务。以下将实例划分为common、server和client三个模块，其中common实现了硬件访问服务接口IMydevService，以及Binder本地对象类BnMydevService和Binder代理对象类BpMydevService；server实现了一个Server进程，里面包含一个Service组件MydevService；client实现了一个Client进程，它通过一个BpMydevService代理对象去访问运行在Server进程中的Service组件MydevService所提供的服务。<br><br></p></blockquote><hr><h2 id="程序目录结构"><a href="#程序目录结构" class="headerlink" title="程序目录结构"></a>程序目录结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">~/Android/external/binder</span><br><span class="line">----common</span><br><span class="line">    ----IMydevgService.h</span><br><span class="line">    ----IMydevService.cpp</span><br><span class="line">----server</span><br><span class="line">    ----MydevServer.cpp</span><br><span class="line">    ----Android.mk</span><br><span class="line">----client</span><br><span class="line">    ----MydevClient.cpp</span><br><span class="line">    ----Android.mk</span><br></pre></td></tr></table></figure><h2 id="Server进程"><a href="#Server进程" class="headerlink" title="Server进程"></a>Server进程</h2><ul><li>common/IMydevService.h</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> IMYDEVSERVICE_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> IMYDEVSERVICE_H_</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/RefBase.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;binder/IInterface.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;binder/Parcel.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYDEV_SERVICE <span class="meta-string">"com.eightplus.MydevService"</span> <span class="comment">//MYDEV_SERVICE用来描述Service组件MydevService注册到Service Manager的名称</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> android;</span><br><span class="line"></span><br><span class="line"><span class="comment">//硬件访问服务接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IMydevService</span>:</span> <span class="keyword">public</span> IInterface</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DECLARE_META_INTERFACE(MydevService);</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> int32_t <span class="title">getVal</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//读取虚拟硬件设备mydev中寄存器val的值</span></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setVal</span><span class="params">(<span class="keyword">int32_t</span> val)</span> </span>= <span class="number">0</span>;<span class="comment">//向虚拟硬件设备mydev中寄存器val中写入值</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Binder本地对象类BnMydevService</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BnMydevService</span>:</span> <span class="keyword">public</span> BnInterface&lt;IMydevService&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> status_t <span class="title">onTransact</span><span class="params">(<span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel &amp;data, Parcel *reply, <span class="keyword">uint32_t</span> flags= <span class="number">0</span>)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li>common/IMydevService.cpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_TAG <span class="meta-string">"IMydevService"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/Log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"IMydevService.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> android;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span></span><br><span class="line">&#123;</span><br><span class="line">    GET_VAL = IBinder::First_CALL_TRANSACTION;</span><br><span class="line">    SET_VAL = IBinder::First_CALL_TRANSACTION + <span class="number">1</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BpMydevService</span>:</span> <span class="keyword">public</span> BpInterface&lt;IMydevService&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    BpMydevService(<span class="keyword">const</span> sp&lt;IBinder&gt;&amp; impl): BpInterface&lt;IMydevService&gt;(impl)</span><br><span class="line">    &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">int32_t</span> getVal()</span><br><span class="line">    &#123;</span><br><span class="line">        Parcel data;</span><br><span class="line">        data.writeInterfaceToken(IMydevService::getInterfaceDescriptor());</span><br><span class="line"></span><br><span class="line">        Parcel reply;</span><br><span class="line">        remote()-&gt;transact(GET_VAL, data, &amp;reply);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int32_t</span> val = reply.readInt32();</span><br><span class="line">        <span class="keyword">return</span> val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setVal</span><span class="params">(<span class="keyword">int32_t</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Parcel data;</span><br><span class="line">        data.writeInterfaceToken(IMydevService::getInterfaceDescriptor());</span><br><span class="line">        data.writeInt32(val);</span><br><span class="line"></span><br><span class="line">        Parcel reply;</span><br><span class="line">        remote-&gt;transact(SET_VAL, data, &amp;reply);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">IMPLEMENT_META_INTERFACE(MydevService, <span class="string">"com.eightplus.IMydevService"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">status_t</span> BnMydevService::onTransact(<span class="keyword">uint32_t</span> code, <span class="keyword">const</span> Parcel &amp;data, Parcel *reply, <span class="keyword">uint32_t</span> flags)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">switch</span>(code)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">case</span> GET_VAL:</span><br><span class="line">        &#123;</span><br><span class="line">            CHECK_INTERFACE(IMydevService, data, reply);</span><br><span class="line">            <span class="keyword">int32_t</span> val = getVal();</span><br><span class="line">            reply-&gt;writeInt32(val);</span><br><span class="line">            <span class="keyword">return</span> NO_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">case</span> SET_VAL:</span><br><span class="line">        &#123;</span><br><span class="line">            CHECK_INTERFACE(IMydevService, data, reply);</span><br><span class="line">            <span class="keyword">int32_t</span> val = data.readInt32();</span><br><span class="line">            setVal(val);</span><br><span class="line">            <span class="keyword">return</span> NO_ERROR;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> BBinder::onTransact(code, data, reply, flags);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>server/MydevServer.cpp</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_TAG <span class="meta-string">"MydevServer"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/Log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;binder/IServiceManager.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;binder/IPCThreadState.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/IMydevService.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYDEV_DEVICE_NAME <span class="meta-string">"/dev/mydev"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Service组件类MydevService</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MydevService</span>:</span> <span class="keyword">public</span> BnMydevService</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    MydevService()</span><br><span class="line">    &#123;</span><br><span class="line">        fd = open(MYDEV_DEVICE_NAME, O_RDWR);</span><br><span class="line">        <span class="keyword">if</span>(fd == <span class="number">-1</span>)</span><br><span class="line">            LOGE(<span class="string">"Failed to open device %s.\n"</span>, MYDEV_DEVICE_NAME);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">virtual</span> ~MydevService()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(fd != <span class="number">-1</span>)</span><br><span class="line">            close(fd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">instantiate</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        defaultServiceManager()-&gt;addService(String16(MYDEV_SERVICE), <span class="keyword">new</span> MydevService());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int32_t</span> getVal()</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int32_t</span> val = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(fd != <span class="number">-1</span>)</span><br><span class="line">            read(fd, &amp;val, <span class="keyword">sizeof</span>(val));</span><br><span class="line">        rerurn val;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setVal</span><span class="params">(<span class="keyword">int32_t</span> val)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(fd != <span class="number">-1</span>)</span><br><span class="line">            write(fd, &amp;val, <span class="keyword">sizeof</span>(val));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> fd;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    MydevService::instantiate();<span class="comment">//将MydevService组件注册到Service Manager中</span></span><br><span class="line"></span><br><span class="line">    ProcessState::self()-&gt;startThreadPool();<span class="comment">//启动一个Binder线程池</span></span><br><span class="line">    IPCThreadState::self()-&gt;joinThreadPool();<span class="comment">//将主线程添加到进程的Binder线程池中，用来处理来自Client进程的通信请求</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>server/Android.mk<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line">LOCAL_SRC_FILES := ../common/IMydevService.cpp \</span><br><span class="line">MydevServer.cpp</span><br><span class="line">LOCAL_SHARED_LIBRARIES := libcutils libutils libbinder</span><br><span class="line">LOCAL_PACKAGE_NAME := MydevServer</span><br><span class="line">include $(BUILD_EXECUTABLE)</span><br></pre></td></tr></table></figure></li></ul><h2 id="Client进程"><a href="#Client进程" class="headerlink" title="Client进程"></a>Client进程</h2><ul><li><p>client/MydevClient.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LOG_TAG <span class="meta-string">"MydevClient"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utils/Log.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;binder/IServiceManager.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"../common/IMydevService.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    sp&lt;IBinder&gt; binder = defaultServiceManager()-&gt;getService(String16(MYDEV_SERVICE));</span><br><span class="line">    <span class="keyword">if</span> (binder == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"Failed to get mydev service: %s.\n"</span>, MYDEV_SERVICE);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    sp&lt;IMydevService&gt; service = IMydevService::asInterface(binder);</span><br><span class="line">    <span class="keyword">if</span> (service == <span class="literal">NULL</span>) &#123;</span><br><span class="line">        LOGE(<span class="string">"Failed to get mydev service interface.\n"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-2</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Read original value from MydevService:\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int32_t</span> val = service-&gt;getVal();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" %d.\n"</span>, val);<span class="comment">//0</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Add value 1 to MydevService.\n"</span>);</span><br><span class="line"></span><br><span class="line">    val += <span class="number">1</span>;</span><br><span class="line">    service-&gt;setVal(val);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Read the value from MydevService again:\n"</span>);</span><br><span class="line"></span><br><span class="line">    val = service-&gt;getVal();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">" %d.\n"</span>, val);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>client/Android.mk<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line">LOCAL_SRC_FILES := ../common/IMydevService.cpp \</span><br><span class="line">MydevClient.cpp</span><br><span class="line">LOCAL_SHARED_LIBRARIES := libcutils libutils libbinder</span><br><span class="line">LOCAL_PACKAGE_NAME := MydevClient</span><br><span class="line">include $(BUILD_EXECUTABLE)</span><br></pre></td></tr></table></figure></li></ul><h2 id="单独编译server和client"><a href="#单独编译server和client" class="headerlink" title="单独编译server和client"></a>单独编译server和client</h2><ul><li>~/Android$ mmm ./external/binder/server/</li><li>~/Android$ mmm ./external/binder/client/</li></ul><p>编译完成之后，就可以在out/target/product/generic/system/bin目录下看到编译结果的输出文件MydevServer和MydevClient了</p><h2 id="重新打包system-img文件"><a href="#重新打包system-img文件" class="headerlink" title="重新打包system.img文件"></a>重新打包system.img文件</h2><ul><li>~/Android$make snod</li></ul><h2 id="运行模拟器："><a href="#运行模拟器：" class="headerlink" title="运行模拟器："></a>运行模拟器：</h2><ul><li>~/Android$emulator -kernel kernel/goldfish/arch/arm/boot/zImage &amp;</li><li>~/Android$ adb shell</li><li>root@android:/ # cd system/bin</li><li>root@android:/system/bin # ./MydevServer &amp;</li><li>root@android:/system/bin # ./MydevXClient<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Read original value from MydevService:</span><br><span class="line">0.</span><br><span class="line">Add value 1 to MydevService.</span><br><span class="line">Read the value from MydevService again:</span><br><span class="line">1.</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Android源码中使用java编写自己的应用程序</title>
      <link href="/2018/08/09/2018-08-09-android-java-app/"/>
      <url>/2018/08/09/2018-08-09-android-java-app/</url>
      <content type="html"><![CDATA[<h2 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h2><ul><li><p>程序目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">~/Android/packages/experimental/HelloWorld</span><br><span class="line">----AndroidMainifest.xml</span><br><span class="line">----Android.mk</span><br><span class="line">----src</span><br><span class="line">    ----com/eightplus/mydev</span><br><span class="line">        ----HelloWorld.java</span><br><span class="line">----res</span><br><span class="line">    ----layout</span><br><span class="line">        ----main.xml</span><br><span class="line">    ----values</span><br><span class="line">        ----strings.xml</span><br><span class="line">    ----drawable</span><br><span class="line">        ----icon.png</span><br></pre></td></tr></table></figure></li><li><p>HelloWorld.java</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eightplus.hello</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.util.log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">Activity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String LOG_TAG = <span class="string">"HelloWorld"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.main);</span><br><span class="line">        Log.i(LOG_TAG, <span class="string">"HelloWorld, Welcome!!!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>main.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:orientation</span>=<span class="string">"vertical"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"@string/hello_world"</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>strings.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>HellWorld<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"hello_world"</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>icon.png是应用程序的图标</p></li><li><p>AndroidMainifest.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">mainifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">package</span>=<span class="string">"com.eightplus.hello"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:versionCode</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:versionName</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">application</span> <span class="attr">android:icon</span>=<span class="string">"@drawable/icon"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".HelloWorld"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mainifest</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Android.mk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line">LOCAL_SRC_FILES := $(call all-subdir-java-files)</span><br><span class="line">LOCAL_PACKAGE_NAME := HelloWorld</span><br><span class="line">include $(BUILD_PACKAGE)</span><br></pre></td></tr></table></figure></li><li><p>使用mmm命令单独编译HelloWorkd程序</p></li></ul><ul><li>~/Android$ mmm ./packages/experimental/HelloWorld/<br>编译完成之后，就可以在out/target/product/generic/system/app目录下看到编译结果的输出文件HelloWorld.apk了。</li></ul><ul><li>重新打包Android系统文件system.img</li></ul><ul><li>~/Android$ make snod</li></ul><ul><li>运行模拟器</li></ul><ul><li>~/Android$ emulator</li></ul><hr><h2 id="Activity组件应用实例"><a href="#Activity组件应用实例" class="headerlink" title="Activity组件应用实例"></a>Activity组件应用实例</h2><p>该实例由三个Acitity组件组成：MainActivity、SubActivityInProcess和SubActivityInNewProcess。MainActivity是根Acitity，SubActivityInProcess和SubActivityInNewProcess是子Acitity。MainActivity和SubActivityInProcess运行在同一个进程中，而SubActivityInNewProcess运行在一个独立的进程中。</p><ul><li><p>程序目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">~/Android/packages/experimental/Activity</span><br><span class="line">----AndroidMainifest.xml</span><br><span class="line">----Android.mk</span><br><span class="line">----src</span><br><span class="line">    ----com/eightplus/activity</span><br><span class="line">        ----MainActivity.java</span><br><span class="line">        ----SubActivityInProcess.java</span><br><span class="line">        ----SubActivityInNewProcess.java</span><br><span class="line">----res</span><br><span class="line">    ----layout</span><br><span class="line">        ----main.xml</span><br><span class="line">        ----sub.xml</span><br><span class="line">    ----values</span><br><span class="line">        ----strings.xml</span><br><span class="line">    ----drawable</span><br><span class="line">        ----icon.png</span><br></pre></td></tr></table></figure></li><li><p>MainActivity.java</p></li></ul><p>SubActivityInProcess和SubActivityInNewProcess的组件名字分别被配置为”com.eightplus.activity.subactivity.in.process”和”com.eightplus.activity.subactivity.in.new.process”，因此调用成员和函数startActivity启动它们时，只需要分别指定这两个名称即可，不需要知道它们是哪个类来实现的。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eightplus.activity;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;  </span><br><span class="line"><span class="keyword">import</span> android.content.Intent;  </span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;  </span><br><span class="line"><span class="keyword">import</span> android.util.Log;  </span><br><span class="line"><span class="keyword">import</span> android.view.View;  </span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;  </span><br><span class="line"><span class="keyword">import</span> android.widget.Button;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">Activity</span>  <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String LOG_TAG = <span class="string">"com.eightplus.activity.MainActivity"</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button startInProcessButton = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">private</span> Button startInNewProcessButton = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.main);  </span><br><span class="line"></span><br><span class="line">        startInProcessButton = (Button)findViewById(R.id.button_start_in_process);</span><br><span class="line">        startInNewProcessButton = (Button)findViewById(R.id.button_start_in_new_process);</span><br><span class="line">        startInProcessButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        startInNewProcessButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">        Log.i(LOG_TAG, <span class="string">"Main Activity Created."</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(v.equals(startInProcessButton)) &#123;  </span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.eightplus.activity.subactivity.in.process"</span>);  </span><br><span class="line">            startActivity(intent);  </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(v.equals(startInNewProcessButton)) &#123;  </span><br><span class="line">            Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.eightplus.activity.subactivity.in.new.process"</span>);  </span><br><span class="line">            startActivity(intent);  </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><ul><li>SubActivityInProcess.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eightplus.activity;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;  </span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;  </span><br><span class="line"><span class="keyword">import</span> android.util.Log;  </span><br><span class="line"><span class="keyword">import</span> android.view.View;  </span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;  </span><br><span class="line"><span class="keyword">import</span> android.widget.Button;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubActivityInProcess</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String LOG_TAG = <span class="string">"com.eightplus.activity.SubActivityInProcess"</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button finishButton = <span class="keyword">null</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.sub);  </span><br><span class="line"></span><br><span class="line">        finishButton = (Button)findViewById(R.id.button_finish);  </span><br><span class="line">        finishButton.setOnClickListener(<span class="keyword">this</span>);  </span><br><span class="line"></span><br><span class="line">        Log.i(LOG_TAG, <span class="string">"Sub Activity In Process Created."</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(v.equals(finishButton)) &#123;  </span><br><span class="line">            finish();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SubActivityInNewProcess.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eightplus.activity;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;  </span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;  </span><br><span class="line"><span class="keyword">import</span> android.util.Log;  </span><br><span class="line"><span class="keyword">import</span> android.view.View;  </span><br><span class="line"><span class="keyword">import</span> android.view.View.OnClickListener;  </span><br><span class="line"><span class="keyword">import</span> android.widget.Button;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubActivityInNewProcess</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span> </span>&#123;  </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String LOG_TAG = <span class="string">"com.eightplus.activity.SubActivityInNewProcess"</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button finishButton = <span class="keyword">null</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);  </span><br><span class="line">        setContentView(R.layout.sub);  </span><br><span class="line"></span><br><span class="line">        finishButton = (Button)findViewById(R.id.button_finish);  </span><br><span class="line">        finishButton.setOnClickListener(<span class="keyword">this</span>);  </span><br><span class="line"></span><br><span class="line">        Log.i(LOG_TAG, <span class="string">"Sub Activity In New Process Created."</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;  </span><br><span class="line">        <span class="keyword">if</span>(v.equals(finishButton)) &#123;  </span><br><span class="line">            finish();  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>main.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span>   </span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/button_start_in_process"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@string/start_in_process"</span> &gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span>   </span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/button_start_in_new_process"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@string/start_in_new_process"</span> &gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>sub.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span>   </span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">Button</span>   </span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/button_finish"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span>  </span></span><br><span class="line"><span class="tag">            <span class="attr">android:text</span>=<span class="string">"@string/finish"</span> &gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>strings.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>Activity<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"sub_activity"</span>&gt;</span>Sub Activity<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"start_in_process"</span>&gt;</span>Start sub-activity in process<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"start_in_new_process"</span>&gt;</span>Start sub-activity in new process<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"finish"</span>&gt;</span>Finish activity<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>icon.png为应用程序的图标</p></li><li><p>AndroidMainifest.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.eightplus.activity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:versionCode</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:versionName</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:icon</span>=<span class="string">"@drawable/icon"</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:process</span>=<span class="string">"com.eightplus.activity.mainprocess"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:label</span>=<span class="string">"@string/sub_activity"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:name</span>=<span class="string">".SubActivityInProcess"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:process</span>=<span class="string">"com.eightplus.activity.mainprocess"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.eightplus.activity.subactivity.in.process"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:label</span>=<span class="string">"@string/sub_activity"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:name</span>=<span class="string">".SubActivityInNewProcess"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:process</span>=<span class="string">"com.eightplus.activity.newprocess"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.eightplus.activity.subactivity.in.new.process"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Android.mk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH:= $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line">LOCAL_SRC_FILES := $(call all-subdir-java-files)</span><br><span class="line">LOCAL_PACKAGE_NAME := Activity</span><br><span class="line">include $(BUILD_PACKAGE)</span><br></pre></td></tr></table></figure></li><li><p>编译和打包</p></li></ul><ul><li>~/Android$ mmm packages/experimental/Activity    </li><li>~/Android$ make snod</li></ul><ul><li>启动模拟器</li></ul><ul><li>~/Android$ emulator</li></ul><hr><h2 id="Service组件应用实例"><a href="#Service组件应用实例" class="headerlink" title="Service组件应用实例"></a>Service组件应用实例</h2><p>该实例由一个Service组件CounterService和一个Activity组件Counter组成。CounterService组件实现了一个计数器服务，它是由Counter组件启动起来的，并且与Counter组件绑定在一起。CounterService组件在内部使用一个异步任务(AsyncTask)来实现一个计数器，每隔一秒就将内部的计数加1,并且实时地将这个计数显示在Counter组件的用户界面上。由于计数器需要不停地执行加数功能，所以这里将它放在一个后台程序中运行，避免Counter组件不能及时地响应用户界面事件。</p><ul><li><p>程序目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">~/Android/packages/experimental/Counter</span><br><span class="line">----AndroidMainifest.xml</span><br><span class="line">----Android.mk</span><br><span class="line">----src</span><br><span class="line">    ----com/eightplus/counter</span><br><span class="line">        ----ICounterCallback.java</span><br><span class="line">        ----ICounterService.java</span><br><span class="line">        ----CounterService.java</span><br><span class="line">        ----Counter.java</span><br><span class="line">----res</span><br><span class="line">    ----layout</span><br><span class="line">        ----main.xml</span><br><span class="line">        ----sub.xml</span><br><span class="line">    ----values</span><br><span class="line">        ----strings.xml</span><br><span class="line">    ----drawable</span><br><span class="line">        ----icon.png</span><br></pre></td></tr></table></figure></li><li><p>ICounterCallback.java</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eightplus.counter</span><br><span class="line"></span><br><span class="line">publicd <span class="class"><span class="keyword">interface</span> <span class="title">ICounterCallback</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> val)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ICounterService.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eightplus.counter</span><br><span class="line"></span><br><span class="line">publicd <span class="class"><span class="keyword">interface</span> <span class="title">ICounterService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startCounter</span><span class="params">(<span class="keyword">int</span> initVal, ICounterCallback callback)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopCounter</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>CounterService.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eightplus.counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Service;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.os.AsyncTask;</span><br><span class="line"><span class="keyword">import</span> android.os.Binder;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterService</span> <span class="keyword">extends</span> <span class="title">Service</span> <span class="keyword">implements</span> <span class="title">ICounterService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String LOG_TAG = <span class="string">"com.eightplus.activity.CounterService"</span>;  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> bool stop = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">private</span> ICounterCallback counterCallback = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> IBinder binder = <span class="keyword">new</span> CounterBinder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CounterBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> CounterService <span class="title">getService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> CounterService.<span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> binder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate();</span><br><span class="line">        Log.i(LOG_TAG, <span class="string">"Counter Service Created."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">startCounter</span><span class="params">(<span class="keyword">int</span> initVal, ICounterCallback callback)</span> </span>&#123;</span><br><span class="line">        counterCallback = callback;</span><br><span class="line">        AsyncTask&lt;Integer, Integer, Integer&gt; task = <span class="keyword">new</span> AsyncTask&lt;Integer, Integer, Integer&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> Integer <span class="title">doInBackground</span><span class="params">(Integer... vals)</span> </span>&#123;</span><br><span class="line">                Integer initCounter = vals[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">                stop = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">while</span>(!stop) &#123;</span><br><span class="line">                    publishProcess(initCounter);</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    initCounter++;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> initCounter;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onProgressUpdate</span><span class="params">(Integer... values)</span> </span>&#123;</span><br><span class="line">                <span class="keyword">super</span>.onProgressUpdate(values);</span><br><span class="line">                <span class="keyword">int</span> val = values[<span class="number">0</span>];</span><br><span class="line">                counterCallback.count(val);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onPostExecute</span><span class="params">(Integer val)</span> </span>&#123;</span><br><span class="line">                counterCallback.count(val);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        task.execute(initVal);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stopCounter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        stop = <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Counter.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.eightplus.counter</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> android.app.Activity;</span><br><span class="line"><span class="keyword">import</span> android.content.ComponentName;</span><br><span class="line"><span class="keyword">import</span> android.content.Context;</span><br><span class="line"><span class="keyword">import</span> android.content.Intent;</span><br><span class="line"><span class="keyword">import</span> android.content.IntentFilter;</span><br><span class="line"><span class="keyword">import</span> android.content.ServiceConnection;</span><br><span class="line"><span class="keyword">import</span> android.os.Bundle;</span><br><span class="line"><span class="keyword">import</span> android.os.IBinder;</span><br><span class="line"><span class="keyword">import</span> android.util.Log;</span><br><span class="line"><span class="keyword">import</span> android.view.View;</span><br><span class="line"><span class="keyword">import</span> android.view.onClickListener;</span><br><span class="line"><span class="keyword">import</span> android.widget.Button;</span><br><span class="line"><span class="keyword">import</span> android.widget.TextView;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Counter</span> <span class="keyword">extends</span> <span class="title">Activity</span> <span class="keyword">implements</span> <span class="title">OnClickListener</span>, <span class="title">ICounterCallback</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String LOG_TAG = <span class="string">"com.eightplus.activity.Counter"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button startButton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> Button stopButton = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> TextView counterText = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ICounterService counterService = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.main);</span><br><span class="line"></span><br><span class="line">        startButton = (Button)findViewById(R.id.button_start);</span><br><span class="line">        stopButton = (Button)findViewById(R.id.button_stop);</span><br><span class="line">        counterText = (TextView)findViewById(R.id.textview_counter);</span><br><span class="line"></span><br><span class="line">        startButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        stopButton.setOnClickListener(<span class="keyword">this</span>);</span><br><span class="line">        startButton.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">        stopButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line">        Intent bindIntent = <span class="keyword">new</span> Intent(Counter.<span class="keyword">this</span>, CounterService.class);</span><br><span class="line">        bindService(bindIntent, serviceConnection, Context.BIND_AUTO_CREATE);</span><br><span class="line"></span><br><span class="line">        Log.i(LOG_TAG, <span class="string">"Counter Activity Created."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestory();</span><br><span class="line">        unbindService(serviceConnection);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(v.equals(startButton)) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (counterService != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    counterService.startCounter(<span class="number">0</span>, <span class="keyword">this</span>);</span><br><span class="line">                    startButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">                    stopButton.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(v.equals(stopButton)) &#123;  </span><br><span class="line">                <span class="keyword">if</span> (counterService != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    counterService.stopCounter();</span><br><span class="line">                    startButton.setEnabled(<span class="keyword">true</span>);</span><br><span class="line">                    stopButton.setEnabled(<span class="keyword">false</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">count</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">        String text = String.valueOf(val);</span><br><span class="line">        counterText.setText(text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> ServiceConnection serviceConnection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName className, IBinder service)</span> </span>&#123;</span><br><span class="line">        counterService = ((CounterService.CounterBinder)service).getService();</span><br><span class="line">        Log.i(LOG_TAG, <span class="string">"Counter Service Connected"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName className)</span> </span>&#123;</span><br><span class="line">        counterService = <span class="keyword">null</span>;</span><br><span class="line">        Log.i(LOG_TAG, <span class="string">"Counter Service DisConnected"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>main.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;  </span><br><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:orientation</span>=<span class="string">"vertical"</span>  </span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_marginBottom</span>=<span class="string">"10px"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_marginBottom</span>=<span class="string">"4px"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@string/counter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span> <span class="attr">android:id</span>=<span class="string">"@+id/textview_counter"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@string/init_counter"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">TextView</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">LinearLayout</span> <span class="attr">android:layout_width</span>=<span class="string">"fill_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:gravity</span>=<span class="string">"center"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/button_start"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@string/start"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">Button</span> <span class="attr">android:id</span>=<span class="string">"@+id/button_stop"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:text</span>=<span class="string">"@string/stop"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">Button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>strings.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"app_name"</span>&gt;</span>Counter<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"counter"</span>&gt;</span>Counter:<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"init_counter"</span>&gt;</span>0<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"start"</span>&gt;</span>Start Counter<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">string</span> <span class="attr">name</span>=<span class="string">"stop"</span>&gt;</span>Stop Counter<span class="tag">&lt;/<span class="name">string</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>icon.png为应用程序的图标</p></li><li><p>AndroidMainifest.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">manifest</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">package</span>=<span class="string">"com.eightplus.counter"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:versionCode</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:versionName</span>=<span class="string">"1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span> <span class="attr">android:icon</span>=<span class="string">"@drawable/icon"</span> <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".Counter"</span></span></span><br><span class="line"><span class="tag">              <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line">            &lt;intent-filter&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">service</span> <span class="attr">android:name</span>=<span class="string">".CounterService"</span></span></span><br><span class="line"><span class="tag">                  <span class="attr">android:enabled</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">service</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>Android.mk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH:= $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line">LOCAL_SRC_FILES := $(call all-subdir-java-files)</span><br><span class="line">LOCAL_PACKAGE_NAME := Counter</span><br><span class="line">include $(BUILD_PACKAGE)</span><br></pre></td></tr></table></figure></li><li><p>编译和打包</p></li></ul><ul><li>~/Android$ mmm ./packages/experimental/Counter/    </li><li>~/Android$ make snod</li></ul><ul><li>启动模拟器</li></ul><ul><li>~/Android$ emulator</li></ul>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在Android源码中编写C程序测试Linux内核驱动程序</title>
      <link href="/2018/08/06/2018-08-06-test-android-kernel-driver-program/"/>
      <url>/2018/08/06/2018-08-06-test-android-kernel-driver-program/</url>
      <content type="html"><![CDATA[<blockquote><p>在mydev的Linux内核驱动程序中，创建三个不同的文件节点来供用户空间访问，分别是传统的设备文件/dev/mydev、proc系统文件/proc/mydev和devfs系统属性文件/sys/class/mydev/mydev/val。这里通过编写的C可执行程序来访问设备文件/dev/mydev。<br><br></p></blockquote><hr><ul><li><p>驱动程序目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">~/Android</span><br><span class="line">----external</span><br><span class="line">    ----mydev</span><br><span class="line">        ----mydev.c</span><br><span class="line">        ----Android.mk</span><br></pre></td></tr></table></figure></li><li><p>使用Android模拟器加载包含这个Linux驱动程序的内核文件，并且使用adb shell命令连接上模拟，验证在/dev目录中存在设备文件mydev。</p></li><li><p>进入到Android源代码工程的external目录，创建mydev目录</p></li></ul><ul><li>~/Android$ cd external</li><li>~/Android/external$ mkdir mydev</li></ul><ul><li>在mydev目录中新建mydev.c文件<ul><li>打开/dev/mydev文件，然后先读出/dev/mydev文件中的值，接着写入值5到/dev/mydev中去，最后再次读出/dev/mydev文件中的值，看看是否是我们刚才写入的值5。从/dev/mydev文件读写的值实际上就是我们虚拟的硬件的寄存器val的值。</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DEVICE_NAME <span class="meta-string">"/dev/mydev"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fd = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line">    fd = open(DEVICE_NAME, O_RDWR);</span><br><span class="line">    <span class="keyword">if</span>(fd == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Failed to open device %s.\n"</span>, DEVICE_NAME);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Read original value:\n"</span>);</span><br><span class="line">    read(fd, &amp;val, <span class="keyword">sizeof</span>(val));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d.\n\n"</span>, val);</span><br><span class="line"></span><br><span class="line">    val = <span class="number">5</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Write value %d to %s.\n\n"</span>, val, DEVICE_NAME);</span><br><span class="line">    write(fd, &amp;val, <span class="keyword">sizeof</span>(val));</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Read the value again:\n"</span>);</span><br><span class="line">    read(fd, &amp;val, <span class="keyword">sizeof</span>(val));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d.\n\n"</span>, val);</span><br><span class="line"></span><br><span class="line">    close(fd);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>在mydev目录中新建Android.mk文件，其中“BUILD_EXECUTABLE”表示编译的是可执行程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">LOCAL_PATH := $(call my-dir)</span><br><span class="line">include $(CLEAR_VARS)</span><br><span class="line">LOCAL_MODULE_TAGS := optional</span><br><span class="line">LOCAL_MODULE := mydev</span><br><span class="line">LOCAL_SRC_FILES := $(call all-subdir-c-files)</span><br><span class="line">include $(BUILD_EXECUTABLE)</span><br></pre></td></tr></table></figure></li><li><p>使用mmm命令进行编译</p></li></ul><ul><li>~/Android$ mmm ./external/mydev<br>若编译成功，则可以在out/target/product/gerneric/system/bin目录下看到可执行文件mydev。</li></ul><ul><li>重新打包Android系统文件system.img，重新打包后的system.img文件包含了刚才编译好的mydev可执行文件。</li></ul><ul><li>~/Android$ make snod</li></ul><ul><li>运行模拟器，使用/system/bin/mydev可执行程序来访问Linux内核驱动程序</li></ul><ul><li>~/Android$ emulator -kernel ./kernel/goldfish/arch/arm/boot/zImage &amp;</li><li>~/Android$ adb shell</li><li>root@android:/ # cd system/bin</li><li>root@android:/system/bin # ./mydev<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Read the original value:</span><br><span class="line">0.</span><br><span class="line">Write value 5 to /dev/mydev.</span><br><span class="line">Read the value again:</span><br><span class="line">5.</span><br></pre></td></tr></table></figure></li></ul>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>为Android系统编写Linux内核驱动程序</title>
      <link href="/2018/08/02/2018-08-02-android-kernel-driver/"/>
      <url>/2018/08/02/2018-08-02-android-kernel-driver/</url>
      <content type="html"><![CDATA[<blockquote><p>这里使用一个虚拟的硬件设备，这个设备只有一个4字节的寄存器，它可读可写。这里把这个虚拟的设备命名为“mydev”，而这个内核驱动程序也命名为mydev驱动程序。<br><br><br>这里通过cat命令直接访问/proc/mydev和/sys/class/mydev/mydev/val文件验证驱动程序的正确性。<br><br></p></blockquote><hr><ul><li><p>驱动程序目录结构如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">~/Android/kernel/goldfish</span><br><span class="line">----drivers</span><br><span class="line">    ----mydev</span><br><span class="line">        ----mydev.h</span><br><span class="line">        ----mydev.c</span><br><span class="line">        ----Kconfig</span><br><span class="line">        ----Makefile</span><br></pre></td></tr></table></figure></li><li><p>新建mydev目录</p></li></ul><ul><li>~/Android$ cd kernel/goldfish/drivers</li><li>~/Android/kernel/goldfish/drivers$ mkdir mydev</li></ul><ul><li>在mydev目录中增加mydev.h文件</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _MYDEV_ANDROID_H_</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _MYDEV_ANDROID_Hpp</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/cdev.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/semaphore.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYDEV_DEVICE_NODE_NAME  <span class="meta-string">"helmydevlo"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYDEV_DEVICE_FILE_NAME  <span class="meta-string">"mydev"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYDEV_DEVICE_PROC_NAME  <span class="meta-string">"mydev"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYDEV_DEVICE_CLASS_NAME <span class="meta-string">"mydev"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//字符设备结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mydev_android_dev</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;<span class="comment">//寄存器</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">semaphore</span> <span class="title">sem</span>;</span><span class="comment">//信号量</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">cdev</span> <span class="title">dev</span>;</span><span class="comment">//内嵌的字符设备</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><ul><li><p>在mydev目录中增加mydev.c文件，这是驱动程序的实现部分。<br>驱动程序的功能主要是向上层提供访问设备的寄存器的值，包括读和写。这里，提供了三种访问设备寄存器的方法，一是通过proc文件系统来访问，二是通过传统的设备文件的方法来访问，三是通过devfs文件系统来访问。下面分段描述该驱动程序的实现。</p><ul><li>首先是包含必要的头文件和定义三种访问设备的方法：</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/init.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/module.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/proc_fs.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;linux/device.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;asm/uaccess.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mydev.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*主设备和从设备号变量*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> mydev_major = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> mydev_minor = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设备类别和设备变量*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">class</span>* <span class="title">mydev_class</span> = <span class="title">NULL</span>;</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">mydev_android_dev</span>* <span class="title">mydev_dev</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*传统的设备文件操作方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mydev_open</span><span class="params">(struct inode* inode, struct file* filp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mydev_release</span><span class="params">(struct inode* inode, struct file* filp)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_read</span><span class="params">(struct file* filp, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span>* f_pos)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_write</span><span class="params">(struct file* filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span>* f_pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**传统的设备文件操作方法表*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">file_operations</span> <span class="title">mydev_fops</span> = &#123;</span></span><br><span class="line">    .owner = THIS_MODULE,</span><br><span class="line">    .open = mydev_open,</span><br><span class="line">    .release = mydev_release,</span><br><span class="line">    .read = mydev_read,</span><br><span class="line">    .write = mydev_write,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*devfs文件系统的设备属性操作方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_val_show</span><span class="params">(struct device* dev, struct device_attribute* attr,  <span class="keyword">char</span>* buf)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_val_store</span><span class="params">(struct device* dev, struct device_attribute* attr, <span class="keyword">const</span> <span class="keyword">char</span>* buf, <span class="keyword">size_t</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*devfs文件系统的设备属性*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">DEVICE_ATTR</span><span class="params">(val, S_IRUGO | S_IWUSR, mydev_val_show, mydev_val_store)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义传统的设备文件访问方法，主要是定义mydev_open、mydev_release、mydev_read和mydev_write这四个打开、释放、读和写设备文件的方法：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*打开设备方法*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mydev_open</span><span class="params">(struct inode* inode, struct file* filp)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mydev_android_dev</span>* <span class="title">dev</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将自定义设备结构体保存在文件指针的私有数据域中，以便访问设备时拿来用*/</span></span><br><span class="line">    dev = container_of(inode-&gt;i_cdev, struct mydev_android_dev, dev);</span><br><span class="line">    filp-&gt;private_data = dev;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*设备文件释放时调用，空实现*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">mydev_release</span><span class="params">(struct inode* inode, struct file* filp)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取设备的寄存器val的值*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_read</span><span class="params">(struct file* filp, <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span>* f_pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">ssize_t</span> err = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mydev_android_dev</span>* <span class="title">dev</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*同步访问*/</span></span><br><span class="line">    <span class="keyword">if</span>(down_interruptible(&amp;(dev-&gt;sem))) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(count &lt; <span class="keyword">sizeof</span>(dev-&gt;val)) &#123;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将寄存器val的值拷贝到用户提供的缓冲区*/</span></span><br><span class="line">    <span class="keyword">if</span>(copy_to_user(buf, &amp;(dev-&gt;val), <span class="keyword">sizeof</span>(dev-&gt;val))) &#123;</span><br><span class="line">        err = -EFAULT;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = <span class="keyword">sizeof</span>(dev-&gt;val);</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    up(&amp;(dev-&gt;sem));</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*写设备的寄存器值val*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_write</span><span class="params">(struct file* filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buf, <span class="keyword">size_t</span> count, <span class="keyword">loff_t</span>* f_pos)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mydev_android_dev</span>* <span class="title">dev</span> = <span class="title">filp</span>-&gt;<span class="title">private_data</span>;</span></span><br><span class="line">    <span class="keyword">ssize_t</span> err = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*同步访问*/</span></span><br><span class="line">    <span class="keyword">if</span>(down_interruptible(&amp;(dev-&gt;sem))) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(count != <span class="keyword">sizeof</span>(dev-&gt;val)) &#123;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将用户提供的缓冲区的值写到设备寄存器去*/</span></span><br><span class="line">    <span class="keyword">if</span>(copy_from_user(&amp;(dev-&gt;val), buf, count)) &#123;</span><br><span class="line">        err = -EFAULT;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = <span class="keyword">sizeof</span>(dev-&gt;val);</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    up(&amp;(dev-&gt;sem));</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义通过devfs文件系统访问方法，这里把设备的寄存器val看成是设备的一个属性，通过读写这个属性来对设备进行访问，主要是实现mydev_val_show和mydev_val_store两个方法，同时定义了两个内部使用的访问val值的方法__mydev_get_val和__mydev_set_val：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取寄存器val的值到缓冲区buf中，内部使用*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ssize_t</span> __mydev_get_val(struct mydev_android_dev* dev, <span class="keyword">char</span>* buf) &#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*同步访问*/</span></span><br><span class="line">    <span class="keyword">if</span>(down_interruptible(&amp;(dev-&gt;sem))) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    val = dev-&gt;val;</span><br><span class="line">    up(&amp;(dev-&gt;sem));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">snprintf</span>(buf, PAGE_SIZE, <span class="string">"%d\n"</span>, val);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*把缓冲区buf的值写到设备寄存器val中去，内部使用*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">ssize_t</span> __mydev_set_val(struct mydev_android_dev* dev, <span class="keyword">const</span> <span class="keyword">char</span>* buf, <span class="keyword">size_t</span> count) &#123;</span><br><span class="line">    <span class="keyword">int</span> val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*将字符串转换成数字*/</span></span><br><span class="line">    val = simple_strtol(buf, <span class="literal">NULL</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*同步访问*/</span></span><br><span class="line">    <span class="keyword">if</span>(down_interruptible(&amp;(dev-&gt;sem))) &#123;</span><br><span class="line">        <span class="keyword">return</span> -ERESTARTSYS;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dev-&gt;val = val;</span><br><span class="line">    up(&amp;(dev-&gt;sem));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取设备属性val*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_val_show</span><span class="params">(struct device* dev, struct device_attribute* attr, <span class="keyword">char</span>* buf)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mydev_android_dev</span>* <span class="title">hdev</span> = (<span class="title">struct</span> <span class="title">mydev_android_dev</span>*)<span class="title">dev_get_drvdata</span>(<span class="title">dev</span>);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> __mydev_get_val(hdev, buf);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*写设备属性val*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_val_store</span><span class="params">(struct device* dev, struct device_attribute* attr, <span class="keyword">const</span> <span class="keyword">char</span>* buf, <span class="keyword">size_t</span> count)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">mydev_android_dev</span>* <span class="title">hdev</span> = (<span class="title">struct</span> <span class="title">mydev_android_dev</span>*)<span class="title">dev_get_drvdata</span>(<span class="title">dev</span>);</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> __mydev_set_val(hdev, buf, count);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义通过proc文件系统访问方法，主要实现了mydev_proc_read和mydev_proc_write两个方法，同时定义了在proc文件系统创建和删除文件的方法mydev_create_proc和mydev_remove_proc：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*读取设备寄存器val的值，保存在page缓冲区中*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_proc_read</span><span class="params">(<span class="keyword">char</span>* page, <span class="keyword">char</span>** start, <span class="keyword">off_t</span> off, <span class="keyword">int</span> count, <span class="keyword">int</span>* eof, <span class="keyword">void</span>* data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(off &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        *eof = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> __mydev_get_val(mydev_dev, page);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*把缓冲区的值buff保存到设备寄存器val中去*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ssize_t <span class="title">mydev_proc_write</span><span class="params">(struct file* filp, <span class="keyword">const</span> <span class="keyword">char</span> __user *buff, <span class="keyword">unsigned</span> <span class="keyword">long</span> len, <span class="keyword">void</span>* data)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> err = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>* page = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(len &gt; PAGE_SIZE) &#123;</span><br><span class="line">        printk(KERN_ALERT<span class="string">"The buff is too large: %lu.\n"</span>, len);</span><br><span class="line">        <span class="keyword">return</span> -EFAULT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    page = (<span class="keyword">char</span>*)__get_free_page(GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span>(!page) &#123;</span><br><span class="line">            printk(KERN_ALERT<span class="string">"Failed to alloc page.\n"</span>);</span><br><span class="line">            <span class="keyword">return</span> -ENOMEM;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*先把用户提供的缓冲区值拷贝到内核缓冲区中去*/</span></span><br><span class="line">    <span class="keyword">if</span>(copy_from_user(page, buff, len)) &#123;</span><br><span class="line">        printk(KERN_ALERT<span class="string">"Failed to copy buff from user.\n"</span>);</span><br><span class="line">        err = -EFAULT;</span><br><span class="line">        <span class="keyword">goto</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    err = __mydev_set_val(mydev_dev, page, len);</span><br><span class="line"></span><br><span class="line">out:</span><br><span class="line">    free_page((<span class="keyword">unsigned</span> <span class="keyword">long</span>)page);</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*创建/proc/mydev文件*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mydev_create_proc</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">proc_dir_entry</span>* <span class="title">entry</span>;</span></span><br><span class="line"></span><br><span class="line">    entry = create_proc_entry(MYDEV_DEVICE_PROC_NAME, <span class="number">0</span>, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="keyword">if</span>(entry) &#123;</span><br><span class="line">        entry-&gt;owner = THIS_MODULE;</span><br><span class="line">        entry-&gt;read_proc = mydev_proc_read;</span><br><span class="line">        entry-&gt;write_proc = mydev_proc_write;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*删除/proc/mydev文件*/</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mydev_remove_proc</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    remove_proc_entry(MYDEV_DEVICE_PROC_NAME, <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后，定义模块加载和卸载方法，这里只要是执行设备注册和初始化操作：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*初始化设备*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span>  __mydev_setup_dev(struct mydev_android_dev* dev) &#123;</span><br><span class="line">    <span class="keyword">int</span> err;</span><br><span class="line">    <span class="keyword">dev_t</span> devno = MKDEV(mydev_major, mydev_minor);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(dev, <span class="number">0</span>, <span class="keyword">sizeof</span>(struct mydev_android_dev));</span><br><span class="line"></span><br><span class="line">    cdev_init(&amp;(dev-&gt;dev), &amp;mydev_fops);</span><br><span class="line">    dev-&gt;dev.owner = THIS_MODULE;</span><br><span class="line">    dev-&gt;dev.ops = &amp;mydev_fops;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*注册字符设备*/</span></span><br><span class="line">    err = cdev_add(&amp;(dev-&gt;dev),devno, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        <span class="keyword">return</span> err;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*初始化信号量和寄存器val的值*/</span></span><br><span class="line">    init_MUTEX(&amp;(dev-&gt;sem));</span><br><span class="line">    dev-&gt;val = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*模块加载方法*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> __<span class="function">init <span class="title">mydev_init</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> err = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">dev_t</span> dev = <span class="number">0</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">device</span>* <span class="title">temp</span> = <span class="title">NULL</span>;</span></span><br><span class="line"></span><br><span class="line">    printk(KERN_ALERT<span class="string">"Initializing mydev device.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*动态分配主设备和从设备号*/</span></span><br><span class="line">    err = alloc_chrdev_region(&amp;dev, <span class="number">0</span>, <span class="number">1</span>, MYDEV_DEVICE_NODE_NAME);</span><br><span class="line">    <span class="keyword">if</span>(err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(KERN_ALERT<span class="string">"Failed to alloc char dev region.\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> fail;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    mydev_major = MAJOR(dev);</span><br><span class="line">    mydev_minor = MINOR(dev);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*分配helo设备结构体变量*/</span></span><br><span class="line">    mydev_dev = kmalloc(<span class="keyword">sizeof</span>(struct mydev_android_dev), GFP_KERNEL);</span><br><span class="line">    <span class="keyword">if</span>(!mydev_dev) &#123;</span><br><span class="line">        err = -ENOMEM;</span><br><span class="line">        printk(KERN_ALERT<span class="string">"Failed to alloc mydev_dev.\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> unregister;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*初始化设备*/</span></span><br><span class="line">    err = __mydev_setup_dev(mydev_dev);</span><br><span class="line">    <span class="keyword">if</span>(err) &#123;</span><br><span class="line">        printk(KERN_ALERT<span class="string">"Failed to setup dev: %d.\n"</span>, err);</span><br><span class="line">        <span class="keyword">goto</span> cleanup;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*在/sys/class/目录下创建设备类别目录mydev*/</span></span><br><span class="line">    mydev_class = class_create(THIS_MODULE, MYDEV_DEVICE_CLASS_NAME);</span><br><span class="line">    <span class="keyword">if</span>(IS_ERR(mydev_class)) &#123;</span><br><span class="line">        err = PTR_ERR(mydev_class);</span><br><span class="line">        printk(KERN_ALERT<span class="string">"Failed to create mydev class.\n"</span>);</span><br><span class="line">        <span class="keyword">goto</span> destroy_cdev;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*在/dev/目录和/sys/class/mydev目录下分别创建设备文件mydev*/</span></span><br><span class="line">    temp = device_create(mydev_class, <span class="literal">NULL</span>, dev, <span class="string">"%s"</span>, MYDEV_DEVICE_FILE_NAME);</span><br><span class="line">    <span class="keyword">if</span>(IS_ERR(temp)) &#123;</span><br><span class="line">        err = PTR_ERR(temp);</span><br><span class="line">        printk(KERN_ALERT<span class="string">"Failed to create mydev device."</span>);</span><br><span class="line">        <span class="keyword">goto</span> destroy_class;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*在/sys/class/mydev/mydev目录下创建属性文件val*/</span></span><br><span class="line">    err = device_create_file(temp, &amp;dev_attr_val);</span><br><span class="line">    <span class="keyword">if</span>(err &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        printk(KERN_ALERT<span class="string">"Failed to create attribute val."</span>);</span><br><span class="line">        <span class="keyword">goto</span> destroy_device;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dev_set_drvdata(temp, mydev_dev);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*创建/proc/mydev文件*/</span></span><br><span class="line">    mydev_create_proc();</span><br><span class="line"></span><br><span class="line">    printk(KERN_ALERT<span class="string">"Succedded to initialize mydev device.\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">destroy_device:</span><br><span class="line">    device_destroy(mydev_class, dev);</span><br><span class="line"></span><br><span class="line">destroy_class:</span><br><span class="line">    class_destroy(mydev_class);</span><br><span class="line"></span><br><span class="line">destroy_cdev:</span><br><span class="line">    cdev_del(&amp;(mydev_dev-&gt;dev));</span><br><span class="line"></span><br><span class="line">cleanup:</span><br><span class="line">    kfree(mydev_dev);</span><br><span class="line"></span><br><span class="line">unregister:</span><br><span class="line">    unregister_chrdev_region(MKDEV(mydev_major, mydev_minor), <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">fail:</span><br><span class="line">    <span class="keyword">return</span> err;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*模块卸载方法*/</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> __<span class="function"><span class="built_in">exit</span> <span class="title">mydev_exit</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">dev_t</span> devno = MKDEV(mydev_major, mydev_minor);</span><br><span class="line"></span><br><span class="line">    printk(KERN_ALERT<span class="string">"Destroy mydev device.\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除/proc/mydev文件*/</span></span><br><span class="line">    mydev_remove_proc();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*销毁设备类别和设备*/</span></span><br><span class="line">    <span class="keyword">if</span>(mydev_class) &#123;</span><br><span class="line">        device_destroy(mydev_class, MKDEV(mydev_major, mydev_minor));</span><br><span class="line">        class_destroy(mydev_class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*删除字符设备和释放设备内存*/</span></span><br><span class="line">    <span class="keyword">if</span>(mydev_dev) &#123;</span><br><span class="line">        cdev_del(&amp;(mydev_dev-&gt;dev));</span><br><span class="line">        kfree(mydev_dev);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*释放设备号*/</span></span><br><span class="line">    unregister_chrdev_region(devno, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MODULE_LICENSE(<span class="string">"GPL"</span>);</span><br><span class="line">MODULE_DESCRIPTION(<span class="string">"Fake Register Android Driver"</span>);</span><br><span class="line"></span><br><span class="line">module_init(mydev_init);</span><br><span class="line">module_exit(mydev_exit);</span><br></pre></td></tr></table></figure><ul><li><p>在mydev目录中新增Kconfig和Makefile两个文件，其中Kconfig是在编译前执行配置命令make menuconfig时用到的，而Makefile是执行编译命令make是用到的</p><blockquote><p>在Kconfig文件中，tristate表示编译选项MYDEV支持在编译内核时，mydev模块支持以模块、内建和不编译三种编译方法，默认是不编译，因此，在编译内核前，我们还需要执行make menuconfig命令来配置编译选项，使得mydev可以以模块或者内建的方法进行编译。<br>在Makefile文件中，根据选项MYDEV的值，执行不同的编译方法。</p><ul><li>Kconfig文件的内容(默认的编译方式为n，即不编译到内核中，故在编译驱动程序之前，需要执行make menuconfig命令来修改编译选项)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">config MYDEV</span><br><span class="line">tristate &quot;Fake Register Android Driver&quot;</span><br><span class="line">default n</span><br><span class="line">help</span><br><span class="line">This is the mydev driver for android system.</span><br></pre></td></tr></table></figure></li></ul></blockquote><ul><li>Makefile<figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj-<span class="variable">$(CONFIG_MYDEV)</span> += mydev.o</span><br></pre></td></tr></table></figure></li></ul></li><li><p>修改内核Kconfig文件</p><ul><li>打开arch/arm/Kconfig文件，找到以下两行内容<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">menu &quot;Device Drivers&quot;</span><br><span class="line">......</span><br><span class="line">endmenu</span><br></pre></td></tr></table></figure></li></ul></li></ul><p>在这两行内容之间添加下面一行内容，将驱动程序mydev和Kconfig文件包含尽量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">menu &quot;Device Drivers&quot;</span><br><span class="line">source &quot;drivers/mydev/Kconfig&quot;</span><br><span class="line">......</span><br><span class="line">endmenu</span><br></pre></td></tr></table></figure></p><p>这样，执行make menuconfig时，就可以配置mydev模块的编译选项了。</p><pre><code>- 打开drivers/Kconfig，和arch/arm/Kconfig一样，增加一行内容：source &quot;drivers/mydev/Kconfig&quot;</code></pre><ul><li><p>修改drivers/Makefile文件，添加一行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">obj-$(CONFIG_MYDEV) += mydev/</span><br></pre></td></tr></table></figure></li><li><p>配置编译选项：</p></li></ul><ul><li>~/Android/kernel/goldfish$ make menuconfig<br>找到”Device Drivers” =&gt; “Fake Register Android Drivers”选项，设置为y。<blockquote><p>注意，如果内核不支持动态加载模块，这里不能选择m，虽然我们在Kconfig文件中配置了MYDEV选项为tristate。要支持动态加载模块选项，必须要在配置菜单中选择Enable loadable module support选项；在支持动态卸载模块选项，必须要在Enable loadable module support菜单项中，选择Module unloading选项。</p></blockquote></li></ul><ul><li>编译：</li></ul><ul><li>~/Android/kernel/goldfish$ make<br>编译成功后，就可以在mydev目录下看到mydev.o文件了，这时候编译出来的zImage已经包含了mydev驱动。</li></ul><p>运行新编译的内核文件，验证mydev驱动程序是否已经正常安装</p><ul><li>~/Android$ emulator -kernel ./kernel/goldfish/arch/arm/boot/zImage &amp;</li><li>~/Android$ adb shell</li></ul><p>进入到dev目录，可以看到mydev设备文件</p><ul><li>root@android:/ # cd dev</li><li>root@android:/dev # ls</li></ul><p>进入到proc目录，可以看到mydev文件：</p><ul><li>root@android:/ # cd proc</li><li>root@android:/proc # ls</li></ul><p>访问mydev文件的值</p><ul><li>root@android:/proc # cat mydev<br>0</li><li>root@android:/proc # echo ‘5’ &gt; mydev</li><li>root@android:/proc # cat mydev<br>5</li></ul><p>进入到sys/class目录，可以看到mydev目录：</p><ul><li>root@android:/ # cd sys/class</li><li>root@android:/sys/class # ls</li></ul><p>进入到mydev目录，可以看到mydev目录：</p><ul><li>root@android:/sys/class # cd mydev</li><li>root@android:/sys/class/mydev # ls</li></ul><p>进入到下一层mydev目录，可以看到val文件</p><ul><li>root@android:/sys/class/mydev # cd mydev</li><li>root@android:/sys/class/mydev/mydev # ls</li></ul><p>访问属性文件val的值</p><ul><li>root@android:/sys/class/mydev/mydev # cat val<br>5</li><li>root@android:/sys/class/mydev/mydev # echo ‘0’  &gt; val</li><li>root@android:/sys/class/mydev/mydev # cat val<br>0</li></ul><p>至此，mydev内核驱动程序就完成了。这里采用的是系统提供的方法和驱动程序进行交互，也就是通过proc文件系统和devfs文件系统的方法。</p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo</title>
      <link href="/2018/07/10/2018-07-10-hexo/"/>
      <url>/2018/07/10/2018-07-10-hexo/</url>
      <content type="html"><![CDATA[<blockquote><p>hexo是一款基于Node.js的静态博客框架，可以方便的生成静态网页托管在github上。<br><br></p></blockquote><hr><h2 id="依赖包和工具安装"><a href="#依赖包和工具安装" class="headerlink" title="依赖包和工具安装"></a>依赖包和工具安装</h2><ul><li>Git<ul><li><code>sudo apt-get install git</code>  (git-core)</li><li><code>git --version</code></li><li>生成 SSH key : <code>ssh-keygen -t rsa -C &quot;349098792@qq.com&quot;</code><br><img src="/2018/07/10/2018-07-10-hexo/01.png" alt=""></li></ul></li></ul><blockquote><p>默认情况下连续按下三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub。如果是想一台电脑配置两个或多个github帐号，则此处不能够一直回车，要注意在提示输入文件名称时输入一个和默认名称不一样的名称，否则会发生覆盖，比如这里我电脑上使用两个github帐号，新建的一个名为yudianr，则可以给文件取名叫id_rsa_yudianr，则会在当前文件夹中生成id_rsa_yudianr和id_rsa_yudianr.pub两个文件。<br><br><br>在GitHub帐号设置那里添加SSH Key，打开公钥文件id_rsa_yudianr.pub，复制里面的所有字符粘贴到github的SSH设置处，可使用ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>来测试是否关联成功。<br><br></p></blockquote><p><img src="/2018/07/10/2018-07-10-hexo/02.png" alt=""><br><img src="/2018/07/10/2018-07-10-hexo/03.png" alt=""></p><pre><code>- 配置~/.ssh/config文件</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">    #老帐号</span><br><span class="line">    Host github.com</span><br><span class="line">        HostName github.com</span><br><span class="line">        PreferredAuthentications publickey</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">    #新帐号</span><br><span class="line">    Host yudianr.github.com</span><br><span class="line">        HostName github.com</span><br><span class="line">        PreferredAuthentications publickey</span><br><span class="line">        IdentityFile ~/.ssh/id_rsa_yudianr</span><br><span class="line"></span><br><span class="line">注意：此时提交代码后log中记录的用户名和邮箱信息都为全局配置的git帐号的信息，如果希望修改显示的信息，可以在项目目录中使用以下命令进行配置：</span><br><span class="line">git config --global user.name &quot;你的昵称&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱地址&quot;</span><br><span class="line">或者vim .gitconfig直接进行修改</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">    name = eightplus</span><br><span class="line">    email = kobe24_lixiang@126.com</span><br><span class="line">或者</span><br><span class="line">[user]</span><br><span class="line">    name = yudianr</span><br><span class="line">    email = 349098792@qq.com</span><br></pre></td></tr></table></figure><ul><li><p>npm</p><ul><li>sudo apt-get install npm</li><li>npm -v</li></ul></li><li><p>Nodejs</p><ul><li>sudo apt-get install nodejs</li><li>node -v</li></ul></li><li><p>Hexo</p><ul><li>sudo npm install -g hexo-cli</li><li>hexo -v</li></ul></li></ul><h2 id="初始化Hexo"><a href="#初始化Hexo" class="headerlink" title="初始化Hexo"></a>初始化Hexo</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line">cd &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p><img src="/2018/07/10/2018-07-10-hexo/04.png" alt=""></p><h2 id="自动部署发布工具-hexo-deployer-git"><a href="#自动部署发布工具-hexo-deployer-git" class="headerlink" title="自动部署发布工具 hexo-deployer-git"></a>自动部署发布工具 hexo-deployer-git</h2><ul><li><p>npm i hexo-generator-json-content –save (在上面初始化后的folder目录下打开终端执行，执行后会写入package.json文件中)</p></li><li><p>其他插件安装</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-helper-qrcode --save</span><br><span class="line">npm i hexo-generator-sitemap --save</span><br><span class="line">npm i hexo-generator-json-feed --save</span><br><span class="line">npm i hexo-generator-feed --save</span><br><span class="line">npm i hexo-generator-baidu-sitemap --save</span><br><span class="line">npm i hexo-deployer-rsync --save</span><br></pre></td></tr></table></figure><ul><li><p>提交搜素引擎</p><blockquote><p>站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。<br><br><br>百度站长平台为未使用百度统计的站点提供三种验证方式：文件验证、html标签验证、CNAME验证，如果选择文件验证，下载文件后将文件放在source跟目录下。<br><br><br>验证完成后，我们将会认为您是网站的拥有者。为使您的网站一直保持验证通过的状态，请保留验证的文件、html标签或CNAME记录，我们会去定期检查验证记录。<br><br></p></blockquote><ul><li><p>对谷歌和百度的插举例-&gt;打开博客根目录，在这个目录下打开终端执行执行如下两个安装插件：<br><code>npm install hexo-generator-sitemap --save</code><br><code>npm install hexo-generator-baidu-sitemap --save</code></p></li><li><p>在博客根目录的_config.yml中添加如下代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 自动生成sitemap</span><br><span class="line">sitemap:</span><br><span class="line">    path: sitemap.xml</span><br><span class="line">baidusitemap:</span><br><span class="line">    path: baidusitemap.xml</span><br></pre></td></tr></table></figure></li><li><p>执行hexo generate编译博客后，如果博客根目录的public下生成了sitemap.xml以及baidusitemap.xml就表示成功了。</p></li></ul></li></ul><h2 id="生成静态文件"><a href="#生成静态文件" class="headerlink" title="生成静态文件"></a>生成静态文件</h2><ul><li>hexo generate<br><img src="/2018/07/10/2018-07-10-hexo/05.png" alt=""></li></ul><h2 id="生成静态文件查看默认博客效果"><a href="#生成静态文件查看默认博客效果" class="headerlink" title="生成静态文件查看默认博客效果"></a>生成静态文件查看默认博客效果</h2><ul><li>hexo server  （如果默认的4000端口被占用，可以使用-p参数指定其他端口，如：hexo server -p 5000）<br><img src="/2018/07/10/2018-07-10-hexo/06.png" alt=""></li></ul><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><ul><li>在站点的配置文件_config.yml中设置部署信息(注意：type repo branch message前有两个空格)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/eightplus/eightplus.github.io.git</span><br><span class="line">  branch: master</span><br><span class="line">  message: &apos;站点更新:&#123;&#123;now(&quot;YYYY-MM-DD HH:mm:ss&quot;)&#125;&#125;&apos;</span><br></pre></td></tr></table></figure></li></ul><h2 id="部署到GitHub上"><a href="#部署到GitHub上" class="headerlink" title="部署到GitHub上"></a>部署到GitHub上</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hexo clean    #清空</span><br><span class="line">hexo generate #生成静态网页</span><br><span class="line">hexo deploy   #部署</span><br><span class="line"></span><br><span class="line">浏览器中输入 http://eightplus.github.io</span><br></pre></td></tr></table></figure><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><ul><li>在hexo的工作空间下的source目录下新建一个CNAME的文件，不要后缀。打开CNAME写上购买的域名，如： <a href="eightplus.info">eightplus.info</a></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li><p>网站访问量显示</p><ul><li>使用第三方的统计插件<a href="http://ibruce.info/2015/04/04/busuanzi/" target="_blank" rel="noopener">不蒜子</a>, 在themes\yilia\layout_partial下的footer.ejs中加入如下代码即可<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt;</span><br><span class="line">  本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;</span><br><span class="line">总访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次</span><br><span class="line">&lt;/span&gt;</span><br></pre></td></tr></table></figure></li></ul></li><li><p>实现单篇文章浏览统计和评论统计(从网易云跟帖中获取评论数) <a href="http://lawlite.me/2017/04/10/Hexo-Github%E6%90%AD%E5%BB%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/" target="_blank" rel="noopener">参考文档</a></p><ul><li>修改themes\yilia\layout_partial文件夹下的article.ejs文件，在&lt;%- partial(‘post/title’, {class_name: ‘article-title’}) %&gt;节点下加入(注意这里网易云跟帖还没设置，而评论数中使用到了，这里运行会有问题)<figure class="highlight plain"><figcaption><span>显示阅读和评论数 --></span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.wangYi)&#123; %&gt;</span><br><span class="line">&lt;br/&gt;</span><br><span class="line">&lt;a class=&quot;cloud-tie-join-count&quot; href=&quot;javascript:void(0);&quot; style=&quot;color:gray;font-size:14px;&quot;&gt;</span><br><span class="line">&lt;span class=&quot;icon-sort&quot;&gt;&lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;busuanzi_container_page_pv&quot; style=&quot;color:#ef7522;font-size:14px;&quot;&gt;</span><br><span class="line">    阅读数: &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次 &amp;nbsp;&amp;nbsp;</span><br><span class="line">&lt;/span&gt;</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;a class=&quot;cloud-tie-join-count&quot; href=&quot;javascript:void(0);&quot; style=&quot;color:#ef7522;font-size:14px;&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;icon-comment&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;join-text&quot; style=&quot;color:#ef7522;font-size:14px;&quot;&gt;评论数:&lt;/span&gt;</span><br><span class="line">    &lt;span class=&quot;join-count&quot;&gt;0&lt;/span&gt;次</span><br><span class="line">&lt;/a&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Ubuntu下Android开发的基础知识</title>
      <link href="/2018/07/03/2018-07-03-build-android/"/>
      <url>/2018/07/03/2018-07-03-build-android/</url>
      <content type="html"><![CDATA[<blockquote><p>这里使用Ubuntu 16.04的64位系统上进行Android源码的编译。<br><br></p></blockquote><hr><h2 id="一、环境准备"><a href="#一、环境准备" class="headerlink" title="一、环境准备"></a>一、环境准备</h2><ol><li>安装ubuntu 16.04 amd64 系统</li><li>安装Git</li></ol><ul><li>~$ sudo apt-get install git-core gnupg</li></ul><ol start="3"><li>安装Java SDK(官方JDK下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html)：" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/index.html)：</a></li></ol><ul><li>$ sudo add-apt-repository “deb <a href="http://us.archive.ubuntu.com/ubuntu/" target="_blank" rel="noopener">http://us.archive.ubuntu.com/ubuntu/</a> hardy multiverse”</li><li>$ sudo apt-get update</li><li>$ sudo apt-get install sun-java6-jre sun-java6-plugin</li><li>$ sudo apt-get install sun-java6-jdk</li></ul><ol start="4"><li>安装其他依赖包(valgrind为调试工具)</li></ol><ul><li>$ sudo apt-get install flex bison gperf libsdl-dev libesd0-dev libwxgtk2.6-dev build-essential zip curl valgrind</li></ul><h2 id="二、下载Android源码"><a href="#二、下载Android源码" class="headerlink" title="二、下载Android源码"></a>二、下载Android源码</h2><ol><li>下载repo工具</li></ol><ul><li>$ wget <a href="https://dl-ssl.google.com/dl/googlesource/git-repo/repo" target="_blank" rel="noopener">https://dl-ssl.google.com/dl/googlesource/git-repo/repo</a></li><li>$ chmod a+x repo</li><li>$ sudo mv repo /bin/</li></ul><ol start="2"><li>下载Android源码</li></ol><ul><li>$ mkdir Android</li><li>$ cd Android</li><li>Android$ repo init -u <a href="https://android.googlesource.com/platform/mainifest" target="_blank" rel="noopener">https://android.googlesource.com/platform/mainifest</a>(如果想下载Android 2.3.1，执行：repo init -u <a href="https://android.googlesource.com/platform/mainifest" target="_blank" rel="noopener">https://android.googlesource.com/platform/mainifest</a> -b android-2.3.1_r1)</li><li>Android$ repo sync</li></ul><h2 id="三、编译Android源码"><a href="#三、编译Android源码" class="headerlink" title="三、编译Android源码"></a>三、编译Android源码</h2><ul><li>Android$make (make -j18)<br>编译结果的输出目录为out/target/product/$(TARGET_PRODUCT),TARGET_PRODUCT是一个环境变量，默认值为generic</li></ul><h2 id="四、编译SDK-可选"><a href="#四、编译SDK-可选" class="headerlink" title="四、编译SDK(可选)"></a>四、编译SDK(可选)</h2><ul><li>Android$make sdk<br>打包成功后，可以看到如下输出($USER$表示当前登录的用户名)：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Package SDK: out/host/linux-x86/sdk/android-sdk_eng.$USER$_linux-x86.zip</span><br></pre></td></tr></table></figure></li></ul><h2 id="五、安装编译好的Android镜像到模拟器上"><a href="#五、安装编译好的Android镜像到模拟器上" class="headerlink" title="五、安装编译好的Android镜像到模拟器上"></a>五、安装编译好的Android镜像到模拟器上</h2><ol><li>设置环境变量(Android模拟器命令emulator位于Android/out/host/linux-x86/bin中，~/Android/out/target/product/generic是Android镜像存放目录)</li></ol><ul><li>Android$export PATH=$PATH:~/Android/out/host/linux-x86/bin</li><li>Android$export ANDROID_PRODUCT_OUT=~/Android/out/target/product/generic</li></ul><ol start="2"><li>运行Android模拟器</li></ol><ul><li>Android$emulator</li></ul><p>启动Android模拟器需要四个文件，分别为zImage、system.img、userdata.img和ramdisk.img，其中zImage为Linux内核镜像文件，三个.img文件为Android系统镜像文件。如果不带任何参数来运行emulator命令，则Android模拟器默认使用的zImage文件是Android/out/host/linux-x86/bin中的kernel-qemu文件，默认使用的三个.img文件位于ANDROID_PRODUCT_OUT目录中。ANDROID_PRODUCT_OUT是一个环境变量，这里将它的值设置为Android源码编译结果的输出目录，如果不设置ANDROID_PRODUCT_OUT环境变量，就需要指定上述四个文件来启动Android模拟器，如下：</p><ul><li>Android$emulator - kernel ./prebuilt/android-arm/kernel/kernel-qemu -sysdir ./out/target/product/generic -system system.img -data userdata.img -ramdisk ramdisk.img</li></ul><h2 id="六、下载、编译和安装Android最新内核源代码"><a href="#六、下载、编译和安装Android最新内核源代码" class="headerlink" title="六、下载、编译和安装Android最新内核源代码"></a>六、下载、编译和安装Android最新内核源代码</h2><p>Android源代码工程默认是不包括它所使用的Linux内核源代码的，而是使用预先编译好的内核，即prebuilt/android-arm/kernel/kernel-qemu文件。如果我们需要运行定制的Linux内核，则需要下载Linux kernel源代码进行编译。</p><ol><li>Linux kernel源代码下载</li></ol><ul><li>~/Android$ mkdir kernel</li><li>~/Android$ cd kernel</li><li>~/Android/kernel$ git clone <a href="http://android.googlesource.com/kernel/goldfish.git" target="_blank" rel="noopener">http://android.googlesource.com/kernel/goldfish.git</a></li></ul><ol start="2"><li>支线下载<br>下载完成后，在kernel目录下可以看到一个空的goldfish子目录，此时需要执行git checkout来指定需要的支线代码，在执行git checkout之前，可先执行git branch -a查看有哪些支线代码。这里选择android-gldfish-2.6.29</li></ol><ul><li>~/Android/kernel/goldfish$git branch -a</li><li>~/Android/kernel/goldfish$git checkout remotes/origin/archive/android-gldfish-2.6.29</li></ul><ol start="3"><li><p>修改Android内核源码目录下Makefile文件中的CROSS_COMPILE变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#ARCH ?= (SUBARCH)</span><br><span class="line">#CROSS_COMPILE?=</span><br><span class="line">ARCH?= arm  #体系结构为arm</span><br><span class="line">CROSS_COMPILE?= arm-eabi- #交叉编译工具链前缀</span><br></pre></td></tr></table></figure></li><li><p>将交叉编译工具目录添加到环境变量PATH中</p></li></ol><ul><li>~/Android/kernel/goldfish$ export PATH=$PATH:~/Android/prebuilt/linux-x86/toolchain/arm-eabi-4.4.3/bin</li></ul><ol start="5"><li>修改硬件配置文件goldfish_defconfig</li></ol><ul><li>~/Android/kernel/goldfish$ make goldfish_defconfig</li></ul><ol start="6"><li>开始编译(在make之前，可以执行make menuconfig先配置一下编译选项)</li></ol><ul><li>~/Android/kernel/goldfish$ make<br>编译成功后，可看到下面两行：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">OBJCOPY arch/arm/boot/zImage</span><br><span class="line">Kernel: arch/arm/boot/zImage is ready</span><br></pre></td></tr></table></figure></li></ul><h2 id="七、在模拟器中运行编译好的内核"><a href="#七、在模拟器中运行编译好的内核" class="headerlink" title="七、在模拟器中运行编译好的内核"></a>七、在模拟器中运行编译好的内核</h2><ol><li>在启动模拟器之前，先设置模拟器的目录到环境变量$PATH中去</li></ol><ul><li>~/Android$export PATH=$PATH:~/Android/out/host/linux-x86/bin</li></ul><ol start="2"><li>设置ANDROID_PRODUCT_OUT环境变量</li></ol><ul><li>~/Android$export ANDROID_PRODUCT_OUT=~/Android/out/target/product/generic</li></ul><ol start="3"><li>在后台中指定内核文件启动模拟器</li></ol><ul><li>~/Android$emulator -kernel ./kernel/goldfish/arch/arm/boot/zImage &amp;</li></ul><ol start="4"><li>用adb工具连接模拟器，查看内核版本信息，看看模拟器上跑的内核是不是刚才编译出来的内核(adb位于~/Android/out/host/linux-x86/bin目录中)<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">~/Android$ adb shell</span><br><span class="line">root@android:/ # cd proc</span><br><span class="line">root@android:/proc # cat version</span><br></pre></td></tr></table></figure></li></ol><h2 id="八、单独编译Android源代码中的模块"><a href="#八、单独编译Android源代码中的模块" class="headerlink" title="八、单独编译Android源代码中的模块"></a>八、单独编译Android源代码中的模块</h2><p>Android源码第一次执行make会耗时很久，之后如果修改了Android源码中的某个模块或者在Android源码工程新增一个自己的模块，则可以单独编译该模块，以及重新打包system.img。</p><ol><li>在Android源码目录下的build目录下，有个脚本文件envsetup.sh，执行这个脚本文件可以获得一些有用的工具，其中就包括mmm，该命令用来编译指定目录的所有模块，通常这个目录只包含一个模块。</li><li>使用mmm命令来编译指定的模块，如Email应用程序</li></ol><ul><li>~/Android$mmm packages/apps/Email/<br>编译完成之后，就可以在out/target/product/generic/system/app目录下看到Email.apk文件了。Android系统自带的App都放在这具目录下。另外，Android系统的一些可执行文件，例如C编译的可执行文件，放在out/target/product/generic/system/bin目录下，动态链接库文件放在out/target/product/generic/system/lib目录下，out/target/product/generic/system/lib/hw目录存放的是硬件抽象层（HAL）接口文件.</li></ul><ol start="3"><li>编译好模块后，重新打包system.img文件</li></ol><ul><li>~/Android$make snod</li></ul><ol start="4"><li>运行模拟器：</li></ol><ul><li>~/Android$emulator</li></ul><h2 id="九、日志系统"><a href="#九、日志系统" class="headerlink" title="九、日志系统"></a>九、日志系统</h2><p>Android系统在用户空间中提供了轻量级的logger日志系统，它是在内核中实现的一种设备驱动，与用户空间的logcat工具配合使用能够方便地跟踪调试程序。在Android系统中，分别为C/C++ 和Java语言提供两种不同的logger访问接口。C/C++日志接口一般是在编写硬件抽象层模块或者编写JNI方法时使用，而Java接口一般是在应用层编写APP时使用。</p><ol><li>Android系统中的C/C++日志接口是通过宏来使用的。在system/core/include/android/log.h定义了日志的级别, 在system/core/include/cutils/log.h中，定义了对应的宏，如对应于ANDROID_LOG_VERBOSE的宏LOGV。<br>如果使用C/C++日志接口，只要定义自己的LOG_TAG宏和包含头文件system/core/include/cutils/log.h就可以了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#define LOG_TAG &quot;MY LOG TAG&quot;</span><br><span class="line">#include &lt;cutils/log.h&gt;</span><br></pre></td></tr></table></figure></li></ol><p>就可以了，例如使用LOGV：<br>LOGV(“This is the log printed by LOGV in android user space.”);//ALOGI</p><ol start="2"><li>Android系统在Frameworks层中定义了Java日志接口（frameworks/base/core/java/android/util/Log.java）<br>如果使用Java日志接口，只要在类中定义的LOG_TAG常量和引用android.util.Log就可以了。<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private static final String LOG_TAG = &quot;MY_LOG_TAG&quot;;</span><br><span class="line">Log.i(LOG_TAG, &quot;This is the log printed by Log.i in android user space.&quot;);</span><br></pre></td></tr></table></figure></li></ol><p><strong>要查看这些LOG的输出，可以配合logcat工具</strong></p><ul><li>如果是在自己编译的Android源代码工程中使用，则在后台中运行模拟器<ul><li>~/Android$ emulator &amp;</li></ul></li><li>启动adb shell工具<ul><li>~/Android$ adb shell</li></ul></li><li>使用logcat命令查看日志<ul><li>root@android:/ # logcat</li></ul></li></ul>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ubuntu snap 应用</title>
      <link href="/2018/06/29/2018-06-29-snap-qt-dbus/"/>
      <url>/2018/06/29/2018-06-29-snap-qt-dbus/</url>
      <content type="html"><![CDATA[<blockquote><p>Ubuntu 从 16.04开始，支持两种格式的安装包：debian 和 snap，其中 snap 不依赖于操作系统及其发布版本， 其可以安装同样一个软件的不同版本且不造成任何的干扰。<br><br><br>snap 是一种全新的软件包管理方式，它类似一个容器拥有一个应用程序所有的文件和库，各个应用程序之间完全独立，解决了应用程序之间的依赖问题，但因其包含应用需要的文件和库，导致snap包过大，占用更多的磁盘空间（snap包包含一个私有的root文件系统，里面包含了依赖的软件包）。</p></blockquote><hr><h2 id="Snap命令简介"><a href="#Snap命令简介" class="headerlink" title="Snap命令简介"></a>Snap命令简介</h2><ul><li><p>安装Snap的相关包</p><ul><li>sudo apt update</li><li>sudo apt-get install snapd snapcraft build-essential</li></ul></li><li><p>在snap store中查找snap包</p><ul><li>snap find</li></ul></li><li><p>显示已安装的snap应用列表</p><ul><li>snap list</li></ul></li><li><p>安装一个snap包</p><ul><li>sudo snap install &lt;snap_pkg_name&gt;</li></ul></li><li><p>更新一个snap包</p><ul><li>sudo snap refresh &lt;snap_pkg_name&gt;</li></ul></li><li><p>将snap包还原到以前安装的版本</p><ul><li>sudo snap revert &lt;snap_pkg_name&gt;</li></ul></li><li><p>卸载一个snap包</p><ul><li>sudo snap remove &lt;snap_pkg_name&gt;</li></ul></li></ul><h2 id="打造Snap应用"><a href="#打造Snap应用" class="headerlink" title="打造Snap应用"></a>打造Snap应用</h2><blockquote><p>我这里配置的system dbus相关的.service和.conf文件根本在snap包中没有起到作用，debian包中是可以的，原因暂时没找到比较官方的答案。最终使用plug和slot的方式，并且是手动启动system dbus的方法才让图形程序从dbus daemon获取到数据（貌似是目前snap还不支持dbus的自动启动？？？）。</p></blockquote><ul><li><p>1、编码编写完毕后，在源码第一级目录下打开终端，执行：$snapcraft init，会自动生成snap相关文件，其中模板文件snapcraft.yaml将描述snap包的整个构建过程</p></li><li><p>2、修改模板文件snapcraft.yaml，具体见<a href="https://github.com/eightplus/system-tool" target="_blank" rel="noopener">源码</a>中的写法</p></li><li><p>3、终端执行：$snapcraft ，生成snap包</p></li><li><p>4、安装snap包：$sudo snap install system-tool_1.0.2_amd64.snap –devmode –dangerous</p></li><li><p>5、安装完成后，终端运行 $snap interfaces 可以查看到plug和slot。有资料显示，如果要让我的dbus服务程序和图形程序进行通信，还需要终端执行：$sudo snap connect system-tool:daemon-plug system-tool:daemon-slot ，对应的disconnect操作是：$sudo snap disconnect system-tool:daemon-plug system-tool:daemon-slot。此处不执行上述操作仍可以，有些不知所依然？？？可能是我这里在snap容器中关于dbus的使用方法没找到正解的原因。<br><img src="/2018/06/29/2018-06-29-snap-qt-dbus/01.png" alt=""></p></li><li><p>6、手动启动dbus服务，打开终端执行：$sudo system-tool.system-tool-daemon</p></li><li><p>7、启动图形程序：$system-tool<br><img src="/2018/06/29/2018-06-29-snap-qt-dbus/02.png" alt=""><br><em>图形程序运行结果图</em></p></li><li><p>8、如果想将自己开发的snap发布到snap商店，首先注册一个Ubuntu One帐号，<a href="https://dashboard.snapcraft.io/openid/login" target="_blank" rel="noopener">注册地址</a></p></li><li><p>9、有了帐号之后，自然是一条流水线生产操作步骤：登录-&gt;注册应用名-&gt;上传snap包-&gt;退出</p><ul><li>snapcraft login</li><li>snapcraft register system-tool  (<strong>只有第一次上传该应用时才需要注册应用名</strong>)</li><li>snapcraft push system-tool_1.0.2_amd64.snap –release beta</li><li>snapcraft logout</li></ul></li><li><p>10、上传后，你可以在邮箱等着snapcraft系统给你回邮件啦！很遗憾，由于我使用了自定义的plug和slot，自动审核失败了，需要人工审核（之前验证过没有自定义slot和plug时，上传可以自动审核成功）。<br><img src="/2018/06/29/2018-06-29-snap-qt-dbus/03.png" alt=""><br><img src="/2018/06/29/2018-06-29-snap-qt-dbus/04.png" alt=""></p></li></ul><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://forum.snapcraft.io/t/the-dbus-interface/2038" target="_blank" rel="noopener">https://forum.snapcraft.io/t/the-dbus-interface/2038</a></p><p><a href="https://github.com/snapcore/snapd/wiki/Interfaces#dbus" target="_blank" rel="noopener">https://github.com/snapcore/snapd/wiki/Interfaces#dbus</a></p><p><a href="https://forum.snapcraft.io/t/how-do-i-connect-a-snap-to-dbus/1533" target="_blank" rel="noopener">https://forum.snapcraft.io/t/how-do-i-connect-a-snap-to-dbus/1533</a></p><p><a href="https://github.com/snapcore/snapd/pull/2592" target="_blank" rel="noopener">https://github.com/snapcore/snapd/pull/2592</a></p><p><a href="https://blog.csdn.net/tq08g2z/article/details/78685011" target="_blank" rel="noopener">https://blog.csdn.net/tq08g2z/article/details/78685011</a></p><p><a href="https://www.2cto.com/kf/201607/528337.html" target="_blank" rel="noopener">https://www.2cto.com/kf/201607/528337.html</a></p><p><a href="https://blog.csdn.net/ubuntutouch/article/details/51886345" target="_blank" rel="noopener">https://blog.csdn.net/ubuntutouch/article/details/51886345</a></p><p><a href="https://blog.csdn.net/ubuntutouch/article/details/51953272" target="_blank" rel="noopener">https://blog.csdn.net/ubuntutouch/article/details/51953272</a></p><p><a href="https://www.msweet.org/blog/2018-01-23-snaps-and-gui-apps.html" target="_blank" rel="noopener">https://www.msweet.org/blog/2018-01-23-snaps-and-gui-apps.html</a></p><p><a href="https://github.com/ubuntu/snappy-playpen" target="_blank" rel="noopener">https://github.com/ubuntu/snappy-playpen</a></p><p><a href="https://code.launchpad.net/~dpm/ubuntu-calendar-app/snap-all-things" target="_blank" rel="noopener">https://code.launchpad.net/~dpm/ubuntu-calendar-app/snap-all-things</a></p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Snap </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>使用Jekyll + Github搭建博客</title>
      <link href="/2018/06/27/2018-06-27-welcome-to-jekyll/"/>
      <url>/2018/06/27/2018-06-27-welcome-to-jekyll/</url>
      <content type="html"><![CDATA[<blockquote><p>一直想把自己学习linux的过程记录下来，又不想总是依托那些现成的博客网站，在WordPress和Github中，我选择了Github，原因只有一个，穷，哈哈哈。<br><br><br>这里先简要接收博客搭建的初期准备工作！<br>Markdown编辑器使用的是Atom，快捷键列表如下：</p></blockquote><table><thead><tr><th>快捷键</th><th>解释</th></tr></thead><tbody><tr><td>Crtl+Shift+M</td><td>开启Markdown实时预览</td></tr><tr><td>Command+Shift+P</td><td>打开命令窗口，可以运行各种菜单功能</td></tr><tr><td>Command + T</td><td>快速多文件切换</td></tr><tr><td>Command + F</td><td>文件内查找和替换</td></tr><tr><td>Command + Shift + F</td><td>多文件查找和替换</td></tr><tr><td>Command + [</td><td>对选中内容向左缩进</td></tr><tr><td>Command + ]</td><td>对选中内容向右缩进</td></tr><tr><td>Command + \</td><td>显示或隐藏目录树</td></tr><tr><td>Crtl + m</td><td>相应括号之间，html tag之间等跳转</td></tr><tr><td>Crtl + Alt + B</td><td>格式化代码（需要安装atom-beautify）</td></tr><tr><td>Crtl + `</td><td>调起CLI命令行界面（需要安装terminal-panel）</td></tr></tbody></table><hr><h2 id="Github"><a href="#Github" class="headerlink" title="Github"></a>Github</h2><ul><li><p>github帐号注册和创建页面仓库</p><ul><li><p>注册地址：<a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></p></li><li><p>仓库的名字需要和你的账号对应，格式：yourname.github.io，比如我这里演示的页面仓库名为eightplus.github.io</p></li></ul></li><li><p>生成ssh密钥，并将密钥添加到github上</p><ul><li><p>生成密钥：<code>ssh-keygen -t rsa -C</code> 注册帐号时的邮箱地址”</p></li><li><p>密钥生成后，在 ~/.ssh目录下会生成一些文件，包括id_rsa和id_rsa.pub</p></li><li><p>打开id_rsa.pub，选中所有内容复制，网页进入 <a href="https://github.com/settings/ssh" target="_blank" rel="noopener">https://github.com/settings/ssh</a> ，Add SSH key，粘贴之前复制的内容。</p></li></ul></li><li><p>Github安装和帐号配置</p><ul><li><p><code>sudo apt-get install git</code></p></li><li><p><code>git config --global user.name &quot;yourname&quot;</code></p></li><li><p><code>git config --global user.email &quot;注册帐号时的邮箱地址&quot;</code></p></li></ul></li></ul><h2 id="安装ruby环境"><a href="#安装ruby环境" class="headerlink" title="安装ruby环境"></a>安装ruby环境</h2><p><code>sudo apt-get install ruby-all-dev</code><br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/01.png" alt=""><br>我的系统为Ubuntu 16.04，使用的软件源里面存在ruby2.3-dev，则此种方式会将ruby2.3-dev一并安装，当然，上述操作也可以替换成安装ruby2.3-dev，(<code>sudo apt-get install ruby2.3-dev</code>)</p><p>安装完成后，在终端中输入<code>ruby -v</code>，查看版本信息，如下图：<br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/02.png" alt=""></p><p>完成ruby环境后，在终端中输入<code>gem -v</code>，出现如下结果，则说明ruby环境已经完全配置成功了，如果出现了报错信息，可能需要安装nodejs (sudo apt-get install nodejs)。<br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/03.png" alt=""></p><h2 id="安装JeKyll环境"><a href="#安装JeKyll环境" class="headerlink" title="安装JeKyll环境"></a>安装JeKyll环境</h2><ul><li>先安装依赖包bundler：<ul><li><code>sudo gem install bundler</code></li></ul></li><li>再安装安装jekyll：<ul><li><code>sudo gem install jekyll</code></li></ul></li><li>安装完成后，在终端中输入<code>jekyll --version</code>，出现如下结果，则说明安装成功<br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/04.png" alt=""></li></ul><h2 id="工程创建"><a href="#工程创建" class="headerlink" title="工程创建"></a>工程创建</h2><p><a href="#build">是否迫不及待的想看下第一个博客的具体内容 👉 </a></p><p>在你打算存放工程代码的目录下打开一个终端后使用jekyll创建一个项目，这里我的目录为：~/work/git/：<br><code>jekyll new blog</code><br>操作之后会生成很多文件/文件夹，详细说明如下：<br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/05.png" alt=""></p><ul><li>_config.yml：Jekyll配置文件，存储配置数据</li><li>_drafts：草稿目录，可手动创建</li><li>_includes：包含一些模板，可以重复利用</li><li>_layouts：存放页面模板的地方</li><li>_posts：存放文章的目录，文章格式为 mardown 格式（year-month-title.markdown）或.md，文件名确定了发表的日期和标记语言</li><li>_data：存放yaml格式的数据文件</li><li>_site：使用Jekyll编译后的静态站点将存放于这个目录下，即jekyll生成的网站会放在该文件夹下，该目录不需要push到github，可在.gitignore文件中加入这个目录</li><li>index.html：该文件带有 yaml 头信息，大概如下：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">layout: post</span><br><span class="line">title:  &quot;Welcome to Jekyll!&quot;</span><br><span class="line">date:   2018-06-27 15:33:17 +0800</span><br><span class="line">categories: jekyll update</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><p>上述操作会生成个默认文章，位于_posts目录下，名字类似为：<code>2018-06-27-welcome-to-jekyll.markdown</code></p><p>可以复制2018-06-27-welcome-to-jekyll.markdown后进行修改来进行新的博客编写，这里推荐使用 <a href="https://atom.io/" target="_blank" rel="noopener">git的atom编辑器</a> 来编辑.markdown文件，可以在atom官网进行deb包的下载，新页面生成和编辑完成后，重启jekyll内置服务器（终端执行：jekyll serve），打开或刷新页面：<a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a>，这样就可以在页面看到自己添加的博文了。<br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/06.png" alt=""><br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/07.png" alt=""></p><h2 id="Git同步"><a href="#Git同步" class="headerlink" title="Git同步"></a>Git同步</h2><p>将前面创建的仓库克隆到本地，然后将blog目录中生成的文件复制到github项目目录下，我这里项目名为 <code>eightplus.github.io</code>。</p><ul><li><code>git clone https://github.com/yourname/yourname.github.io.git</code></li><li><code>git add .</code></li><li><code>git commit -m &quot;init&quot;</code></li><li><code>git push -u origin master</code></li></ul><p>至此，在浏览器中输入<a href="https://yourname.github.io，比如：https://eightplus.github.io/，即可看到下图，博客搭建完成" target="_blank" rel="noopener">https://yourname.github.io，比如：https://eightplus.github.io/，即可看到下图，博客搭建完成</a></p><p></p><p id="build"></p><br><img src="/2018/06/27/2018-06-27-welcome-to-jekyll/08.png" alt="博客效果图"><br><em>网页浏览效果图</em><p></p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Jekyll </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
