{"title":"Eight Plus","description":"Linux 爱好者","language":"zh-Hans","link":"https://eightplus.github.io","pubDate":"Tue, 10 Jul 2018 08:25:16 GMT","lastBuildDate":"Tue, 31 Jul 2018 10:30:24 GMT","generator":"hexo-generator-json-feed","webMaster":"李翔","items":[{"title":"Hexo","link":"https://eightplus.github.io/2018/07/10/2018-07-10-hexo/","description":"hexo是一款基于Node.js的静态博客框架，可以方便的生成静态网页托管在github上。 依赖包和工具安装 Git sudo apt-get install git (git-core) git --version 生成 SSH key : ssh-keygen -t rsa -C &quot;349098792@qq.com&quot; 默认情况下连续按下三个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub。如果是想一台电脑配置两个或多个github帐号，则此处不能够一直回车，要注意在提示输入文件名称时输入一个和默认名称不一样的名称，否则会发生覆盖，比如这里我电脑上使用两个github帐号，新建的一个名为yudianr，则可以给文件取名叫id_rsa_yudianr，则会在当前文件夹中生成id_rsa_yudianr和id_rsa_yudianr.pub两个文件。在GitHub帐号设置那里添加SSH Key，打开公钥文件id_rsa_yudianr.pub，复制里面的所有字符粘贴到github的SSH设置处，可使用ssh -T git@github.com来测试是否关联成功。 - 配置~/.ssh/config文件 123456789101112131415161718192021222324 #老帐号 Host github.com HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa #新帐号 Host yudianr.github.com HostName github.com PreferredAuthentications publickey IdentityFile ~/.ssh/id_rsa_yudianr注意：此时提交代码后log中记录的用户名和邮箱信息都为全局配置的git帐号的信息，如果希望修改显示的信息，可以在项目目录中使用以下命令进行配置：git config --global user.name &quot;你的昵称&quot;git config --global user.email &quot;你的邮箱地址&quot;或者vim .gitconfig直接进行修改[user] name = eightplus email = kobe24_lixiang@126.com或者[user] name = yudianr email = 349098792@qq.com npm sudo apt-get install npm npm -v Nodejs sudo apt-get install nodejs node -v Hexo sudo npm install -g hexo-cli hexo -v 初始化Hexo123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install 自动部署发布工具 hexo-deployer-git npm i hexo-generator-json-content –save (在上面初始化后的folder目录下打开终端执行，执行后会写入package.json文件中) 其他插件安装 123456npm i hexo-helper-qrcode --savenpm i hexo-generator-sitemap --savenpm i hexo-generator-json-feed --savenpm i hexo-generator-feed --savenpm i hexo-generator-baidu-sitemap --savenpm i hexo-deployer-rsync --save 提交搜素引擎 站点地图是一种文件，您可以通过该文件列出您网站上的网页，从而将您网站内容的组织架构告知Google和其他搜索引擎。Googlebot等搜索引擎网页抓取工具会读取此文件，以便更加智能地抓取您的网站。百度站长平台为未使用百度统计的站点提供三种验证方式：文件验证、html标签验证、CNAME验证，如果选择文件验证，下载文件后将文件放在source跟目录下。验证完成后，我们将会认为您是网站的拥有者。为使您的网站一直保持验证通过的状态，请保留验证的文件、html标签或CNAME记录，我们会去定期检查验证记录。 对谷歌和百度的插举例-&gt;打开博客根目录，在这个目录下打开终端执行执行如下两个安装插件：npm install hexo-generator-sitemap --savenpm install hexo-generator-baidu-sitemap --save 在博客根目录的_config.yml中添加如下代码 12345# 自动生成sitemapsitemap: path: sitemap.xmlbaidusitemap: path: baidusitemap.xml 执行hexo generate编译博客后，如果博客根目录的public下生成了sitemap.xml以及baidusitemap.xml就表示成功了。 生成静态文件 hexo generate 生成静态文件查看默认博客效果 hexo server （如果默认的4000端口被占用，可以使用-p参数指定其他端口，如：hexo server -p 5000） 修改配置 在站点的配置文件_config.yml中设置部署信息(注意：type repo branch message前有两个空格)12345deploy: type: git repo: https://github.com/eightplus/eightplus.github.io.git branch: master message: &apos;站点更新:&#123;&#123;now(&quot;YYYY-MM-DD HH:mm:ss&quot;)&#125;&#125;&apos; 部署到GitHub上12345hexo clean #清空hexo generate #生成静态网页hexo deploy #部署浏览器中输入 http://eightplus.github.io 绑定域名 在hexo的工作空间下的source目录下新建一个CNAME的文件，不要后缀。打开CNAME写上购买的域名，如： eightplus.info 扩展 网站访问量显示 使用第三方的统计插件不蒜子, 在themes\\yilia\\layout_partial下的footer.ejs中加入如下代码即可12345678&lt;script async src=&quot;//dn-lbstatics.qbox.me/busuanzi/2.3/busuanzi.pure.mini.js&quot;&gt;&lt;/script&gt;&lt;span id=&quot;busuanzi_container_site_pv&quot;&gt; 本站总访问量&lt;span id=&quot;busuanzi_value_site_pv&quot;&gt;&lt;/span&gt;次&lt;/span&gt;&lt;span id=&quot;busuanzi_container_site_uv&quot;&gt;总访客数&lt;span id=&quot;busuanzi_value_site_uv&quot;&gt;&lt;/span&gt;人次&lt;/span&gt; 实现单篇文章浏览统计和评论统计(从网易云跟帖中获取评论数) 参考文档 修改themes\\yilia\\layout_partial文件夹下的article.ejs文件，在&lt;%- partial(‘post/title’, {class_name: ‘article-title’}) %&gt;节点下加入(注意这里网易云跟帖还没设置，而评论数中使用到了，这里运行会有问题)显示阅读和评论数 -->1234567891011121314&lt;% if (!index &amp;&amp; post.comments &amp;&amp; config.wangYi)&#123; %&gt;&lt;br/&gt;&lt;a class=&quot;cloud-tie-join-count&quot; href=&quot;javascript:void(0);&quot; style=&quot;color:gray;font-size:14px;&quot;&gt;&lt;span class=&quot;icon-sort&quot;&gt;&lt;/span&gt;&lt;span id=&quot;busuanzi_container_page_pv&quot; style=&quot;color:#ef7522;font-size:14px;&quot;&gt; 阅读数: &lt;span id=&quot;busuanzi_value_page_pv&quot;&gt;&lt;/span&gt;次 &amp;nbsp;&amp;nbsp;&lt;/span&gt;&lt;/a&gt;&lt;a class=&quot;cloud-tie-join-count&quot; href=&quot;javascript:void(0);&quot; style=&quot;color:#ef7522;font-size:14px;&quot;&gt; &lt;span class=&quot;icon-comment&quot;&gt;&lt;/span&gt; &lt;span class=&quot;join-text&quot; style=&quot;color:#ef7522;font-size:14px;&quot;&gt;评论数:&lt;/span&gt; &lt;span class=&quot;join-count&quot;&gt;0&lt;/span&gt;次&lt;/a&gt;&lt;% &#125; %&gt;","pubDate":"Tue, 10 Jul 2018 08:25:16 GMT","guid":"https://eightplus.github.io/2018/07/10/2018-07-10-hexo/","category":"工具"},{"title":"Android 源码编译","link":"https://eightplus.github.io/2018/07/03/2018-07-03-build-android/","description":"这里使用Ubuntu 16.04的64位系统上进行Android源码的编译。 依赖包和工具安装 Git sudo apt-get install git Java SDK sudo add-apt-repository ppa:ferramroberto/java sudo apt-get update","pubDate":"Tue, 03 Jul 2018 03:01:16 GMT","guid":"https://eightplus.github.io/2018/07/03/2018-07-03-build-android/","category":"工具"},{"title":"ubuntu snap 应用","link":"https://eightplus.github.io/2018/06/29/2018-06-29-snap-qt-dbus/","description":"Ubuntu 从 16.04开始，支持两种格式的安装包：debian 和 snap，其中 snap 不依赖于操作系统及其发布版本， 其可以安装同样一个软件的不同版本且不造成任何的干扰。snap 是一种全新的软件包管理方式，它类似一个容器拥有一个应用程序所有的文件和库，各个应用程序之间完全独立，解决了应用程序之间的依赖问题，但因其包含应用需要的文件和库，导致snap包过大，占用更多的磁盘空间（snap包包含一个私有的root文件系统，里面包含了依赖的软件包）。 Snap命令简介 安装Snap的相关包 sudo apt update sudo apt-get install snapd snapcraft build-essential 在snap store中查找snap包 snap find 显示已安装的snap应用列表 snap list 安装一个snap包 sudo snap install &lt;snap_pkg_name&gt; 更新一个snap包 sudo snap refresh &lt;snap_pkg_name&gt; 将snap包还原到以前安装的版本 sudo snap revert &lt;snap_pkg_name&gt; 卸载一个snap包 sudo snap remove &lt;snap_pkg_name&gt; 打造Snap应用 我这里配置的system dbus相关的.service和.conf文件根本在snap包中没有起到作用，debian包中是可以的，原因暂时没找到比较官方的答案。最终使用plug和slot的方式，并且是手动启动system dbus的方法才让图形程序从dbus daemon获取到数据（貌似是目前snap还不支持dbus的自动启动？？？）。 1、编码编写完毕后，在源码第一级目录下打开终端，执行：$snapcraft init，会自动生成snap相关文件，其中模板文件snapcraft.yaml将描述snap包的整个构建过程 2、修改模板文件snapcraft.yaml，具体见源码中的写法 3、终端执行：$snapcraft ，生成snap包 4、安装snap包：$sudo snap install system-tool_1.0.2_amd64.snap –devmode –dangerous 5、安装完成后，终端运行 $snap interfaces 可以查看到plug和slot。有资料显示，如果要让我的dbus服务程序和图形程序进行通信，还需要终端执行：$sudo snap connect system-tool:daemon-plug system-tool:daemon-slot ，对应的disconnect操作是：$sudo snap disconnect system-tool:daemon-plug system-tool:daemon-slot。此处不执行上述操作仍可以，有些不知所依然？？？可能是我这里在snap容器中关于dbus的使用方法没找到正解的原因。 6、手动启动dbus服务，打开终端执行：$sudo system-tool.system-tool-daemon 7、启动图形程序：$system-tool图形程序运行结果图 8、如果想将自己开发的snap发布到snap商店，首先注册一个Ubuntu One帐号，注册地址 9、有了帐号之后，自然是一条流水线生产操作步骤：登录-&gt;注册应用名-&gt;上传snap包-&gt;退出 snapcraft login snapcraft register system-tool (只有第一次上传该应用时才需要注册应用名) snapcraft push system-tool_1.0.2_amd64.snap –release beta snapcraft logout 10、上传后，你可以在邮箱等着snapcraft系统给你回邮件啦！很遗憾，由于我使用了自定义的plug和slot，自动审核失败了，需要人工审核（之前验证过没有自定义slot和plug时，上传可以自动审核成功）。 参考文档https://forum.snapcraft.io/t/the-dbus-interface/2038 https://github.com/snapcore/snapd/wiki/Interfaces#dbus https://forum.snapcraft.io/t/how-do-i-connect-a-snap-to-dbus/1533 https://github.com/snapcore/snapd/pull/2592 https://blog.csdn.net/tq08g2z/article/details/78685011 https://www.2cto.com/kf/201607/528337.html https://blog.csdn.net/ubuntutouch/article/details/51886345 https://blog.csdn.net/ubuntutouch/article/details/51953272 https://www.msweet.org/blog/2018-01-23-snaps-and-gui-apps.html https://github.com/ubuntu/snappy-playpen https://code.launchpad.net/~dpm/ubuntu-calendar-app/snap-all-things","pubDate":"Fri, 29 Jun 2018 02:58:12 GMT","guid":"https://eightplus.github.io/2018/06/29/2018-06-29-snap-qt-dbus/","category":"工具"},{"title":"使用Jekyll + Github搭建博客","link":"https://eightplus.github.io/2018/06/27/2018-06-27-welcome-to-jekyll/","description":"一直想把自己学习linux的过程记录下来，又不想总是依托那些现成的博客网站，在WordPress和Github中，我选择了Github，原因只有一个，穷，哈哈哈。这里先简要接收博客搭建的初期准备工作！ Github github帐号注册和创建页面仓库 注册地址：https://github.com/ 仓库的名字需要和你的账号对应，格式：yourname.github.io，比如我这里演示的页面仓库名为eightplus.github.io 生成ssh密钥，并将密钥添加到github上 生成密钥：ssh-keygen -t rsa -C 注册帐号时的邮箱地址” 密钥生成后，在 ~/.ssh目录下会生成一些文件，包括id_rsa和id_rsa.pub 打开id_rsa.pub，选中所有内容复制，网页进入 https://github.com/settings/ssh ，Add SSH key，粘贴之前复制的内容。 Github安装和帐号配置 sudo apt-get install git git config --global user.name &quot;yourname&quot; git config --global user.email &quot;注册帐号时的邮箱地址&quot; 安装ruby环境sudo apt-get install ruby-all-dev我的系统为Ubuntu 16.04，使用的软件源里面存在ruby2.3-dev，则此种方式会将ruby2.3-dev一并安装，当然，上述操作也可以替换成安装ruby2.3-dev，(sudo apt-get install ruby2.3-dev) 安装完成后，在终端中输入ruby -v，查看版本信息，如下图： 完成ruby环境后，在终端中输入gem -v，出现如下结果，则说明ruby环境已经完全配置成功了，如果出现了报错信息，可能需要安装nodejs (sudo apt-get install nodejs)。 安装JeKyll环境 先安装依赖包bundler： sudo gem install bundler 再安装安装jekyll： sudo gem install jekyll 安装完成后，在终端中输入jekyll --version，出现如下结果，则说明安装成功 工程创建是否迫不及待的想看下第一个博客的具体内容 👉 在你打算存放工程代码的目录下打开一个终端后使用jekyll创建一个项目，这里我的目录为：~/work/git/：jekyll new blog操作之后会生成很多文件/文件夹，详细说明如下： _config.yml：Jekyll配置文件，存储配置数据 _drafts：草稿目录，可手动创建 _includes：包含一些模板，可以重复利用 _layouts：存放页面模板的地方 _posts：存放文章的目录，文章格式为 mardown 格式（year-month-title.markdown）或.md，文件名确定了发表的日期和标记语言 _data：存放yaml格式的数据文件 _site：使用Jekyll编译后的静态站点将存放于这个目录下，即jekyll生成的网站会放在该文件夹下，该目录不需要push到github，可在.gitignore文件中加入这个目录 index.html：该文件带有 yaml 头信息，大概如下：123456---layout: posttitle: &quot;Welcome to Jekyll!&quot;date: 2018-06-27 15:33:17 +0800categories: jekyll update--- 上述操作会生成个默认文章，位于_posts目录下，名字类似为：2018-06-27-welcome-to-jekyll.markdown 可以复制2018-06-27-welcome-to-jekyll.markdown后进行修改来进行新的博客编写，这里推荐使用 git的atom编辑器 来编辑.markdown文件，可以在atom官网进行deb包的下载，新页面生成和编辑完成后，重启jekyll内置服务器（终端执行：jekyll serve），打开或刷新页面：http://localhost:4000，这样就可以在页面看到自己添加的博文了。 Git同步将前面创建的仓库克隆到本地，然后将blog目录中生成的文件复制到github项目目录下，我这里项目名为 eightplus.github.io。 git clone https://github.com/yourname/yourname.github.io.git git add . git commit -m &quot;init&quot; git push -u origin master 至此，在浏览器中输入https://yourname.github.io，比如：https://eightplus.github.io/，即可看到下图，博客搭建完成 网页浏览效果图","pubDate":"Wed, 27 Jun 2018 07:33:17 GMT","guid":"https://eightplus.github.io/2018/06/27/2018-06-27-welcome-to-jekyll/","category":"工具"}]}